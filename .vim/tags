!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
#	/home/rpradeep/.vimrc	/^vnoremap <silent> # :call VisualSelection('b')<CR>$/;"	m	language:Vim
$VIMHOME	/home/rpradeep/.vimrc	/^let $VIMHOME = $HOME."\/.vim"$/;"	v	language:Vim
*	/home/rpradeep/.vimrc	/^vnoremap <silent> * :call VisualSelection('f')<CR>$/;"	m	language:Vim
0	/home/rpradeep/.vimrc	/^map 0 ^$/;"	m	language:Vim
<C-h>	/home/rpradeep/.vimrc	/^map <C-h> <C-W>h$/;"	m	language:Vim
<C-j>	/home/rpradeep/.vimrc	/^map <C-j> <C-W>j$/;"	m	language:Vim
<C-k>	/home/rpradeep/.vimrc	/^map <C-k> <C-W>k$/;"	m	language:Vim
<C-l>	/home/rpradeep/.vimrc	/^map <C-l> <C-W>l$/;"	m	language:Vim
<c-space>	/home/rpradeep/.vimrc	/^map <c-space> ?$/;"	m	language:Vim
<D-j>	/home/rpradeep/.vimrc	/^  nmap <D-j> <M-j>$/;"	m	language:Vim
<D-j>	/home/rpradeep/.vimrc	/^  vmap <D-j> <M-j>$/;"	m	language:Vim
<D-k>	/home/rpradeep/.vimrc	/^  nmap <D-k> <M-k>$/;"	m	language:Vim
<D-k>	/home/rpradeep/.vimrc	/^  vmap <D-k> <M-k>$/;"	m	language:Vim
<F10>	/home/rpradeep/.vimrc	/^nnoremap <F10> :ls<CR>:buffer $/;"	m	language:Vim
<F11>	/home/rpradeep/.vimrc	/^nnoremap <F11> :bp<CR>$/;"	m	language:Vim
<F12>	/home/rpradeep/.vimrc	/^nnoremap <F12> :bn<CR>$/;"	m	language:Vim
<F5>	/home/rpradeep/.vimrc	/^nnoremap <silent> <F5> :!(cd ~\/Documents\/ugv_catkin_ws\/ ; catkin_make -DCMAKE_BUILD_TYPE=Release)<CR><CR>$/;"	m	language:Vim
<F8>	/home/rpradeep/.vimrc	/^nnoremap <F8> :ls<CR>:vertical sb $/;"	m	language:Vim
<F9>	/home/rpradeep/.vimrc	/^nnoremap <F9> :Bclose<CR> $/;"	m	language:Vim
<leader><cr>	/home/rpradeep/.vimrc	/^map <silent> <leader><cr> :noh<cr>$/;"	m	language:Vim
<leader><space>	/home/rpradeep/.vimrc	/^map <leader><space> :vimgrep \/\/ <C-R>%<C-A><right><right><right><right><right><right><right><right><right>$/;"	m	language:Vim
<leader>ba	/home/rpradeep/.vimrc	/^map <leader>ba :1,1000 bd!<cr>$/;"	m	language:Vim
<leader>bd	/home/rpradeep/.vimrc	/^map <leader>bd :Bclose<cr>$/;"	m	language:Vim
<leader>cc	/home/rpradeep/.vimrc	/^map <leader>cc :botright cope<cr>$/;"	m	language:Vim
<leader>cd	/home/rpradeep/.vimrc	/^map <leader>cd :cd %:p:h<cr>:pwd<cr>$/;"	m	language:Vim
<leader>co	/home/rpradeep/.vimrc	/^map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg$/;"	m	language:Vim
<leader>g	/home/rpradeep/.vimrc	/^map <leader>g :vimgrep \/\/ **\/*.<left><left><left><left><left><left><left>$/;"	m	language:Vim
<Leader>j	/home/rpradeep/.vimrc	/^map <Leader>j <Plug>(easymotion-j)$/;"	m	language:Vim
<Leader>k	/home/rpradeep/.vimrc	/^map <Leader>k <Plug>(easymotion-k)$/;"	m	language:Vim
<Leader>m	/home/rpradeep/.vimrc	/^noremap <Leader>m mmHmt:%s\/<C-V><cr>\/\/ge<cr>'tzt'm$/;"	m	language:Vim
<leader>n	/home/rpradeep/.vimrc	/^map <leader>n :cn<cr>$/;"	m	language:Vim
<leader>p	/home/rpradeep/.vimrc	/^map <leader>p :cp<cr>$/;"	m	language:Vim
<leader>pp	/home/rpradeep/.vimrc	/^map <leader>pp :setlocal paste!<cr>$/;"	m	language:Vim
<leader>q	/home/rpradeep/.vimrc	/^map <leader>q :e ~\/buffer<cr>$/;"	m	language:Vim
<leader>r	/home/rpradeep/.vimrc	/^vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>$/;"	m	language:Vim
<leader>s?	/home/rpradeep/.vimrc	/^map <leader>s? z=$/;"	m	language:Vim
<leader>sa	/home/rpradeep/.vimrc	/^map <leader>sa zg$/;"	m	language:Vim
<leader>sn	/home/rpradeep/.vimrc	/^map <leader>sn ]s$/;"	m	language:Vim
<leader>sp	/home/rpradeep/.vimrc	/^map <leader>sp [s$/;"	m	language:Vim
<leader>ss	/home/rpradeep/.vimrc	/^map <leader>ss :setlocal spell!<cr>$/;"	m	language:Vim
<leader>tc	/home/rpradeep/.vimrc	/^map <leader>tc :tabclose<cr>$/;"	m	language:Vim
<leader>te	/home/rpradeep/.vimrc	/^map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>\/$/;"	m	language:Vim
<leader>tm	/home/rpradeep/.vimrc	/^map <leader>tm :tabmove$/;"	m	language:Vim
<leader>tn	/home/rpradeep/.vimrc	/^map <leader>tn :tabnew<cr>$/;"	m	language:Vim
<leader>to	/home/rpradeep/.vimrc	/^map <leader>to :tabonly<cr>$/;"	m	language:Vim
<M-j>	/home/rpradeep/.vimrc	/^nmap <M-j> mz:m+<cr>`z$/;"	m	language:Vim
<M-j>	/home/rpradeep/.vimrc	/^vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z$/;"	m	language:Vim
<M-k>	/home/rpradeep/.vimrc	/^nmap <M-k> mz:m-2<cr>`z$/;"	m	language:Vim
<M-k>	/home/rpradeep/.vimrc	/^vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z$/;"	m	language:Vim
<S-h>	/home/rpradeep/.vimrc	/^map <S-h> :tabprevious<cr>$/;"	m	language:Vim
<S-l>	/home/rpradeep/.vimrc	/^map <S-l> :tabnext<cr>$/;"	m	language:Vim
<space>	/home/rpradeep/.vimrc	/^map <space> \/$/;"	m	language:Vim
a	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    double a; \/\/> Acceleration used by the parent node to get this particular child node$/;"	m	language:C++	class:dad_local_planner::STNode
a	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        const double a = aMinus + k * ( aPlus - aMinus ) \/ ( branchingFactor-1 ) ;$/;"	l	language:C++
a	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^    const double a = x \/ s;$/;"	l	language:C++
a	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	Real a;		\/\/angle$/;"	l	language:C++
A	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		ConstraintJacobian A;$/;"	l	language:C++
A	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real A[MAXNC * MAXNV]; \/\/nc x nv$/;"	l	language:C++
A1_ai	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	int A1_ai = 1;$/;"	l	language:C++
A2_ai	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	int A2_ai = 5;$/;"	l	language:C++
A3_ai	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	int A3_ai = 2;$/;"	l	language:C++
A4_ai	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	int A4_ai = 6;$/;"	l	language:C++
A5_ai	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	int A5_ai = 3;$/;"	l	language:C++
A6_ai	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	int A6_ai = 7;$/;"	l	language:C++
absDiff	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^        const double absDiff = std::abs(time_[i] - time);$/;"	l	language:C++
accelPenalty	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    const double accelPenalty = childNode.a * childNode.a * config_.actuatorEffortPenaltyFactor;$/;"	l	language:C++
accMaxBack	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double accMaxBack;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
accMaxBack	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double accMaxBack;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
accMaxFwd	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double accMaxFwd;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
accMaxFwd	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double accMaxFwd;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
Acontact	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real Acontact[3*MAXNP * MAXNV]; \/\/ncc x nv$/;"	l	language:C++
act	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^	Real act[WmrModel::MAXNA * MAXNV]; \/\/actuator$/;"	m	language:C++	class:ConstraintJacobian
actframeinds	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	int actframeinds[MAXNA]; \/\/actuated frame index list$/;"	m	language:C++	class:WmrModel
actframeinds	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^		const int* actframeinds = mdl.get_actframeinds();$/;"	l	language:C++
actframeinds	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int* actframeinds = mdl.get_actframeinds();$/;"	l	language:C++
actframeinds	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int* actframeinds = mdl.get_actframeinds();$/;"	l	language:C++
actframeinds	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int* actframeinds = mdl.get_actframeinds();$/;"	l	language:C++
actuatorEffortPenaltyFactor	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double actuatorEffortPenaltyFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
actuatorEffortPenaltyFactor	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double actuatorEffortPenaltyFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
actuatorModel	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void (*actuatorModel) ( const Real params[], const Real ucmd[], const Real u[], const Real interr[], \/\/inputs$/;"	m	language:C++	class:WmrModel
act_du	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		Real act_du[WmrModel::MAXNA*WmrModel::MAXNA];$/;"	m	language:C++	struct:dModelForce	file:
act_i0	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int act_i0 = ncc;$/;"	l	language:C++
act_i0	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int act_i0 = ncc;$/;"	l	language:C++
act_p	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real act_p[MAXNPAR]; \/\/actuator model params$/;"	m	language:C++	class:WmrModel
add2D	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^            overlay->add2D(panel);$/;"	p	language:C++
add2D	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^            overlay->add2D(panel);$/;"	p	language:C++
addBody	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void addBody(const int parent_ind, const int dof_type, const HomogeneousTransform HT_parent_jointdisp0, const Vec3 pos_center_of_mass);$/;"	p	language:C++	class:WmrModelODE
addBodyBody	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void addBodyBody(const Vec3 pos_center_of_mass); \/\/add body for body frame$/;"	p	language:C++	class:WmrModelODE
addBodyFrame	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void addBodyFrame(const std::string name);$/;"	p	language:C++	class:WmrModel
addBodyFrame	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^void WmrModel::addBodyFrame(const std::string name) {$/;"	f	language:C++	class:WmrModel
addChainElement	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	void addChainElement( const int lineno, const int chainno, const Ogre::Vector3 pt, const float thickness, Ogre::ColourValue* C);$/;"	p	language:C++	class:WmrAnimation
addChainElement	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    lines[lineno]->addChainElement( chainno, elem);$/;"	p	language:C++	file:
addChainElement	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::addChainElement( const int lineno, const int chainno, const Ogre::Vector3 pt, const float thickness, Ogre::ColourValue* C)$/;"	f	language:C++	class:WmrAnimation
addChainElement	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	void addChainElement( const int lineno, const int chainno, const Ogre::Vector3 pt, const float thickness, Ogre::ColourValue* C);$/;"	p	language:C++	class:WmrAnimation
addChainElement	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    lines[lineno]->addChainElement( chainno, elem);$/;"	p	language:C++	file:
addChainElement	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^void WmrAnimation::addChainElement( const int lineno, const int chainno, const Ogre::Vector3 pt, const float thickness, Ogre::ColourValue* C)$/;"	f	language:C++	class:WmrAnimation
addChainElement	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	void addChainElement( const int lineno, const int chainno, const Ogre::Vector3 pt, const float thickness, Ogre::ColourValue* C);$/;"	p	language:C++	class:WmrAnimation
addChainElement	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	lines[lineno]->addChainElement( chainno, elem);$/;"	p	language:C++	file:
addChainElement	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^void WmrAnimation::addChainElement( const int lineno, const int chainno, const Ogre::Vector3 pt, const float thickness, Ogre::ColourValue* C) {$/;"	f	language:C++	class:WmrAnimation
addChild	/home/rpradeep/Desktop/sim/basic.cpp	/^    boxPat->addChild(basicShapesGeode);$/;"	p	language:C++	file:
addChild	/home/rpradeep/Desktop/sim/basic.cpp	/^    root->addChild(boxPat);$/;"	p	language:C++	file:
addChild	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^        panel->addChild(textArea);$/;"	p	language:C++
addChild	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^        panel->addChild(textArea);$/;"	p	language:C++
addChild	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    pyramidTwoXForm->addChild(pyramidGeode);$/;"	p	language:C++	file:
addChild	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    root->addChild(pyramidGeode);$/;"	p	language:C++	file:
addChild	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    root->addChild(pyramidTwoXForm);$/;"	p	language:C++	file:
addcMat3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	165;"	d	language:C++
addcVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	135;"	d	language:C++
addDrawable	/home/rpradeep/Desktop/sim/basic.cpp	/^    basicShapesGeode->addDrawable(unitCubeDrawable);$/;"	p	language:C++	file:
addDrawable	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    pyramidGeode->addDrawable(pyramidGeometry);$/;"	p	language:C++	file:
addEntityArrow	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	void addEntityArrow(Ogre::SceneNode* NodeToAttachTo, const float length, const float width, const float hlength, const float hwidth, $/;"	p	language:C++	class:WmrAnimation
addEntityArrow	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::addEntityArrow(Ogre::SceneNode* node_to_attach_to,$/;"	f	language:C++	class:WmrAnimation
addEntityArrow	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	void addEntityArrow(Ogre::SceneNode* NodeToAttachTo, const float length, const float width, const float hlength, const float hwidth, $/;"	p	language:C++	class:WmrAnimation
addEntityArrow	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^void WmrAnimation::addEntityArrow(Ogre::SceneNode* node_to_attach_to,$/;"	f	language:C++	class:WmrAnimation
addEntityArrow	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^		anim.addEntityArrow(anim.get_node(nf+wno), length, .05*length, .25*length, .1*length, 0, 0, &C);$/;"	p	language:C++	file:
addEntityArrow	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^		anim.addEntityArrow(anim.get_node(nf+wno), length, .05*length, .25*length, .1*length, 0, 0, &C);$/;"	p	language:C++	file:
addEntityArrow	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	void addEntityArrow(Ogre::SceneNode* NodeToAttachTo, const float length, const float width, const float hlength, const float hwidth, $/;"	p	language:C++	class:WmrAnimation
addEntityArrow	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    void addEntityArrow(Ogre::SceneNode* NodeToAttachTo, const float length, const float width, const float hlength, const float hwidth,$/;"	p	language:C++	class:WMRSim
addEntityArrow	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^	void addEntityArrow(Ogre::SceneNode* NodeToAttachTo, const float length, const float width, const float hlength, const float hwidth, $/;"	p	language:C++	class:WMRSim
addEntityArrow	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^		anim.addEntityArrow(anim.get_node(nf+wno), length, .05*length, .25*length, .1*length, 0, 0, &C);$/;"	p	language:C++	file:
addEntityArrow	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^void WmrAnimation::addEntityArrow(Ogre::SceneNode* node_to_attach_to, $/;"	f	language:C++	class:WmrAnimation
addEntityArrow	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^void WMRSim::addEntityArrow(Ogre::SceneNode* node_to_attach_to,$/;"	f	language:C++	class:WMRSim
addEntityArrow	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^	void addEntityArrow(Ogre::SceneNode* NodeToAttachTo, const float length, const float width, const float hlength, const float hwidth, $/;"	p	language:C++	class:WMRSim
addEntityBox	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	void addEntityBox(Ogre::SceneNode* node_to_attach_to, const Ogre::Vector3 L, $/;"	p	language:C++	class:WmrAnimation
addEntityBox	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::addEntityBox(Ogre::SceneNode* node_to_attach_to, const Ogre::Vector3 L,$/;"	f	language:C++	class:WmrAnimation
addEntityBox	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	void addEntityBox(Ogre::SceneNode* node_to_attach_to, const Ogre::Vector3 L, $/;"	p	language:C++	class:WmrAnimation
addEntityBox	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^void WmrAnimation::addEntityBox(Ogre::SceneNode* node_to_attach_to, const Ogre::Vector3 L,$/;"	f	language:C++	class:WmrAnimation
addEntityBox	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	void addEntityBox(Ogre::SceneNode* node_to_attach_to, const Ogre::Vector3 L, $/;"	p	language:C++	class:WmrAnimation
addEntityBox	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    void addEntityBox(Ogre::SceneNode* node_to_attach_to, const Ogre::Vector3 L,$/;"	p	language:C++	class:WMRSim
addEntityBox	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^	void addEntityBox(Ogre::SceneNode* node_to_attach_to, const Ogre::Vector3 L, $/;"	p	language:C++	class:WMRSim
addEntityBox	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^void WmrAnimation::addEntityBox(Ogre::SceneNode* node_to_attach_to, const Ogre::Vector3 L, $/;"	f	language:C++	class:WmrAnimation
addEntityBox	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^void WMRSim::addEntityBox(Ogre::SceneNode* node_to_attach_to, const Ogre::Vector3 L,$/;"	f	language:C++	class:WMRSim
addEntityBox	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^	void addEntityBox(Ogre::SceneNode* node_to_attach_to, const Ogre::Vector3 L, $/;"	p	language:C++	class:WMRSim
addEntityGridSurf	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	void addEntityGridSurf( GridSurf* surf );$/;"	p	language:C++	class:WmrAnimation
addEntityGridSurf	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::addEntityGridSurf(GridSurf* surf)$/;"	f	language:C++	class:WmrAnimation
addEntityGridSurf	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	void addEntityGridSurf( GridSurf* surf );$/;"	p	language:C++	class:WmrAnimation
addEntityGridSurf	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^void WmrAnimation::addEntityGridSurf(GridSurf* surf)$/;"	f	language:C++	class:WmrAnimation
addEntityGridSurf	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	void addEntityGridSurf( GridSurf* surf );$/;"	p	language:C++	class:WmrAnimation
addEntityGridSurf	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    void addEntityGridSurf( GridSurf* surf );$/;"	p	language:C++	class:WMRSim
addEntityGridSurf	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^	void addEntityGridSurf( GridSurf* surf );$/;"	p	language:C++	class:WMRSim
addEntityGridSurf	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^void WmrAnimation::addEntityGridSurf(GridSurf* surf) {$/;"	f	language:C++	class:WmrAnimation
addEntityGridSurf	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^void WMRSim::addEntityGridSurf(GridSurf* surf)$/;"	f	language:C++	class:WMRSim
addEntityGridSurf	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^	void addEntityGridSurf( GridSurf* surf );$/;"	p	language:C++	class:WMRSim
addEntitySurface	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	void addEntitySurface( Surface* surf );$/;"	p	language:C++	class:WmrAnimation
addEntitySurface	/home/rpradeep/Desktop/kft/src/main.cpp	/^        anim.addEntitySurface(surfs[i].get());$/;"	p	language:C++	file:
addEntitySurface	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::addEntitySurface(Surface* surf)$/;"	f	language:C++	class:WmrAnimation
addEntitySurface	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^        anim.addEntitySurface(surfs[i].get());$/;"	p	language:C++	file:
addEntitySurface	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	void addEntitySurface( Surface* surf );$/;"	p	language:C++	class:WmrAnimation
addEntitySurface	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^void WmrAnimation::addEntitySurface(Surface* surf)$/;"	f	language:C++	class:WmrAnimation
addEntitySurface	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^        anim.addEntitySurface(surfs[i].get());$/;"	p	language:C++	file:
addEntitySurface	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	void addEntitySurface( Surface* surf );$/;"	p	language:C++	class:WmrAnimation
addEntitySurface	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    void addEntitySurface( Surface* surf );$/;"	p	language:C++	class:WMRSim
addEntitySurface	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^	void addEntitySurface( Surface* surf );$/;"	p	language:C++	class:WMRSim
addEntitySurface	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^void WmrAnimation::addEntitySurface(Surface* surf) {$/;"	f	language:C++	class:WmrAnimation
addEntitySurface	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^void WMRSim::addEntitySurface(Surface* surf)$/;"	f	language:C++	class:WMRSim
addEntitySurface	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^	void addEntitySurface( Surface* surf );$/;"	p	language:C++	class:WMRSim
addEntityTriMeshSurf	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	void addEntityTriMeshSurf( TriMeshSurf* surf );$/;"	p	language:C++	class:WmrAnimation
addEntityTriMeshSurf	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::addEntityTriMeshSurf(TriMeshSurf* surf)$/;"	f	language:C++	class:WmrAnimation
addEntityTriMeshSurf	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	void addEntityTriMeshSurf( TriMeshSurf* surf );$/;"	p	language:C++	class:WmrAnimation
addEntityTriMeshSurf	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^void WmrAnimation::addEntityTriMeshSurf(TriMeshSurf* surf)$/;"	f	language:C++	class:WmrAnimation
addEntityTriMeshSurf	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	void addEntityTriMeshSurf( TriMeshSurf* surf );$/;"	p	language:C++	class:WmrAnimation
addEntityTriMeshSurf	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    void addEntityTriMeshSurf( TriMeshSurf* surf );$/;"	p	language:C++	class:WMRSim
addEntityTriMeshSurf	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^	void addEntityTriMeshSurf( TriMeshSurf* surf );$/;"	p	language:C++	class:WMRSim
addEntityTriMeshSurf	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^void WmrAnimation::addEntityTriMeshSurf(TriMeshSurf* surf) {$/;"	f	language:C++	class:WmrAnimation
addEntityTriMeshSurf	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^void WMRSim::addEntityTriMeshSurf(TriMeshSurf* surf)$/;"	f	language:C++	class:WMRSim
addEntityTriMeshSurf	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^	void addEntityTriMeshSurf( TriMeshSurf* surf );$/;"	p	language:C++	class:WMRSim
addEntityVrml	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	void addEntityVrml(Ogre::SceneNode* node_to_attach_to, const std::string filename, const int flip_dim, const bool draw_faces, const bool draw_edges);$/;"	p	language:C++	class:WmrAnimation
addEntityVrml	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::addEntityVrml(Ogre::SceneNode* node_to_attach_to, const std::string filename, const int flip_dim, const bool draw_faces, const bool draw_edges)$/;"	f	language:C++	class:WmrAnimation
addEntityVrml	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	void addEntityVrml(Ogre::SceneNode* node_to_attach_to, const std::string filename, const int flip_dim, const bool draw_faces, const bool draw_edges);$/;"	p	language:C++	class:WmrAnimation
addEntityVrml	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^void WmrAnimation::addEntityVrml(Ogre::SceneNode* node_to_attach_to, const std::string filename, const int flip_dim, const bool draw_faces, const bool draw_edges)$/;"	f	language:C++	class:WmrAnimation
addEntityVrml	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^		anim.addEntityVrml(anim.get_node(i), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^		anim.addEntityVrml(anim.get_node(i), filename, 1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	anim.addEntityVrml(anim.get_node(i), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	anim.addEntityVrml(anim.get_node(i), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	anim.addEntityVrml(anim.get_node(i), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	anim.addEntityVrml(anim.get_node(i), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	anim.addEntityVrml(anim.get_node(i), filename, 1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	anim.addEntityVrml(anim.get_node(i), filename, 1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	anim.addEntityVrml(anim.get_node(i), filename, 1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^		anim.addEntityVrml(anim.get_node(wheelframeinds[wno]), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^	anim.addEntityVrml(anim.get_node(i), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^	anim.addEntityVrml(anim.get_node(i), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^	anim.addEntityVrml(anim.get_node(i), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	void addEntityVrml(Ogre::SceneNode* node_to_attach_to, const std::string filename, const int flip_dim, const bool draw_faces, const bool draw_edges);$/;"	p	language:C++	class:WmrAnimation
addEntityVrml	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    void addEntityVrml(Ogre::SceneNode* node_to_attach_to, const std::string filename, const int flip_dim, const bool draw_faces, const bool draw_edges);$/;"	p	language:C++	class:WMRSim
addEntityVrml	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^	void addEntityVrml(Ogre::SceneNode* node_to_attach_to, const std::string filename, const int flip_dim, const bool draw_faces, const bool draw_edges);$/;"	p	language:C++	class:WMRSim
addEntityVrml	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^		anim.addEntityVrml(anim.get_node(wheelframeinds[wno]), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	anim.addEntityVrml(anim.get_node(i), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	anim.addEntityVrml(anim.get_node(i), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	anim.addEntityVrml(anim.get_node(i), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
addEntityVrml	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^void WmrAnimation::addEntityVrml(Ogre::SceneNode* node_to_attach_to, const std::string filename, const int flip_dim, const bool draw_faces, const bool draw_edges) {$/;"	f	language:C++	class:WmrAnimation
addEntityVrml	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^void WMRSim::addEntityVrml(Ogre::SceneNode* node_to_attach_to, const std::string filename, const int flip_dim, const bool draw_faces, const bool draw_edges)$/;"	f	language:C++	class:WMRSim
addEntityVrml	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^	void addEntityVrml(Ogre::SceneNode* node_to_attach_to, const std::string filename, const int flip_dim, const bool draw_faces, const bool draw_edges);$/;"	p	language:C++	class:WMRSim
addFrameListener	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    mRoot->addFrameListener(this);$/;"	p	language:C++	file:
addFrameListener	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    mRoot->addFrameListener(this);$/;"	p	language:C++	file:
addFrameListener	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    mRoot->addFrameListener(this);$/;"	p	language:C++	file:
addFrameListener	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    mRoot->addFrameListener(this);$/;"	p	language:C++	file:
addJointFrame	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void addJointFrame(const std::string name, const std::string parent_name, const std::string dof_string, const bool isactuated, const HomogeneousTransform HT_parent_jointdisp0);$/;"	p	language:C++	class:WmrModel
addJointFrame	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^void WmrModel::addJointFrame(const std::string name, const std::string parent_name, const std::string dof_string, const bool isactuated, const HomogeneousTransform HT_parent_jointdisp0) {$/;"	f	language:C++	class:WmrModel
addLine	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	void addLine( const int num_chains );$/;"	p	language:C++	class:WmrAnimation
addLine	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::addLine( const int num_chains )$/;"	f	language:C++	class:WmrAnimation
addLine	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	void addLine( const int num_chains );$/;"	p	language:C++	class:WmrAnimation
addLine	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^void WmrAnimation::addLine( const int num_chains )$/;"	f	language:C++	class:WmrAnimation
addLine	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	anim.addLine(nw); \/\/for contact point paths$/;"	p	language:C++	file:
addLine	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^	anim.addLine(nw); \/\/for contact point paths$/;"	p	language:C++	file:
addLine	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	void addLine( const int num_chains );$/;"	p	language:C++	class:WmrAnimation
addLine	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	anim.addLine(nw); \/\/for contact point paths$/;"	p	language:C++	file:
addLine	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^void WmrAnimation::addLine( const int num_chains ) {$/;"	f	language:C++	class:WmrAnimation
addMat3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	153;"	d	language:C++
addMat6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	107;"	d	language:C++
addmMat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void addmMat(const int nrows, const int ncols, const Type Source[], const Type m, Type Dest[]) {$/;"	f	language:C++
addmMat3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	159;"	d	language:C++
addmMatBlock	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void addmMatBlock(const int nrows_source, const int ri_source, const int ci_source, const int nrows_block, const int ncols_block, const Type Source[], $/;"	f	language:C++
addmMatCol	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void addmMatCol(const int nrows, const int ci_source, const Type Source[], const int ci_dest, const Type m, Type Dest[]) { $/;"	f	language:C++
addmMatRow	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void addmMatRow( const int nrows_source, const int ncols, const int ri_source, const Type Source[], const int nrows_dest, const int ri_dest, const Type m, Type Dest[] ) {$/;"	f	language:C++
addmVec	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void addmVec(const int n, const Type Source[], const Type m, Type Dest[]) { $/;"	f	language:C++
addmVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	128;"	d	language:C++
addNeighbors	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    void addNeighbors ( const STNode& currentNode );$/;"	p	language:C++	class:dad_local_planner::DFTPlanner
addNeighbors	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    void addNeighbors ( const Node &node );$/;"	p	language:C++	class:dad_local_planner::KFTPlanner
addNeighbors	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^void DFTPlanner::addNeighbors ( const STNode& currentNode )$/;"	f	language:C++	class:DFTPlanner
addNeighbors	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^void KFTPlanner::addNeighbors ( const Node& currentNode )$/;"	f	language:C++	class:KFTPlanner
addNode	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	void addNode(const int parent_node_index);$/;"	p	language:C++	class:WmrAnimation
addNode	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::addNode(const int parent_node_index)$/;"	f	language:C++	class:WmrAnimation
addNode	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	void addNode(const int parent_node_index);$/;"	p	language:C++	class:WmrAnimation
addNode	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^void WmrAnimation::addNode(const int parent_node_index)$/;"	f	language:C++	class:WmrAnimation
addNode	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^		anim.addNode(frames[fi].parent_ind);$/;"	p	language:C++	file:
addNode	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^		anim.addNode(wheelframeinds[wno]);$/;"	p	language:C++	file:
addNode	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^		anim.addNode(frames[fi].parent_ind);$/;"	p	language:C++	file:
addNode	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^		anim.addNode(wheelframeinds[wno]);$/;"	p	language:C++	file:
addNode	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	void addNode(const int parent_node_index);$/;"	p	language:C++	class:WmrAnimation
addNode	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    void addNode(const int parent_node_index);$/;"	p	language:C++	class:WMRSim
addNode	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^	void addNode(const int parent_node_index);$/;"	p	language:C++	class:WMRSim
addNode	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^		anim.addNode(frames[fi].parent_ind);$/;"	p	language:C++	file:
addNode	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^		anim.addNode(wheelframeinds[wno]);$/;"	p	language:C++	file:
addNode	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^void WmrAnimation::addNode(const int parent_node_index) {$/;"	f	language:C++	class:WmrAnimation
addNode	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^void WMRSim::addNode(const int parent_node_index)$/;"	f	language:C++	class:WMRSim
addNode	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^	void addNode(const int parent_node_index);$/;"	p	language:C++	class:WMRSim
addPoint	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgrePath.h	/^    void addPoint(const Ogre::Vector3& pt);$/;"	p	language:C++	class:OgrePath
addPoint	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgrePath.cpp	/^void OgrePath::addPoint(const Ogre::Vector3& pt)$/;"	f	language:C++	class:OgrePath
addPoint	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^        mRefPath->addPoint(Ogre::Vector3((*i)[0],(*i)[1],0));$/;"	p	language:C++	file:
addPoint	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgrePath.h	/^    void addPoint(const Ogre::Vector3& pt);$/;"	p	language:C++	class:OgrePath
addPoint	/home/rpradeep/Desktop/wmrde/src/animate/OgrePath.cpp	/^void OgrePath::addPoint(const Ogre::Vector3& pt)$/;"	f	language:C++	class:OgrePath
addPrimitiveSet	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    pyramidGeometry->addPrimitiveSet(pyramidBase);$/;"	p	language:C++	file:
addPrimitiveSet	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    pyramidGeometry->addPrimitiveSet(pyramidFaceFour);$/;"	p	language:C++	file:
addPrimitiveSet	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    pyramidGeometry->addPrimitiveSet(pyramidFaceOne);$/;"	p	language:C++	file:
addPrimitiveSet	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    pyramidGeometry->addPrimitiveSet(pyramidFaceThree);$/;"	p	language:C++	file:
addPrimitiveSet	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    pyramidGeometry->addPrimitiveSet(pyramidFaceTwo);$/;"	p	language:C++	file:
addRenderQueueListener	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    mSceneMgr->addRenderQueueListener(mOverlaySystem);$/;"	p	language:C++	file:
addRenderQueueListener	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    mSceneMgr->addRenderQueueListener(mOverlaySystem);$/;"	p	language:C++	file:
addRenderQueueListener	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^	mSceneMgr->addRenderQueueListener(mOverlaySystem);$/;"	p	language:C++	file:
addRenderQueueListener	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    mSceneMgr->addRenderQueueListener(mOverlaySystem);$/;"	p	language:C++	file:
addRobot	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    void addRobot(const WmrModel& mdl);$/;"	p	language:C++	class:WMRSim
addRobot	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^void WMRSim::addRobot(const WmrModel& mdl)$/;"	f	language:C++	class:WMRSim
addSolution	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^void TrajectoryBuffer::addSolution(const KFTSolution& solution)$/;"	f	language:C++	class:TrajectoryBuffer
addSolution	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^void TrajectoryBuffer::addSolution(const KFTSolution& solution, const bool appendPosition)$/;"	f	language:C++	class:TrajectoryBuffer
addSolution	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^        tb.addSolution(ds1);$/;"	p	language:C++	file:
addSolution	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^        tb.addSolution(ds1);$/;"	p	language:C++	file:
addSprocketFrame	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void addSprocketFrame(const std::string name, const std::string parent_name, const bool isactuated, const HomogeneousTransform HT_parent_jointdisp0, $/;"	p	language:C++	class:WmrModel
addSprocketFrame	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^void WmrModel::addSprocketFrame(const std::string name, const std::string parent_name, const bool isactuated, const HomogeneousTransform HT_parent_jointdisp0, $/;"	f	language:C++	class:WmrModel
addVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	121;"	d	language:C++
addVec6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	100;"	d	language:C++
addWheelFrame	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void addWheelFrame(const std::string name, const std::string parent_name, const bool isactuated, const HomogeneousTransform HT_parent_jointdisp0, $/;"	p	language:C++	class:WmrModel
addWheelFrame	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^void WmrModel::addWheelFrame(const std::string name, const std::string parent_name, const bool isactuated, const HomogeneousTransform HT_parent_jointdisp0, $/;"	f	language:C++	class:WmrModel
addWindowEventListener	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    Ogre::WindowEventUtilities::addWindowEventListener(mWindow, this);$/;"	p	language:C++	class:Ogre::WindowEventUtilities	file:
addWindowEventListener	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    Ogre::WindowEventUtilities::addWindowEventListener(mWindow, this);$/;"	p	language:C++	class:Ogre::WindowEventUtilities	file:
addWindowEventListener	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    Ogre::WindowEventUtilities::addWindowEventListener(mWindow, this);$/;"	p	language:C++	class:Ogre::WindowEventUtilities	file:
addWindowEventListener	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    Ogre::WindowEventUtilities::addWindowEventListener(mWindow, this);$/;"	p	language:C++	class:Ogre::WindowEventUtilities	file:
add_quad	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	void add_quad(const int i0, const int i1, const int i2, const int i3);$/;"	p	language:C++	class:TriMeshSurf
add_triangle	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	void add_triangle(const int i0, const int i1, const int i2); $/;"	p	language:C++	class:TriMeshSurf
add_vertex	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	void add_vertex(const Vec3 V);$/;"	p	language:C++	class:TriMeshSurf
add_vertex	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^			surf_ptr->add_vertex(v);$/;"	p	language:C++	file:
add_vertex	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^			surf_ptr->add_vertex(v);$/;"	p	language:C++	file:
advanceByDistance	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    std::list<KFTSolutionElement>::iterator advanceByDistance(std::list<KFTSolutionElement>::iterator iterator,const double distance);$/;"	p	language:C++	class:TrajectoryQueue
advanceByDistance	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^std::list<KFTSolutionElement>::iterator TrajectoryQueue::advanceByDistance(std::list<KFTSolutionElement>::iterator iterator,const double distance)$/;"	f	language:C++	class:TrajectoryQueue
advanceByDuration	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    std::list<KFTSolutionElement>::iterator advanceByDuration(std::list<KFTSolutionElement>::iterator iterator,const double duration);$/;"	p	language:C++	class:TrajectoryQueue
advanceByDuration	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^std::list<KFTSolutionElement>::iterator TrajectoryQueue::advanceByDuration(std::list<KFTSolutionElement>::iterator iterator,const double duration)$/;"	f	language:C++	class:TrajectoryQueue
advanceByStage	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    std::list<KFTSolutionElement>::iterator advanceByStage(std::list<KFTSolutionElement>::iterator iterator,const int numOfStages);$/;"	p	language:C++	class:TrajectoryQueue
advanceByStage	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^std::list<KFTSolutionElement>::iterator TrajectoryQueue::advanceByStage(std::list<KFTSolutionElement>::iterator iterator,const int numOfStages)$/;"	f	language:C++	class:TrajectoryQueue
advanceIterators	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    void advanceIterators(const double removeBeforeThisTime);$/;"	p	language:C++	class:TrajectoryQueue
advanceIterators	/home/rpradeep/Desktop/kft/src/main.cpp	/^        tq.advanceIterators(time);$/;"	p	language:C++	file:
advanceIterators	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^void TrajectoryQueue::advanceIterators(const double removeBeforeThisTime)$/;"	f	language:C++	class:TrajectoryQueue
Afree	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real Afree[MAXNC * MAXNV]; \/\/ nc x (nv-na)$/;"	l	language:C++
all	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^	Real all[MAXNC * MAXNV];$/;"	m	language:C++	class:ConstraintJacobian
alpha	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^			Real alpha;$/;"	l	language:C++
alpha	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		Real alpha;$/;"	l	language:C++
amendWithReplannedDynamicTrajectory	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    void amendWithReplannedDynamicTrajectory(const KFTSolution& solution);$/;"	p	language:C++	class:TrajectoryQueue
amendWithReplannedDynamicTrajectory	/home/rpradeep/Desktop/kft/src/main.cpp	/^                tq.amendWithReplannedDynamicTrajectory(replanned);$/;"	p	language:C++	file:
amendWithReplannedKinematicTrajectory	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    void amendWithReplannedKinematicTrajectory(const KFTSolution& solution);$/;"	p	language:C++	class:TrajectoryQueue
amendWithReplannedKinematicTrajectory	/home/rpradeep/Desktop/kft/src/main.cpp	/^            tq.amendWithReplannedKinematicTrajectory(replanned);$/;"	p	language:C++	file:
amendWithReplannedKinematicTrajectory	/home/rpradeep/Desktop/kft/src/main.cpp	/^    tq.amendWithReplannedKinematicTrajectory(ks2);$/;"	p	language:C++	file:
amendWithReplannedKinematicTrajectory	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^void TrajectoryQueue::amendWithReplannedKinematicTrajectory(const KFTSolution& solution)$/;"	f	language:C++	class:TrajectoryQueue
aMinus	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    const double aMinus = config_.accMaxBack;$/;"	l	language:C++
ang	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    float ang = atan((hwidth\/2)\/hlength);$/;"	l	language:C++
ang	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    float ang = atan((hwidth\/2)\/hlength);$/;"	l	language:C++
ang	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int ang = 0;$/;"	l	language:C++
ang	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	float ang = atan((hwidth\/2)\/hlength);$/;"	l	language:C++
ang	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    float ang = atan((hwidth\/2)\/hlength);$/;"	l	language:C++
angle	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^    double angle;$/;"	m	language:C++	class:KFTSolutionElement
angle	/home/rpradeep/Desktop/kft/src/planner/Node.cpp	/^        double angle = parentNode.th + mp.th[k];$/;"	l	language:C++
angle	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                        float angle = acos(N1[0]*N2[0] + N1[1]*N2[1] + N1[2]*N2[2]);$/;"	l	language:C++
angle	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	Real angle; \/\/contact angle$/;"	m	language:C++	class:WheelContactGeom
angle	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                        float angle = acos(N1[0]*N2[0] + N1[1]*N2[1] + N1[2]*N2[2]);$/;"	l	language:C++
angle	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^						float angle = acos(N1[0]*N2[0] + N1[1]*N2[1] + N1[2]*N2[2]);$/;"	l	language:C++
angle	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                        float angle = acos(N1[0]*N2[0] + N1[1]*N2[1] + N1[2]*N2[2]);$/;"	l	language:C++
angleDiff	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    double angleDiff = std::abs ( goalNode_.th - node.th );$/;"	l	language:C++
angularConvergenceThreshold	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double angularConvergenceThreshold;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
angularConvergenceThreshold	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double angularConvergenceThreshold;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
anim	/home/rpradeep/Desktop/kft/src/main.cpp	/^WmrAnimation anim;$/;"	v	language:C++
anim	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^extern WmrAnimation anim;$/;"	x	language:C++
anim	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^WmrAnimation anim;$/;"	v	language:C++
anim	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^extern WmrAnimation anim;$/;"	x	language:C++
anim	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^WmrAnimation anim;$/;"	v	language:C++
anim	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	WmrAnimation anim;$/;"	l	language:C++
aniso	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^        unsigned int aniso;$/;"	l	language:C++
aniso	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^        unsigned int aniso;$/;"	l	language:C++
aniso	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^        unsigned int aniso;$/;"	l	language:C++
aniso	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^        unsigned int aniso;$/;"	l	language:C++
aPlus	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    const double aPlus = config_.accMaxFwd;\/\/1.0;$/;"	l	language:C++
app	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^    TutorialApplication app;$/;"	l	language:C++
app	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^    WMRSim app;$/;"	l	language:C++
append	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitive.cpp	/^void MotionPrimitive::append ( const double nx, const double ny, const double nth, const double ns, const double nk )$/;"	f	language:C++	class:MotionPrimitive
append	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^            mp.append ( x, y, th, s, k );$/;"	p	language:C++	file:
appendTrajectory	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    void appendTrajectory(const KFTSolution& solution);$/;"	p	language:C++	class:TrajectoryQueue
appendTrajectory	/home/rpradeep/Desktop/kft/src/main.cpp	/^    tq.appendTrajectory(ds1);$/;"	p	language:C++	file:
appendTrajectory	/home/rpradeep/Desktop/kft/src/main.cpp	/^    tq.appendTrajectory(ds1);$/;"	p	language:C++	file:
applyHT	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	131;"	d	language:C++
applyInvHT	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^inline void applyInvHT(const HomogeneousTransform T, const Vec3 p, Vec3 q) {$/;"	f	language:C++
archName	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    Ogre::String secName, typeName, archName;$/;"	l	language:C++
archName	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    Ogre::String secName, typeName, archName;$/;"	l	language:C++
archName	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    Ogre::String secName, typeName, archName;$/;"	l	language:C++
archName	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    Ogre::String secName, typeName, archName;$/;"	l	language:C++
assign	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    refSpeed.assign ( refPath.size(), config_.velMaxFwd  );$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgreDynamicObstacles.cpp	/^        node->attachObject(entity);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    mGoalNode->attachObject(mEntity);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    node_to_attach_to->attachObject(manual);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    node_to_attach_to->attachObject(manual);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    node_to_attach_to->attachObject(manual);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    node_to_attach_to->attachObject(manual);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    node_to_attach_to->attachObject(manual);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    node_to_attach_to->attachObject(manual);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^mGoalNode->attachObject(mEntity);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^floorNode->attachObject(manual);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^floorNode->attachObject(manual);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	node_to_attach_to->attachObject(manual);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	node_to_attach_to->attachObject(manual);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	node_to_attach_to->attachObject(manual);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    node_to_attach_to->attachObject(manual);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    node_to_attach_to->attachObject(manual);$/;"	p	language:C++	file:
attachObject	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    node_to_attach_to->attachObject(manual);$/;"	p	language:C++	file:
avgDistFromPath	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    double avgDistFromPath = 0;$/;"	l	language:C++
avp	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Vec6b avp[WmrModel::MAXNF]; \/\/accleration (includes Coriolis, centripetal, and gravity terms)$/;"	l	language:C++
ax	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^					const Real* ax = HT_world[fi] + (dof_type-3)*SIZEVEC3; \/\/translation axis$/;"	l	language:C++
ax	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^					const Real* ax = HT_world[fi] + (dof_type-3)*SIZEVEC3;$/;"	l	language:C++
ax	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^					const Real* ax = HT_world[fi] + dof_type*SIZEVEC3; \/\/rotation axis$/;"	l	language:C++
ax	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^					const Real* ax = HT_world[fi] + dof_type*SIZEVEC3; \/\/rotation axis$/;"	l	language:C++
ax	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^				const Real* ax = HT_world[0] + ci*SIZEVEC3; \/\/axis$/;"	l	language:C++
ax	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^				const Real* ax = HT_world[0] + ci*SIZEVEC3; \/\/axis$/;"	l	language:C++
A_	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^				Real* A_ = A + S2I(row,vi,nc);$/;"	l	language:C++
A_	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^				Real* A_ = A + S2I(row,vi,nc);$/;"	l	language:C++
a_grav	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		Vec6b a_grav;$/;"	l	language:C++
a_grav	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Vec6b a_grav;$/;"	l	language:C++
b	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    std::vector<double> b;$/;"	l	language:C++
B	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const Real B = 1.64; \/\/axle width$/;"	l	language:C++
B	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real L,B,rad; \/\/dimensions$/;"	l	language:C++
B	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const Real B = 1.64; \/\/axle width$/;"	l	language:C++
B	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real L,B,rad; \/\/dimensions$/;"	l	language:C++
b	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real b[MAXNC];$/;"	l	language:C++
B	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const Real B = 1.64; \/\/axle width$/;"	l	language:C++
B	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real L,B,rad; \/\/dimensions$/;"	l	language:C++
BaseApplication	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^BaseApplication::BaseApplication(void)$/;"	f	language:C++	class:BaseApplication
BaseApplication	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    BaseApplication(void);$/;"	p	language:C++	class:BaseApplication
BaseApplication	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^class BaseApplication : public Ogre::FrameListener, public Ogre::WindowEventListener, public OIS::KeyListener, public OIS::MouseListener, OgreBites::SdkTrayListener$/;"	c	language:C++
BaseApplication	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^BaseApplication::BaseApplication(void)$/;"	f	language:C++	class:BaseApplication
BaseApplication	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^BaseApplication::BaseApplication(void)$/;"	f	language:C++	class:BaseApplication
BaseApplication	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^BaseApplication::BaseApplication(void)$/;"	f	language:C++	class:BaseApplication
baseReturnValue	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    bool baseReturnValue = BaseApplication::keyPressed(arg);$/;"	l	language:C++
baseReturnValue	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    bool baseReturnValue = BaseApplication::keyPressed(arg);$/;"	l	language:C++
baseRetVal	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^    bool baseRetVal = BaseApplication::keyPressed(arg);$/;"	l	language:C++
baseRetVal	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^    bool baseRetVal = BaseApplication::keyReleased(arg);$/;"	l	language:C++
baseRetVal	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^    bool baseRetVal = BaseApplication::keyPressed(arg);$/;"	l	language:C++
baseRetVal	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^    bool baseRetVal = BaseApplication::keyReleased(arg);$/;"	l	language:C++
baseRetVal	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    bool baseRetVal = BaseApplication::keyPressed(arg);$/;"	l	language:C++
baseRetVal	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    bool baseRetVal = BaseApplication::keyReleased(arg);$/;"	l	language:C++
basicShapesGeode	/home/rpradeep/Desktop/sim/basic.cpp	/^    osg::Geode* basicShapesGeode = new osg::Geode();$/;"	l	language:C++
Bclose	/home/rpradeep/.vimrc	/^command! Bclose call <SID>BufcloseCloseIt()$/;"	c	language:Vim
bestCostSoFar_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    double bestCostSoFar_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
bilinearInterp	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	/^inline Real bilinearInterp( const Real f[4], const Real xn[2]) {$/;"	f	language:C++
bilinearInterp_f	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	/^inline void bilinearInterp_f(const Real* F, const int I[2], const int n[1], Real f[4]) {$/;"	f	language:C++
bilinearInterp_xn	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	/^inline void bilinearInterp_xn( const Real lim[], const Real d[], const Real x[], int I[], Real xn[] ) {$/;"	f	language:C++
binTH	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    int binTH = boost::get<2> ( ind );$/;"	l	language:C++
binTH	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    PoseSpaceIndexType binTH = ( th \/ ( MAX_TH-MIN_TH ) ) * SIZE_TH + MID_TH;$/;"	l	language:C++
binX	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    int binX = boost::get<0> ( ind );$/;"	l	language:C++
binX	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    PoseSpaceIndexType binX = ( offsetX \/ ( MAX_X-MIN_X ) ) * SIZE_X + MID_X;$/;"	l	language:C++
binY	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    int binY = boost::get<1> ( ind );$/;"	l	language:C++
binY	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    PoseSpaceIndexType binY = ( offsetY \/ ( MAX_Y-MIN_Y ) ) * SIZE_Y + MID_Y;$/;"	l	language:C++
BLOCK0	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	39;"	d	language:C++
BLOCK1	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	40;"	d	language:C++
BLOCK2	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	41;"	d	language:C++
BLOCK3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	42;"	d	language:C++
body	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	dBodyID body[MAXNB];$/;"	m	language:C++	class:WmrModelODE
boxPat	/home/rpradeep/Desktop/sim/basic.cpp	/^    osg::PositionAttitudeTransform* boxPat =$/;"	l	language:C++
branchingFactor	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    const int branchingFactor = 3;$/;"	l	language:C++
BufcloseCloseIt	/home/rpradeep/.vimrc	/^function! <SID>BufcloseCloseIt()$/;"	f	language:Vim
buffer	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	static const int buffer = 201*201; \/\/size of Zdata$/;"	m	language:C++	class:GridSurf
buttonMask	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^    unsigned int buttonMask = _ga_t1->getButtonMask();$/;"	l	language:C++
B_ptr	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^	const Type* B_ptr; \/\/necessary to vectorize$/;"	l	language:C++
c	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	Real c = a;$/;"	l	language:C++
c	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	Real c,fc;$/;"	l	language:C++
c	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		Real c[WmrModel::MAXNJC]; \/\/dummy$/;"	l	language:C++
C	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real C[MAXNV];$/;"	l	language:C++
c	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		Real c[WmrModel::MAXNJC];$/;"	l	language:C++
ca	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    float ca = cos(ang);$/;"	l	language:C++
ca	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    float ca = cos(ang);$/;"	l	language:C++
ca	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	float ca = cos(ang);$/;"	l	language:C++
ca	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    float ca = cos(ang);$/;"	l	language:C++
CADdir	/home/rpradeep/Desktop/kft/include/wmrde/options.h	/^inline std::string CADdir() {$/;"	f	language:C++
CADdir	/home/rpradeep/Desktop/wmrde/include/wmrde/options.h	/^inline std::string CADdir() {$/;"	f	language:C++
CADdir	/home/rpradeep/Desktop/wmrsim/include/wmrde/options.h	/^inline std::string CADdir() {$/;"	f	language:C++
calcGradients	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	void calcGradients();$/;"	p	language:C++	class:GridSurf
calcSlip	/home/rpradeep/Desktop/wmrde/include/wmrde/wheelgroundcontact.h	/^void calcSlip( const Real vx, const Real vy, const Real Rw, const int method, \/\/inputs$/;"	p	language:C++
camRotation	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^   osg::Quat camRotation = matrix.getRotate();$/;"	l	language:C++
canNodeBeSkipped	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    bool canNodeBeSkipped ( const Node &currentNode ) const;$/;"	p	language:C++	class:dad_local_planner::KFTPlanner
canNodeBeSkipped	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^bool KFTPlanner::canNodeBeSkipped ( const Node& currentNode ) const$/;"	f	language:C++	class:KFTPlanner
capture	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    mMouse->capture();$/;"	p	language:C++	file:
carryOn	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    bool carryOn = configure();$/;"	l	language:C++
carryOn	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    bool carryOn = configure();$/;"	l	language:C++
carryOn	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    bool carryOn = configure();$/;"	l	language:C++
carryOn	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    bool carryOn = configure();$/;"	l	language:C++
cd	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^		Real cd = jr[rollfront_ji] + jr[rollrear_ji];$/;"	l	language:C++
cd	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^		Real cd = jr[D1_ji] + jr[D2_ji];$/;"	l	language:C++
cd	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^		Real cd = jr[rollfront_ji] + jr[rollrear_ji];$/;"	l	language:C++
cd	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^		Real cd = jr[rollfront_ji] + jr[rollrear_ji];$/;"	l	language:C++
center_of_mass	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	Vec3 center_of_mass = {0,0,0};$/;"	l	language:C++
cf	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    Ogre::ConfigFile cf;$/;"	l	language:C++
cf	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    Ogre::ConfigFile cf;$/;"	l	language:C++
cf	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    Ogre::ConfigFile cf;$/;"	l	language:C++
cf	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    Ogre::ConfigFile cf;$/;"	l	language:C++
cfm	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real erp,cfm;$/;"	l	language:C++
cfm	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real erp,cfm;$/;"	l	language:C++
cfm	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real erp,cfm;$/;"	l	language:C++
cfm	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real erp,cfm;$/;"	l	language:C++
cfm_j	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real cfm_j[MAXNJC];		\/\/constraint force mixing$/;"	m	language:C++	class:WmrModel
cfm_z	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real cfm_z[MAXNW];		\/\/constraint force mixing, z dir (>0)$/;"	m	language:C++	class:WmrModel
checkGoal	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    bool checkGoal ( const STNode &node ) const;$/;"	p	language:C++	class:dad_local_planner::DFTPlanner
checkGoal	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    bool checkGoal ( const Node &node ) const;$/;"	p	language:C++	class:dad_local_planner::KFTPlanner
checkGoal	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^bool DFTPlanner::checkGoal ( const STNode& node ) const$/;"	f	language:C++	class:DFTPlanner
checkGoal	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^bool KFTPlanner::checkGoal ( const Node& node ) const$/;"	f	language:C++	class:KFTPlanner
check_writable	/etc/grub.d/00_header	/^  check_writable () {$/;"	f	language:Sh
childNode	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        STNode childNode;$/;"	l	language:C++
childNode	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        Node childNode;$/;"	l	language:C++
chol	/home/rpradeep/Desktop/wmrde/include/wmrde/eigensolve.h	/^inline bool chol( const int n, Real* A, Real* L) {$/;"	f	language:C++
cholSolve	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^void cholSolve(const int n, const Real L[], const Real b[], Real x[]);$/;"	p	language:C++
cholSolveMat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^void cholSolveMat(const int n, const Real L[], const int ncols, const Real B[], Real X[]);$/;"	p	language:C++
chooseSceneManager	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^void BaseApplication::chooseSceneManager(void)$/;"	f	language:C++	class:BaseApplication
chooseSceneManager	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual void chooseSceneManager(void);$/;"	p	language:C++	class:BaseApplication
chooseSceneManager	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^void BaseApplication::chooseSceneManager(void)$/;"	f	language:C++	class:BaseApplication
chooseSceneManager	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^void BaseApplication::chooseSceneManager(void)$/;"	f	language:C++	class:BaseApplication
chooseSceneManager	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^void BaseApplication::chooseSceneManager(void)$/;"	f	language:C++	class:BaseApplication
clear	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^        elements.clear();$/;"	p	language:C++
clear	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^    inline void clear()$/;"	f	language:C++	class:KFTSolution
clear	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgrePath.h	/^    void clear();$/;"	p	language:C++	class:OgrePath
clear	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    inputPathPosition_.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    inputPositionVector_.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    inputSolutionVector_.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    inputTime_.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    nodes_.clear(); \/\/ Clear the node list from previous run$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    pathPosition.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    positionVector.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    solution_.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    stage.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    time.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    nodes_.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    solutionNodeList_.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    solution_.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^    mpIndexSet.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    interpolatedPosition_.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    position_.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    time_.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    output.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    mQueue.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^    cumulativeDistances_.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^    segmentDistancesSq_.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^    segmentDistances_.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    output.clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgrePath.cpp	/^void OgrePath::clear()$/;"	f	language:C++	class:OgrePath
clear	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^        mPath->clear();$/;"	p	language:C++	file:
clear	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^        mRefPath->clear();$/;"	p	language:C++	file:
close	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^        ofile.close();$/;"	p	language:C++
close	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    f.close();$/;"	p	language:C++	file:
close	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    dumpFile.close();$/;"	p	language:C++	file:
close	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^			file.close();$/;"	p	language:C++
closestWayPoint	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^    std::list<KFTSolutionElement>::iterator closestWayPoint= getClosestWayPoint();$/;"	l	language:C++
cm	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Vec3 cm;			\/\/center of mass$/;"	m	language:C++	class:Frame
cmb	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Vec3 cmb = {0,0,Hb\/2}; \/\/body center of mass (in body coords)$/;"	l	language:C++
cmb	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Vec3 cmb = {18.0\/100,0,15.5\/100}; \/\/body center of mass (in body coords)$/;"	l	language:C++
cmb	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Vec3 cmb = {0,0,Hb\/2}; \/\/body center of mass (in body coords)$/;"	l	language:C++
cmb	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Vec3 cmb = {0,0,Hb\/2}; \/\/body center of mass (in body coords)$/;"	l	language:C++
cmd	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^	Real cmd[WmrModel::MAXNA]; \/\/commanded$/;"	m	language:C++	class:ControllerIO
CmdLine	/home/rpradeep/.vimrc	/^function! CmdLine(str)$/;"	f	language:Vim
cmw	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Vec3 cmw = {0,0,0}; \/\/wheel center of mass$/;"	l	language:C++
cmw	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Vec3 cmw = {0,0,0}; \/\/wheel center of mass$/;"	l	language:C++
cmw	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Vec3 cmw = {0,0,0}; \/\/wheel center of mass$/;"	l	language:C++
cmw	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Vec3 cmw = {0,0,0}; \/\/wheel center of mass$/;"	l	language:C++
COL0	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	43;"	d	language:C++
COL1	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	44;"	d	language:C++
COL2	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	45;"	d	language:C++
COL3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	25;"	d	language:C++
collisionOccurred	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^    const bool collisionOccurred = performCollisionCheck ( cost,trajectory );$/;"	l	language:C++
color	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                float color[3]; \/\/rgb$/;"	l	language:C++
color	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	std::vector<T> color[MAX_NUM_PARTS];$/;"	m	language:C++	class:VrmlData
color	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                float color[3]; \/\/rgb$/;"	l	language:C++
color	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^				float color[3]; \/\/rgb$/;"	l	language:C++
color	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                float color[3]; \/\/rgb$/;"	l	language:C++
colors	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    osg::Vec4Array* colors = new osg::Vec4Array;$/;"	l	language:C++
color_idx	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	std::vector<int> color_idx[MAX_NUM_PARTS];$/;"	m	language:C++	class:VrmlData
colour	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                    manual->colour(color[0],color[1],color[2]);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                manual->colour(C);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                manual->colour(C);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            manual->colour(C);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                    manual->colour(color[0],color[1],color[2]);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                manual->colour(C);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                manual->colour(C);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            manual->colour(C);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^					manual->colour(color[0],color[1],color[2]);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^				manual->colour(C);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^				manual->colour(C);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			manual->colour(C);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                    manual->colour(color[0],color[1],color[2]);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                manual->colour(C);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                manual->colour(C);$/;"	p	language:C++	file:
colour	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            manual->colour(C);$/;"	p	language:C++	file:
ColourValue	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^        textArea->setColour(Ogre::ColourValue(R,G,B,I));$/;"	p	language:C++
ColourValue	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^        textArea->setColour(Ogre::ColourValue(R,G,B,I));$/;"	p	language:C++
comparePosition	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^inline bool comparePosition(const KFTSolutionElement& lhs, const KFTSolutionElement& rhs)$/;"	f	language:C++
compareTime	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^inline bool compareTime(const KFTSolutionElement& lhs, const KFTSolutionElement& rhs)$/;"	f	language:C++
composeHT	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^inline void composeHT(const HomogeneousTransform A, const HomogeneousTransform B, HomogeneousTransform C) {$/;"	f	language:C++
composeInvHT	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	119;"	d	language:C++
computeDistanceAndCost	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^    inline void computeDistanceAndCost ( double& cost, double& distance, const Eigen::Vector2d& robotPosition,  const Eigen::Vector2d& obstaclePosition,const double obstacleRadius, const double obstacleSigma ) const;$/;"	p	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
computeDistanceAndCost	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^void DynamicObstacleCostEvaluator::computeDistanceAndCost ( double& cost, double& distance, const Eigen::Vector2d& robotPosition,  const Eigen::Vector2d& obstaclePosition,const double obstacleRadius, const double obstacleSigma ) const$/;"	f	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
cond1	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	bool cond1,cond2,cond3,cond4,cond5;$/;"	l	language:C++
cond2	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	bool cond1,cond2,cond3,cond4,cond5;$/;"	l	language:C++
cond3	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	bool cond1,cond2,cond3,cond4,cond5;$/;"	l	language:C++
cond4	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	bool cond1,cond2,cond3,cond4,cond5;$/;"	l	language:C++
cond5	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	bool cond1,cond2,cond3,cond4,cond5;$/;"	l	language:C++
config	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^        DADPlannerConfig config;$/;"	l	language:C++
config	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^        DADPlannerConfig config;$/;"	l	language:C++
config	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgreDynamicObstacles.cpp	/^    DADPlannerConfig config = DADPlannerConfig::loadFromFile();$/;"	l	language:C++
configure	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^bool BaseApplication::configure(void)$/;"	f	language:C++	class:BaseApplication
configure	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual bool configure(void);$/;"	p	language:C++	class:BaseApplication
configure	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^bool BaseApplication::configure(void)$/;"	f	language:C++	class:BaseApplication
configure	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^bool BaseApplication::configure(void)$/;"	f	language:C++	class:BaseApplication
configure	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^bool BaseApplication::configure(void)$/;"	f	language:C++	class:BaseApplication
config_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    DADPlannerConfig config_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
config_	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^    DADPlannerConfig config_;$/;"	m	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
config_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    DADPlannerConfig config_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
ConstraintJacobian	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^class ConstraintJacobian {$/;"	c	language:C++
constraintJacobians	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^void constraintJacobians(const WmrModel& mdl, const Real state0[], const Real qvel0[], const HomogeneousTransform HT_world[], const ContactGeom* contacts, \/\/input$/;"	p	language:C++
constraintJacobians	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^void constraintJacobians(const WmrModel& mdl, const Real state0[], const Real qvel0[], const HomogeneousTransform HT_world[], const ContactGeom* contacts, \/\/input$/;"	f	language:C++
contact	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^	Real contact[3*MAXNP * MAXNV];$/;"	m	language:C++	class:ConstraintJacobian
contact	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	dContact contact;$/;"	m	language:C++	class:WmrModelODE
contactAngleToPoint	/home/rpradeep/Desktop/wmrde/include/wmrde/collision.h	/^inline void contactAngleToPoint(const Real radius, const Real angle, Vec3 point_wheel) {$/;"	f	language:C++
contactAngleToPoint	/home/rpradeep/Desktop/wmrsim/include/wmrde/collision.h	/^inline void contactAngleToPoint(const Real radius, const Real angle, Vec3 point_wheel) {$/;"	f	language:C++
ContactGeom	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^class ContactGeom {$/;"	c	language:C++
contactgroup	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	dJointGroupID contactgroup;$/;"	m	language:C++	class:WmrModelODE
contacts	/home/rpradeep/Desktop/kft/src/main.cpp	/^    ContactGeom* contacts =0; \/\/base class$/;"	l	language:C++
contacts	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    ContactGeom* contacts =0; \/\/base class$/;"	l	language:C++
contacts	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    ContactGeom* contacts =0; \/\/base class$/;"	l	language:C++
contacts	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	ContactGeom* contacts =0; \/\/base class$/;"	l	language:C++
contacts	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	ContactGeom* contacts =0; \/\/base class$/;"	l	language:C++
contact_dwgcin	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		Real contact_dwgcin[MAXNP][3*5];$/;"	m	language:C++	struct:dModelForce	file:
contact_i0	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int contact_i0 = 0;$/;"	l	language:C++
contact_i0	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int contact_i0 = 0;$/;"	l	language:C++
contact_i0	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int contact_i0 = 0; \/\/contact constraint$/;"	l	language:C++
controller	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^		mdl.controller(mdl, 0.0, state, u, qvel);$/;"	p	language:C++	file:
controller	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void (*controller) (const WmrModel& mdl, const Real time, const Real state[], \/\/inputs$/;"	m	language:C++	class:WmrModel
controller	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^		mdl.controller(mdl, 0.0, state, u, qvel);$/;"	p	language:C++	file:
controller	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^		mdl.controller(mdl, 0.0, state, u, qvel);$/;"	p	language:C++	file:
controller	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	mdl.controller(mdl, time, y, u.cmd, 0);$/;"	p	language:C++	file:
controller	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	mdl.controller( mdl, time, y, u, 0);$/;"	p	language:C++	file:
controller	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^		mdl.controller(mdl, 0.0, state, u, qvel);$/;"	p	language:C++	file:
ControllerIO	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^class ControllerIO {$/;"	c	language:C++
convertDofTypeString	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	static int convertDofTypeString(std::string dof_string); \/\/converts string specifying joint type (revolute\/prismatic) and axis (x,y,z) to integer$/;"	p	language:C++	class:Frame
convertDofTypeString	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^int Frame::convertDofTypeString(std::string dof_string) {$/;"	f	language:C++	class:Frame
coord	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	std::vector<T> coord[MAX_NUM_PARTS];$/;"	m	language:C++	class:VrmlData
coord_idx	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	std::vector<int> coord_idx[MAX_NUM_PARTS];$/;"	m	language:C++	class:VrmlData
copy	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    SimInterface& operator=(SimInterface const& copy) = delete; \/\/ Not Implemented$/;"	m	language:C++	class:SimInterface
copy	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    SimInterface(SimInterface const& copy) = delete;            \/\/ Not Implemented$/;"	m	language:C++	class:SimInterface
copy	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    SimInterface& operator=(SimInterface const& copy) = delete; \/\/ Not Implemented$/;"	m	language:C++	class:SimInterface
copy	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    SimInterface(SimInterface const& copy) = delete;            \/\/ Not Implemented$/;"	m	language:C++	class:SimInterface
copyArrayToVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	/^inline void copyArrayToVec3(const Real* Source, const int n, Vec3 Dest[]) {$/;"	f	language:C++
copyArrayToVec6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^inline void copyArrayToVec6b(const Real* Source, Vec6b Dest) {$/;"	f	language:C++
copyEuler	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^inline void copyEuler(const VecEuler Source, VecEuler Dest) {$/;"	f	language:C++
copyHT	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	46;"	d	language:C++
copyMat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void copyMat(const int nrows, const int ncols, const Type Source[], Type Dest[]) {$/;"	f	language:C++
copyMat3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	85;"	d	language:C++
copyMat6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	76;"	d	language:C++
copyMat6bColToArray	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^inline void copyMat6bColToArray(const int ci, const Mat6b M, Real* Dest) {$/;"	f	language:C++
copyMat6bColToVec6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^inline void copyMat6bColToVec6b(const int ci, const Mat6b M, Vec6b Dest) {$/;"	f	language:C++
copyMat6bToArray	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^inline void copyMat6bToArray(const Mat6b Source, Real* Dest) {$/;"	f	language:C++
copyMatBlock	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void copyMatBlock(const int nrows_source, const int ri_source, const int ci_source, const int nrows_block, const int ncols_block, const Type Source[], $/;"	f	language:C++
copyMatCol	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void copyMatCol(const int nrows, const int ci_source, const Type Source[], const int ci_dest, Type Dest[]) { $/;"	f	language:C++
copyMatRow	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void copyMatRow( const int nrows_source, const int ncols, const int ri_source, const Type Source[], const int nrows_dest, const int ri_dest, Type Dest[] ) {$/;"	f	language:C++
copyOrient	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	210;"	d	language:C++
copyOrient	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	219;"	d	language:C++
copyQuat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^inline void copyQuat( const VecQuat Source, VecQuat Dest) {$/;"	f	language:C++
copyRowToVec	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void copyRowToVec( const int nrows, const int ncols, const int ri, const Type Source[], Type Dest[] ) {$/;"	f	language:C++
copyRowToVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	99;"	d	language:C++
copyTMat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void copyTMat(const int nrows, const int ncols, const Type Source[], Type Dest[]) {$/;"	f	language:C++
copyTMat3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	93;"	d	language:C++
copyTMat6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	84;"	d	language:C++
copyVec	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void copyVec(const int n, const Type Source[], Type Dest[]) { $/;"	f	language:C++
copyVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	79;"	d	language:C++
copyVec3ToArray	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	/^inline void copyVec3ToArray(const int n, const Vec3 Source[], Real* Dest) {$/;"	f	language:C++
copyVec3ToRow	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	106;"	d	language:C++
copyVec6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	62;"	d	language:C++
copyVec6bToArray	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^inline void copyVec6bToArray(const Vec6b Source, Real* Dest) {$/;"	f	language:C++
copyVecToRow	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void copyVecToRow( const Type Source[], const int nrows, const int ncols, const int ri, Type Dest[] ) {$/;"	f	language:C++
copy_if	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    std::copy_if(trajectoryVector_.begin(), trajectoryVector_.end(), std::back_inserter(output), [timeOffset,endTime](const KFTSolutionElement& se)-> bool {return (se.time <= endTime && se.time >= timeOffset);});$/;"	p	language:C++	class:std	file:
copy_if	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    std::copy_if(trajectoryVector_.begin(), trajectoryVector_.end(), std::back_inserter(output), [timeOffset,endTime](const KFTSolutionElement& se)-> bool {return (se.time <= endTime && se.time >= timeOffset);});$/;"	p	language:C++	class:std	file:
cost	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^    double cost = 0;$/;"	l	language:C++
cost	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real cost;$/;"	l	language:C++
cost	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real cost;$/;"	l	language:C++
costAcc	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        double costAcc = 0;$/;"	l	language:C++
cost_prev	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		Real cost_prev = REALMAX;$/;"	l	language:C++
cost_prev	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real cost_prev = REALMAX;$/;"	l	language:C++
cost_tol	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const Real cost_tol = 1;$/;"	l	language:C++
cost_tol	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const Real cost_tol = 1e-6;$/;"	l	language:C++
count_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    int count_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
cout	/home/rpradeep/Desktop/kft/src/main.cpp	/^    std::cout << "\\nExiting simulator\\n";$/;"	m	language:C++	class:std	file:
cout	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^            std::cout << "EEND" ;$/;"	m	language:C++	class:std	file:
cout	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^            std::cout << "ESTART" ;$/;"	m	language:C++	class:std	file:
cout	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^            std::cout << "KREPLAN" ;$/;"	m	language:C++	class:std	file:
cout	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    std::cout << "\\nExiting simulator\\n";$/;"	m	language:C++	class:std	file:
cout	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    std::cout << "\\nExiting simulator\\n";$/;"	m	language:C++	class:std	file:
cpp_macros	/home/rpradeep/.vimrc	/^augroup cpp_macros " {$/;"	a	language:Vim
createBillboardChain	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    lines[nl] = mSceneMgr->createBillboardChain();$/;"	p	language:C++	file:
createBillboardChain	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    lines[nl] = mSceneMgr->createBillboardChain();$/;"	p	language:C++	file:
createBillboardChain	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	lines[nl] = mSceneMgr->createBillboardChain();$/;"	p	language:C++	file:
createCamera	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^void BaseApplication::createCamera(void)$/;"	f	language:C++	class:BaseApplication
createCamera	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual void createCamera(void);$/;"	p	language:C++	class:BaseApplication
createCamera	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^void BaseApplication::createCamera(void)$/;"	f	language:C++	class:BaseApplication
createCamera	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^void BaseApplication::createCamera(void)$/;"	f	language:C++	class:BaseApplication
createCamera	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^void BaseApplication::createCamera(void)$/;"	f	language:C++	class:BaseApplication
createContact	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void createContact( const int idx, const Real dz, const HomogeneousTransform HT_contact_to_world );$/;"	p	language:C++	class:WmrModelODE
createFrameListener	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^void BaseApplication::createFrameListener(void)$/;"	f	language:C++	class:BaseApplication
createFrameListener	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual void createFrameListener(void);$/;"	p	language:C++	class:BaseApplication
createFrameListener	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^void BaseApplication::createFrameListener(void)$/;"	f	language:C++	class:BaseApplication
createFrameListener	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^void BaseApplication::createFrameListener(void)$/;"	f	language:C++	class:BaseApplication
createFrameListener	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^void BaseApplication::createFrameListener(void)$/;"	f	language:C++	class:BaseApplication
createResourceListener	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^void BaseApplication::createResourceListener(void)$/;"	f	language:C++	class:BaseApplication
createResourceListener	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual void createResourceListener(void);$/;"	p	language:C++	class:BaseApplication
createResourceListener	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^void BaseApplication::createResourceListener(void)$/;"	f	language:C++	class:BaseApplication
createResourceListener	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^void BaseApplication::createResourceListener(void)$/;"	f	language:C++	class:BaseApplication
createResourceListener	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^void BaseApplication::createResourceListener(void)$/;"	f	language:C++	class:BaseApplication
createScene	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^    virtual void createScene(void);$/;"	p	language:C++	class:WmrAnimation
createScene	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::createScene(void)$/;"	f	language:C++	class:WmrAnimation
createScene	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual void createScene(void) = 0; \/\/ Override me!$/;"	p	language:C++	class:BaseApplication
createScene	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^    virtual void createScene(void);$/;"	p	language:C++	class:WmrAnimation
createScene	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^void WmrAnimation::createScene(void)$/;"	f	language:C++	class:WmrAnimation
createScene	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^    virtual void createScene(void);$/;"	p	language:C++	class:WmrAnimation
createScene	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    virtual void createScene(void);$/;"	p	language:C++	class:WMRSim
createScene	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^void TutorialApplication::createScene(void)$/;"	f	language:C++	class:TutorialApplication
createScene	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.h	/^    virtual void createScene(void);$/;"	p	language:C++	class:TutorialApplication
createScene	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^void WMRSim::createScene(void)$/;"	f	language:C++	class:WMRSim
createScene	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^    virtual void createScene(void);$/;"	p	language:C++	class:WMRSim
createScene	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^void WmrAnimation::createScene(void)$/;"	f	language:C++	class:WmrAnimation
createScene	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^void WMRSim::createScene(void)$/;"	f	language:C++	class:WMRSim
createScene	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^    virtual void createScene(void);$/;"	p	language:C++	class:WMRSim
createViewports	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^void BaseApplication::createViewports(void)$/;"	f	language:C++	class:BaseApplication
createViewports	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual void createViewports(void);$/;"	p	language:C++	class:BaseApplication
createViewports	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^void BaseApplication::createViewports(void)$/;"	f	language:C++	class:BaseApplication
createViewports	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^void BaseApplication::createViewports(void)$/;"	f	language:C++	class:BaseApplication
createViewports	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^void BaseApplication::createViewports(void)$/;"	f	language:C++	class:BaseApplication
crossVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	194;"	d	language:C++
crossVec6bForce	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	139;"	d	language:C++
crossVec6bMotion	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	125;"	d	language:C++
cumulativeDistance	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^    double cumulativeDistance = 0;$/;"	l	language:C++
currentHeading	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    double currentHeading = 0;$/;"	l	language:C++
currentHeading	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    double currentHeading = 0;$/;"	l	language:C++
currentIndex	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^int currentIndex;$/;"	v	language:C++
currentNode	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^            STNode currentNode = nodes_[topNode.id]; \/\/ priority queue contains copy of the nodes so ... need to access nodes_ by id$/;"	l	language:C++
currentNode	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^            Node currentNode = nodes_[topNode.id]; \/\/ priority queue contains copy of the nodes so ... need to access nodes_ by id$/;"	l	language:C++
currentPosition	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    const double currentPosition = childNode.s;$/;"	l	language:C++
currentPosition	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        const Eigen::Vector2d currentPosition(mCurrentPosition[0],mCurrentPosition[1]);$/;"	p	language:C++	file:
currentPosition	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        const Eigen::Vector2d currentPosition(mCurrentPosition[0],mCurrentPosition[1]);$/;"	p	language:C++	file:
currentPosition	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    const double currentPosition = iterator->position;$/;"	l	language:C++
currentPositionX	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    double currentPositionX = 0;$/;"	l	language:C++
currentPositionX	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    double currentPositionX = 0;$/;"	l	language:C++
currentPositionY	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    double currentPositionY = 0;$/;"	l	language:C++
currentPositionY	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    double currentPositionY = 0;$/;"	l	language:C++
currentSpeed	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    double currentSpeed = 0;$/;"	l	language:C++
currentSpeed	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    double currentSpeed = 0;$/;"	l	language:C++
currentStage	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    const double currentStage = iterator->stage;$/;"	l	language:C++
currentState	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    int currentState = 0;$/;"	l	language:C++
currentState	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    int currentState = 0;$/;"	l	language:C++
currentTime	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    const double currentTime = childNode.t;$/;"	l	language:C++
currentTime	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        double currentTime = dummyParent.t;$/;"	l	language:C++
currentTime	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    double currentTime = 0;$/;"	l	language:C++
currentTime	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    const double currentTime = iterator->time;$/;"	l	language:C++
currentTime	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    double currentTime = 0;$/;"	l	language:C++
currentVelocity	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    double currentVelocity = currentNode.v;$/;"	l	language:C++
currHead	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    const double currHead = simInterface->getLastHeading();$/;"	l	language:C++
currPosX	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    const double currPosX = simInterface->getLastPositionX();$/;"	l	language:C++
currPosY	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    const double currPosY = simInterface->getLastPositionY();$/;"	l	language:C++
curvatureMax	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double curvatureMax;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
curvatureMax	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double curvatureMax;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
D	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const Real D = .119; \/\/vertical offset between wheel centers and axle joints$/;"	l	language:C++
d	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	Real d = REALMAX;$/;"	l	language:C++
d	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	Real d[2]; \/\/spacing$/;"	m	language:C++	class:GridSurf
d	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	Type d = (hi-lo)\/(Type(n)-1);$/;"	l	language:C++
D	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const Real D = .119; \/\/vertical offset between wheel centers and axle joints$/;"	l	language:C++
D	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const Real D = .119; \/\/vertical offset between wheel centers and axle joints$/;"	l	language:C++
D1_ji	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const int D1_ji = 1-1;$/;"	l	language:C++
D2_ji	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const int D2_ji = 7-1;$/;"	l	language:C++
DADPlannerConfig	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    DADPlannerConfig()$/;"	f	language:C++	class:dad_local_planner::DADPlannerConfig
DADPlannerConfig	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^class DADPlannerConfig$/;"	c	language:C++	namespace:dad_local_planner
DADPlannerConfig	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    DADPlannerConfig()$/;"	f	language:C++	class:dad_local_planner::DADPlannerConfig
DADPlannerConfig	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^class DADPlannerConfig$/;"	c	language:C++	namespace:dad_local_planner
dad_local_planner	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^namespace dad_local_planner$/;"	n	language:C++
dad_local_planner	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^namespace dad_local_planner$/;"	n	language:C++
dad_local_planner	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^namespace dad_local_planner$/;"	n	language:C++
dad_local_planner	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^namespace dad_local_planner$/;"	n	language:C++
dad_local_planner	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^namespace dad_local_planner$/;"	n	language:C++
dad_local_planner	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^namespace dad_local_planner$/;"	n	language:C++
dad_local_planner	/home/rpradeep/Desktop/kft/include/TrajectoryPlanner.h	/^namespace dad_local_planner$/;"	n	language:C++
dad_local_planner	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^namespace dad_local_planner$/;"	n	language:C++	file:
dad_local_planner	/home/rpradeep/Desktop/kft/src/planner/Node.cpp	/^namespace dad_local_planner$/;"	n	language:C++	file:
dad_local_planner	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^namespace dad_local_planner$/;"	n	language:C++	file:
dcost_tol	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const Real dcost_tol = cost_tol\/10;$/;"	l	language:C++
dcost_tol	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const Real dcost_tol = cost_tol\/10;$/;"	l	language:C++
DEBUG_CERR	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	30;"	d	language:C++
DEBUG_CERR	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	32;"	d	language:C++
DEFAULT_TURN_RADIUS	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	3;"	d	language:C++
DEFAULT_TURN_RADIUS	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	3;"	d	language:C++
DEGTORAD	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	52;"	d	language:C++
DeleteTrailingWS	/home/rpradeep/.vimrc	/^func! DeleteTrailingWS()$/;"	f	language:Vim
depth	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    unsigned int width, height, depth;$/;"	l	language:C++
depth	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    unsigned int width, height, depth;$/;"	l	language:C++
depth	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    unsigned int width, height, depth;$/;"	l	language:C++
depth	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    unsigned int width, height, depth;$/;"	l	language:C++
derr_dx	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real derr_dx[MAXNV*MAXNV];$/;"	l	language:C++
derr_dx	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real derr_dx[MAXNE*MAXNS];$/;"	l	language:C++
desiredVelocity	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        const double desiredVelocity = currentNode.desiredVelocity;$/;"	l	language:C++
destroyInputObject	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^            mInputManager->destroyInputObject( mKeyboard );$/;"	p	language:C++	file:
destroyInputObject	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^            mInputManager->destroyInputObject( mMouse );$/;"	p	language:C++	file:
destroyInputObject	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^            mInputManager->destroyInputObject( mKeyboard );$/;"	p	language:C++	file:
destroyInputObject	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^            mInputManager->destroyInputObject( mMouse );$/;"	p	language:C++	file:
destroyInputObject	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^            mInputManager->destroyInputObject( mKeyboard );$/;"	p	language:C++	file:
destroyInputObject	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^            mInputManager->destroyInputObject( mMouse );$/;"	p	language:C++	file:
destroyInputObject	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^            mInputManager->destroyInputObject( mKeyboard );$/;"	p	language:C++	file:
destroyInputObject	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^            mInputManager->destroyInputObject( mMouse );$/;"	p	language:C++	file:
destroyInputSystem	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^            OIS::InputManager::destroyInputSystem(mInputManager);$/;"	p	language:C++	class:OIS::InputManager	file:
destroyInputSystem	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^            OIS::InputManager::destroyInputSystem(mInputManager);$/;"	p	language:C++	class:OIS::InputManager	file:
destroyInputSystem	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^            OIS::InputManager::destroyInputSystem(mInputManager);$/;"	p	language:C++	class:OIS::InputManager	file:
destroyInputSystem	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^            OIS::InputManager::destroyInputSystem(mInputManager);$/;"	p	language:C++	class:OIS::InputManager	file:
destroyOverlayElement	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^        olm->destroyOverlayElement(szElement);$/;"	p	language:C++
destroyOverlayElement	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^        olm->destroyOverlayElement(szElement);$/;"	p	language:C++
destroyScene	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^void BaseApplication::destroyScene(void)$/;"	f	language:C++	class:BaseApplication
destroyScene	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual void destroyScene(void);$/;"	p	language:C++	class:BaseApplication
destroyScene	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^void BaseApplication::destroyScene(void)$/;"	f	language:C++	class:BaseApplication
destroyScene	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^void BaseApplication::destroyScene(void)$/;"	f	language:C++	class:BaseApplication
destroyScene	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^void BaseApplication::destroyScene(void)$/;"	f	language:C++	class:BaseApplication
dest_ptr	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^	Type* dest_ptr = Dest+S2I(0,ci_dest,nrows);$/;"	l	language:C++
dest_ptr	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^	Type* dest_ptr;$/;"	l	language:C++
detourCostFactor	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double detourCostFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
detourCostFactor	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double detourCostFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
dft	/home/rpradeep/Desktop/kft/src/main.cpp	/^    DFTPlanner dft;$/;"	l	language:C++
dft	/home/rpradeep/Desktop/kft/src/main.cpp	/^    DFTPlanner dft;$/;"	l	language:C++
dft	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    DFTPlanner dft;$/;"	l	language:C++
DFTPlanner	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    DFTPlanner();$/;"	p	language:C++	class:dad_local_planner::DFTPlanner
DFTPlanner	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^class DFTPlanner$/;"	c	language:C++	namespace:dad_local_planner
DFTPlanner	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^DFTPlanner::DFTPlanner()$/;"	f	language:C++	class:DFTPlanner
diff	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        double diff = 100;$/;"	l	language:C++
diff	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^        Eigen::Vector2d diff = points_[i] - points_[i - 1];$/;"	l	language:C++
DIFFDEG	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	60;"	d	language:C++
DIFFRAD	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	59;"	d	language:C++
diffVector	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^            auto diffVector = positionVectorList[i+1]-positionVectorList[i];$/;"	l	language:C++
dir	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    Eigen::Vector2d dir = Eigen::Vector2d ( std::cos ( childNode.th ), std::sin ( childNode.th ) );$/;"	l	language:C++
dist	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^    double dist = 0;$/;"	l	language:C++
dist	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^        double dist = ( point - points_[i] ).norm();$/;"	l	language:C++
distanceOnLastSegment	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^    double distanceOnLastSegment = 0;$/;"	l	language:C++
distFromPath	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    double distFromPath = 0;$/;"	l	language:C++
distHead	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    const double distHead = std::atan2(distY,distX);$/;"	l	language:C++
distSq	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        const double distSq = (currentPosition-wayPointPosition).squaredNorm();$/;"	l	language:C++
distToGoal	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        const double distToGoal = goalVector.norm();$/;"	l	language:C++
distToGoal	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    const double distToGoal = std::sqrt(distX*distX + distY*distY);$/;"	l	language:C++
distToTimeFactor	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    const double distToTimeFactor = 1 \/ config_.velMaxFwd;$/;"	l	language:C++
distX	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    const double distX = goalX-currPosX;$/;"	l	language:C++
distY	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    const double distY = goalY-currPosY;$/;"	l	language:C++
dmf	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	dModelForce dmf;$/;"	l	language:C++
dModelForce	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	struct dModelForce {$/;"	s	language:C++	file:
DofTypeToVec6bInd	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^inline int DofTypeToVec6bInd(const int dof_type) {$/;"	f	language:C++
dof_int	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	int dof_int = Frame::convertDofTypeString(dof_string);$/;"	l	language:C++
dof_int	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	int dof_int;$/;"	l	language:C++
dof_type	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	int dof_type;		\/\/degree of freedom type, 0-5$/;"	m	language:C++	class:Frame
dof_type	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^			int dof_type = frames[fi].dof_type;$/;"	l	language:C++
dof_type	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		int dof_type = frames[fi].dof_type;$/;"	l	language:C++
dof_type	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	int dof_type;$/;"	l	language:C++
dof_type	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^				int dof_type = frames[fi].dof_type;$/;"	l	language:C++
dof_type	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^				int dof_type = frames[fi].dof_type;$/;"	l	language:C++
DONE	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    enum DSTATUS {PLAN,WAIT,DONE};$/;"	e	language:C++	enum:DSTATUS	file:
DONE	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    enum KSTATUS {PLAN,WAIT, INIT, DONE};$/;"	e	language:C++	enum:KSTATUS	file:
DONE	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    enum DSTATUS {PLAN,WAIT,DONE};$/;"	e	language:C++	enum:DSTATUS	file:
DONE	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    enum KSTATUS {PLAN,WAIT, INIT, DONE};$/;"	e	language:C++	enum:KSTATUS	file:
dotVec	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline Type dotVec(const int n, const Type a[], const Type b[]) {$/;"	f	language:C++
dotVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	189;"	d	language:C++
do_anim	/home/rpradeep/Desktop/kft/src/main.cpp	/^    bool do_anim = true; \/\/do animation$/;"	l	language:C++
do_anim	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    bool do_anim = true; \/\/do animation$/;"	l	language:C++
do_anim	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    bool do_anim = true; \/\/do animation$/;"	l	language:C++
do_anim	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	bool do_anim = true; \/\/do animation$/;"	l	language:C++
do_anim	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	bool do_anim = true; \/\/do animation$/;"	l	language:C++
do_approx_C	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const bool do_approx_C = false; \/\/treat WMR as single rigid body when computing joint space bias force$/;"	l	language:C++
do_dyn	/home/rpradeep/Desktop/kft/src/main.cpp	/^    bool do_dyn = true; \/\/do dynamic simulation, else kinematic$/;"	l	language:C++
do_dyn	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    bool do_dyn = true; \/\/do dynamic simulation, else kinematic$/;"	l	language:C++
do_dyn	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    bool do_dyn = true; \/\/do dynamic simulation, else kinematic$/;"	l	language:C++
do_dyn	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	bool do_dyn = true; \/\/do dynamic simulation, else kinematic$/;"	l	language:C++
do_dyn	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	bool do_dyn = true; \/\/do dynamic simulation, else kinematic$/;"	l	language:C++
do_reuse_H	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const bool do_reuse_H = false; \/\/reuse joint space inertia$/;"	l	language:C++
do_time	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    bool do_time = false;$/;"	l	language:C++
do_time	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    bool do_time = false;$/;"	l	language:C++
do_time	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	bool do_time = false;$/;"	l	language:C++
do_time	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	bool do_time = false;$/;"	l	language:C++
drawDynamicObstacles	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^    void drawDynamicObstacles();$/;"	p	language:C++	class:WmrAnimation
drawDynamicObstacles	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void drawDynamicObstacles()$/;"	f	language:C++
drawGoalNode	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^    void drawGoalNode();$/;"	p	language:C++	class:WmrAnimation
drawGoalNode	/home/rpradeep/Desktop/kft/src/main.cpp	/^    anim.drawGoalNode();$/;"	p	language:C++	file:
drawGoalNode	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::drawGoalNode()$/;"	f	language:C++	class:WmrAnimation
drawPath	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^    void drawPath(const KFTSolution& kftSol);$/;"	p	language:C++	class:WmrAnimation
drawPath	/home/rpradeep/Desktop/kft/src/main.cpp	/^            anim.drawPath(replanned);$/;"	p	language:C++	file:
drawPath	/home/rpradeep/Desktop/kft/src/main.cpp	/^    anim.drawPath(ks1);$/;"	p	language:C++	file:
drawPath	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::drawPath(const KFTSolution& kftSol)$/;"	f	language:C++	class:WmrAnimation
drawRefPath	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^    void drawRefPath(const std::vector<Eigen::Vector2d>& path);$/;"	p	language:C++	class:WmrAnimation
drawRefPath	/home/rpradeep/Desktop/kft/src/main.cpp	/^    anim.drawRefPath(refPath);$/;"	p	language:C++	file:
drawRefPath	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::drawRefPath(const std::vector<Eigen::Vector2d>& path)$/;"	f	language:C++	class:WmrAnimation
drawWorldMap	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^    void drawWorldMap();$/;"	p	language:C++	class:WmrAnimation
drawWorldMap	/home/rpradeep/Desktop/kft/src/main.cpp	/^    anim.drawWorldMap();$/;"	p	language:C++	file:
drawWorldMap	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::drawWorldMap()$/;"	f	language:C++	class:WmrAnimation
draw_edges	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	bool draw_edges = true;$/;"	l	language:C++
draw_edges	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^	const bool draw_edges = true;$/;"	l	language:C++
draw_edges	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const bool draw_edges = true;$/;"	l	language:C++
draw_edges	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^		addEntityVrml(get_node(wheelframeinds[wno]), filename, -1, draw_faces, draw_edges);$/;"	l	language:C++
draw_edges	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	addEntityVrml(get_node(i), filename, -1, draw_faces, draw_edges);$/;"	l	language:C++
draw_edges	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	addEntityVrml(get_node(i), filename, -1, draw_faces, draw_edges);$/;"	l	language:C++
draw_edges	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	addEntityVrml(get_node(i), filename, -1, draw_faces, draw_edges);$/;"	l	language:C++
draw_edges	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	const bool draw_edges = true;$/;"	l	language:C++
draw_faces	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	bool draw_faces = false;$/;"	l	language:C++
draw_faces	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^	const bool draw_faces = true;$/;"	l	language:C++
draw_faces	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const bool draw_faces = true;$/;"	l	language:C++
draw_faces	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^		addEntityVrml(get_node(wheelframeinds[wno]), filename, -1, draw_faces, draw_edges);$/;"	l	language:C++
draw_faces	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	addEntityVrml(get_node(i), filename, -1, draw_faces, draw_edges);$/;"	l	language:C++
draw_faces	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	addEntityVrml(get_node(i), filename, -1, draw_faces, draw_edges);$/;"	l	language:C++
draw_faces	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	addEntityVrml(get_node(i), filename, -1, draw_faces, draw_edges);$/;"	l	language:C++
draw_faces	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	const bool draw_faces = true;$/;"	l	language:C++
ds	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        const double ds = mpDatabasePtr_->at ( i ).ds;$/;"	l	language:C++
ds	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        double ds;$/;"	l	language:C++
ds	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        f >> ds;$/;"	l	language:C++
ds1	/home/rpradeep/Desktop/kft/src/main.cpp	/^    KFTSolution ds1 = dft.getSolution();$/;"	l	language:C++
ds1	/home/rpradeep/Desktop/kft/src/main.cpp	/^    KFTSolution ds1 = dft.getSolution();$/;"	l	language:C++
ds1	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^        KFTSolution ds1 = dft.getSolution();$/;"	l	language:C++
ds1	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^        KFTSolution ds1 = dft.getSolution();$/;"	l	language:C++
dsq	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^        const double dsq = (currPosX - pathX[i]) * (currPosX - pathX[i]) + (currPosY - pathY[i]) * (currPosY - pathY[i]);$/;"	l	language:C++
dStatus	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    DSTATUS dStatus = DSTATUS::DONE;$/;"	l	language:C++
DSTATUS	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    enum DSTATUS {PLAN,WAIT,DONE};$/;"	g	language:C++	file:
dStatus	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    DSTATUS dStatus = DSTATUS::DONE;$/;"	l	language:C++
DSTATUS	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    enum DSTATUS {PLAN,WAIT,DONE};$/;"	g	language:C++	file:
dt	/home/rpradeep/Desktop/kft/src/main.cpp	/^    const Real dt = dt_ms \/ 1000.0;$/;"	l	language:C++
dt	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    const Real dt = dt_ms \/ 1000.0;$/;"	l	language:C++
dt	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    const Real dt = dt_ms \/ 1000.0;$/;"	l	language:C++
dt	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const Real dt = dt_ms \/ 1000.0;$/;"	l	language:C++
dt	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	const Real dt = dt_ms \/ 1000.0;$/;"	l	language:C++
dth	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        double dth;$/;"	l	language:C++
dth	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        f >> dth;$/;"	l	language:C++
dtTmp	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    const double dtTmp = dt_;$/;"	l	language:C++
dt_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    double dt_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
dt_ms	/home/rpradeep/Desktop/kft/src/main.cpp	/^    const int dt_ms = 10;$/;"	l	language:C++
dt_ms	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    const int dt_ms = 10;$/;"	l	language:C++
dt_ms	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    const int dt_ms = 10;$/;"	l	language:C++
dt_ms	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^    const int dt_ms = 1;$/;"	l	language:C++
dt_ms	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^    const int dt_ms = 1;$/;"	l	language:C++
dummy	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        MotionPrimitiveInfo dummy;$/;"	l	language:C++
dummyChild	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        Node dummyChild = solutionNodeList_[i - 1];$/;"	l	language:C++
dummyCost	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    double dummyCost = 0;$/;"	l	language:C++
dummyParent	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        Node dummyParent = solutionNodeList_[i];$/;"	l	language:C++
dump	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^    inline void dump(const std::string name)$/;"	f	language:C++	class:KFTSolution
dump	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^void SpatialHash::dump()$/;"	f	language:C++	class:SpatialHash
dumpObstaclePositions	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^    void dumpObstaclePositions(const std::string& fileName,const std::vector<double>& timeVector ) const;$/;"	p	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
dumpObstaclePositions	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^void DynamicObstacleCostEvaluator::dumpObstaclePositions(const std::string& fileName,const std::vector<double>& timeVector ) const$/;"	f	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
duration	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    double duration = childNode.t - parentNode.t;$/;"	l	language:C++
dv	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        double dv = -100;$/;"	l	language:C++
dvel_front	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real dvel_front,dvel_rear;$/;"	l	language:C++
dvel_front	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real dvel_front,dvel_rear;$/;"	l	language:C++
dvel_front	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real dvel_front,dvel_rear;$/;"	l	language:C++
dvel_rear	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real dvel_front,dvel_rear;$/;"	l	language:C++
dvel_rear	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real dvel_front,dvel_rear;$/;"	l	language:C++
dvel_rear	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real dvel_front,dvel_rear;$/;"	l	language:C++
dwgcin_dqacc	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real dwgcin_dqacc[MAXNP][5*MAXNV]; \/\/nwic x 5 x nv, Jacobian of [vx vy vz Rw dz] wrt qacc$/;"	l	language:C++
dx	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        double dx;$/;"	l	language:C++
dx	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        f >> dx;$/;"	l	language:C++
dx	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const float dx = (float) surf->get_dx();$/;"	l	language:C++
dx	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^    float dx = _ga_t0->getXnormalized() - _ga_t1->getXnormalized();$/;"	l	language:C++
dx	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const float dx = (float) surf->get_dx();$/;"	l	language:C++
dx	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const float dx = (float) surf->get_dx();$/;"	l	language:C++
dx	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const float dx = (float) surf->get_dx();$/;"	l	language:C++
dy	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        double dy;$/;"	l	language:C++
dy	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        f >> dy;$/;"	l	language:C++
dy	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const float dy = (float) surf->get_dy();$/;"	l	language:C++
dy	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^    float dy = _ga_t0->getYnormalized() - _ga_t1->getYnormalized();$/;"	l	language:C++
dy	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const float dy = (float) surf->get_dy();$/;"	l	language:C++
dy	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const float dy = (float) surf->get_dy();$/;"	l	language:C++
dy	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const float dy = (float) surf->get_dy();$/;"	l	language:C++
dynamicObstacle	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        DynamicObstacle dynamicObstacle( pos, vel, radius, sigma, triggerTime );$/;"	p	language:C++	file:
dynamicObstacleCollisionRiskFactor	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double dynamicObstacleCollisionRiskFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
dynamicObstacleCollisionRiskFactor	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double dynamicObstacleCollisionRiskFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
DynamicObstacleCostEvaluator	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^    DynamicObstacleCostEvaluator();$/;"	p	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
DynamicObstacleCostEvaluator	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^class DynamicObstacleCostEvaluator$/;"	c	language:C++	namespace:dad_local_planner
DynamicObstacleCostEvaluator	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^DynamicObstacleCostEvaluator::DynamicObstacleCostEvaluator() $/;"	f	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
dynamicObstacleCostEvaluator_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    DynamicObstacleCostEvaluator dynamicObstacleCostEvaluator_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
dynamicObstacleCostEvaluator_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    DynamicObstacleCostEvaluator dynamicObstacleCostEvaluator_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
dynamicObstaclesConfigFilePath	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    std::string dynamicObstaclesConfigFilePath;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
dynamicObstaclesConfigFilePath	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    std::string dynamicObstaclesConfigFilePath;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
dynamicObstaclesVector_	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^    std::vector<DynamicObstacle> dynamicObstaclesVector_;$/;"	m	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
dynamicOldTime	/home/rpradeep/Desktop/kft/src/main.cpp	/^    double dynamicOldTime = 0;$/;"	l	language:C++
dynamicPlannerThread	/home/rpradeep/Desktop/kft/src/main.cpp	/^void dynamicPlannerThread();$/;"	p	language:C++	file:
dynamicPlannerThread	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^void dynamicPlannerThread()$/;"	f	language:C++
dynamicPlannerThread	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^void dynamicPlannerThread()$/;"	f	language:C++
DYNAMIC_PLANNER_PERIOD_MS	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    const int DYNAMIC_PLANNER_PERIOD_MS = 500;$/;"	l	language:C++
DYNAMIC_PLANNER_PERIOD_MS	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    const int DYNAMIC_PLANNER_PERIOD_MS = 500;$/;"	l	language:C++
DYNAMIC_PLANNER_PERIOD_S	/home/rpradeep/Desktop/kft/src/main.cpp	/^    const double DYNAMIC_PLANNER_PERIOD_S = 0.5;$/;"	l	language:C++
dz	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            Real dz = wcontacts[wno].dz;$/;"	l	language:C++
dz	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	Real dz; \/\/contact height error$/;"	m	language:C++	class:WheelContactGeom
dz	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	Real dz[MAXNP];$/;"	m	language:C++	class:TrackContactGeom
dz	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            Real dz = wcontacts[wno].dz;$/;"	l	language:C++
dz	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real dz[MAXNP];$/;"	l	language:C++
dz	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			Real dz = wcontacts[wno].dz;$/;"	l	language:C++
dz0	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real dz0[MAXNP]; \/\/contact height errors$/;"	l	language:C++
DZDX	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	Real DZDX[buffer];$/;"	m	language:C++	class:GridSurf
DZDY	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	Real DZDY[buffer];$/;"	m	language:C++	class:GridSurf
dz_target	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real dz_target[MAXNW];	\/\/target Delta z (contact height error)$/;"	m	language:C++	class:WmrModel
eigenCholDynamic	/home/rpradeep/Desktop/wmrde/include/wmrde/eigensolve.h	/^bool eigenCholDynamic( const int n, Real* A, Real* L);$/;"	p	language:C++
eigenCholFixed	/home/rpradeep/Desktop/wmrde/include/wmrde/eigensolve.h	/^bool eigenCholFixed( const int n, Real* A, Real* L);$/;"	p	language:C++
eigenSolveDynamic	/home/rpradeep/Desktop/wmrde/include/wmrde/eigensolve.h	/^void eigenSolveDynamic( const int nrows, const int ncols, Real* A, Real* b, Real* x );$/;"	p	language:C++
eigenSolveFixed	/home/rpradeep/Desktop/wmrde/include/wmrde/eigensolve.h	/^void eigenSolveFixed( const int nrows, const int ncols, Real* A, Real* b, Real* x );$/;"	p	language:C++
elapsed	/home/rpradeep/Desktop/kft/include/TrajectoryPlanner.h	/^        auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(timerEnd-timerStart_);$/;"	l	language:C++
elapsedTime	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    int elapsedTime = 0;$/;"	l	language:C++
elapsedTime	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    int elapsedTime = 0;$/;"	l	language:C++
elem	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgrePath.cpp	/^    Ogre::BillboardChain::Element elem;$/;"	l	language:C++
elem	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::BillboardChain::Element elem;$/;"	l	language:C++
elem	/home/rpradeep/Desktop/wmrde/src/animate/OgrePath.cpp	/^    Ogre::BillboardChain::Element elem;$/;"	l	language:C++
elem	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Ogre::BillboardChain::Element elem;$/;"	l	language:C++
elem	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Ogre::BillboardChain::Element elem;$/;"	l	language:C++
element	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^            KFTSolutionElement element;$/;"	l	language:C++
elements	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^    std::vector<KFTSolutionElement> elements;$/;"	m	language:C++	class:KFTSolution
emplace_back	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	surfaces.emplace_back(new GridSurf());$/;"	p	language:C++	file:
emplace_back	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	surfaces.emplace_back(new PlaneSurf(pec));$/;"	p	language:C++	file:
emplace_back	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	surfaces.emplace_back(new TriMeshSurf());$/;"	p	language:C++	file:
ENABLE_DYNAMIC_OBS	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	195;"	d	language:C++	file:
ENABLE_DYNAMIC_REPLAN	/home/rpradeep/Desktop/kft/src/main.cpp	28;"	d	language:C++	file:
end	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        velocityOptions.erase( unique( velocityOptions.begin(), velocityOptions.end() ), velocityOptions.end() );$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    trajectoryVector_.erase(std::remove_if( trajectoryVector_.begin(), trajectoryVector_.end(), [startTime,endTime](const KFTSolutionElement& se) -> bool { return (se.time >= startTime); }), trajectoryVector_.end());$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    trajectoryVector_.erase(std::remove_if( trajectoryVector_.begin(), trajectoryVector_.end(), [startTime](const KFTSolutionElement& se) -> bool { return (se.time >= startTime); }), trajectoryVector_.end());$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	tmp.erase(std::remove(tmp.begin(), tmp.end(), ','), tmp.end());$/;"	p	language:C++
end	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	tmp.erase(std::remove(tmp.begin(), tmp.end(), '\\n'), tmp.end());$/;"	p	language:C++
end	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    manual->end();$/;"	p	language:C++	file:
end	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    manual->end();$/;"	p	language:C++	file:
endl	/home/rpradeep/Desktop/kft/src/main.cpp	/^        of << pos[0] << " " << pos[1] << " " << time << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    std::cout << " DFTPlanner Expansions : " << expansions_ << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    std::cout << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^            std::cout << " KFTPlanner : Open list is empty. Is the problem feasible ? " << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        std::cout << s << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    std::cout << " s : " << prevPlanPathPosition_ << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    std::cout << " stage : " << prevPlanFinalStage_<< std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    std::cout << "\\n KFTPlanner expansions : " << expansions_ << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        std::cout << " Error opening file : " << fileName.c_str() << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^    std::cout << " Loaded motion primitive database " << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/Node.cpp	/^        os << " state : " << "DETOUR" << std::endl;$/;"	m	language:C++	class:dad_local_planner::std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/Node.cpp	/^        os << " state : " << "FOLLOW" << std::endl;$/;"	m	language:C++	class:dad_local_planner::std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        std::cerr << "\\nSimulation interface is invalid\\n" << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        std::cerr << "\\nTrajectory queue is invalid\\n" << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    std::cout << " Dumping " << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    std::cout << "\\n Printing queue : " << name << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^            dumpFile << v << " " << k << " " << (space_[i][j] == true ? 1 : 0) << std::endl;$/;"	m	language:C++	class:dad_local_planner::std	file:
endl	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^        OSG_WARN << "Manipulator warning: eventTimeDelta = " << eventTimeDelta << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^			std::cout << "could not open .wrl file" << std::endl;$/;"	m	language:C++	class:VrmlData::std
endl	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	std::cout << "state(" << time << ")=\\n"; printMatReal(ns,1,y,-1,-1); std::cout << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	std::cout << "state(" << time << ")=\\n"; printMatReal(ns,1,y,-1,-1); std::cout << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^    std::cout << "Steps : " << nsteps << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	std::cout << "state(" << time << ")=\\n"; printMatReal(ns,1,y,-1,-1); std::cout << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	std::cout << "state(" << time << ")=\\n"; printMatReal(ns,1,y,-1,-1); std::cout << std::endl;$/;"	m	language:C++	class:std	file:
endl	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^    std::cout << "Steps : " << nsteps << std::endl;$/;"	m	language:C++	class:std	file:
endTime	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    const double endTime = timeInput.back();$/;"	l	language:C++
endTime	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    const double endTime = solution.elements.back().time;$/;"	l	language:C++
endTime	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    const double endTime = timeOffset + duration;$/;"	l	language:C++
endTime	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    const double endTime = timeOffset + duration;$/;"	l	language:C++
entity	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgreDynamicObstacles.cpp	/^        Ogre::Entity* entity = mSceneMgr->createEntity(ss.str().c_str(), Ogre::SceneManager::PT_SPHERE);$/;"	l	language:C++
EPS	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    const double EPS = 10e-1;$/;"	l	language:C++
erase	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^            trajectoryVector_.erase(k);$/;"	p	language:C++	file:
erase	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^            trajectoryVector_.erase(k);$/;"	p	language:C++	file:
erp	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real erp,cfm;$/;"	l	language:C++
erp	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real erp,cfm;$/;"	l	language:C++
erp	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real erp,cfm;$/;"	l	language:C++
erp	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real erp,cfm;$/;"	l	language:C++
erp_j	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real erp_j[MAXNJC];		\/\/error reduction parameter$/;"	m	language:C++	class:WmrModel
erp_z	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real erp_z[MAXNW];		\/\/error reduction parameter, z dir (0-1)$/;"	m	language:C++	class:WmrModel
err	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^	Real err[WmrModel::MAXNA]; \/\/error: commanded - actual$/;"	m	language:C++	class:ControllerIO
err	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real err[MAXNV]; \/\/force-balance error$/;"	l	language:C++
err	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real err[MAXNE];$/;"	l	language:C++
estimateVertexCount	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    manual->estimateVertexCount(nx*ny);$/;"	p	language:C++	file:
estimateVertexCount	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    manual->estimateVertexCount(nx*ny);$/;"	p	language:C++	file:
estimateVertexCount	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	manual->estimateVertexCount(nx*ny);$/;"	p	language:C++	file:
estimateVertexCount	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    manual->estimateVertexCount(nx*ny);$/;"	p	language:C++	file:
euler	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	VecEuler euler = {0,0,0};$/;"	l	language:C++
euler	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	VecEuler euler = {0,0,0};$/;"	l	language:C++
euler	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	VecEuler euler;$/;"	l	language:C++
euler	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	VecEuler euler = {0,0,0};$/;"	l	language:C++
euler	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	VecEuler euler = {0,0,0};$/;"	l	language:C++
eulerrateToVel	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^void eulerrateToVel(const VecEuler euler, const VecEuler eulerrate, Vec3 vel, MatEuler T); \/\/called infrequently$/;"	p	language:C++
eulerToQuat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^void eulerToQuat(const VecEuler euler, VecQuat quat);$/;"	p	language:C++
eulerToRot	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^void eulerToRot(const VecEuler euler, Mat3 R); \/\/called once per time step$/;"	p	language:C++
eventTimeDelta	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^    double eventTimeDelta = _ga_t0->getTime() - _ga_t1->getTime();$/;"	l	language:C++
evert_idx_1	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            std::vector<int> evert_idx_1; \/\/1st vertex index$/;"	l	language:C++
evert_idx_1	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            std::vector<int> evert_idx_1; \/\/1st vertex index$/;"	l	language:C++
evert_idx_1	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			std::vector<int> evert_idx_1; \/\/1st vertex index$/;"	l	language:C++
evert_idx_1	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            std::vector<int> evert_idx_1; \/\/1st vertex index$/;"	l	language:C++
evert_idx_2	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            std::vector<int> evert_idx_2; \/\/2nd$/;"	l	language:C++
evert_idx_2	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            std::vector<int> evert_idx_2; \/\/2nd$/;"	l	language:C++
evert_idx_2	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			std::vector<int> evert_idx_2; \/\/2nd$/;"	l	language:C++
evert_idx_2	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            std::vector<int> evert_idx_2; \/\/2nd$/;"	l	language:C++
executeEndIter	/home/rpradeep/Desktop/kft/src/main.cpp	/^            auto executeEndIter = tq.getExecuteEndIter();$/;"	l	language:C++
executeStartTime	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        const double executeStartTime = mTrajectoryQueuePtr->getExecuteStartIter()->time;$/;"	l	language:C++
existingNode	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        const Node existingNode = nodes_[id];$/;"	l	language:C++
expansions_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    int expansions_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
expansions_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    int expansions_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
extractPositionTimeList	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    void extractPositionTimeList(std::vector<Eigen::Vector2d>& positionVector,std::vector<double>& pathPosition,std::vector<int>& stage,std::vector<double>& time,const std::vector<KFTSolutionElement>& tv) const;$/;"	p	language:C++	class:dad_local_planner::DFTPlanner
extractPositionTimeList	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^void DFTPlanner::extractPositionTimeList(std::vector<Eigen::Vector2d>& positionVector,std::vector<double>& pathPosition,std::vector<int>& stage,std::vector<double>& time,const std::vector<KFTSolutionElement>& tv) const$/;"	f	language:C++	class:DFTPlanner
eyePos	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^   osg::Vec3d eyePos;$/;"	l	language:C++
f	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^    std::ofstream f(fileName.c_str());$/;"	p	language:C++	file:
f	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^    std::ifstream f ( fileName.c_str() );$/;"	p	language:C++	file:
f	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    std::ofstream f;$/;"	l	language:C++
f	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    FILE* f = fopen(ss.str().c_str(),"w");$/;"	l	language:C++
f	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    FILE* f = fopen(ss.str().c_str(),"w");$/;"	l	language:C++
f	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^		ss >> f;$/;"	l	language:C++
f	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^		Type f;$/;"	l	language:C++
f0	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	/^  Real f0 = bilinearInterp ( f+0, xn+0 );$/;"	l	language:C++
f0	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	/^  Real f0 = linearInterp( f+0, xn+0 );$/;"	l	language:C++
f1	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	/^  Real f1 = bilinearInterp ( f+4, xn+0 );$/;"	l	language:C++
f1	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	/^  Real f1 = linearInterp( f+2, xn+0 );$/;"	l	language:C++
fa	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	Real fa = fx(a);$/;"	l	language:C++
fa	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	Real fa = fx(a);$/;"	l	language:C++
factor	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^            double factor = avgDistFromPath \/ tubeSize_;$/;"	l	language:C++
fb	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	Real fb = fx(b);$/;"	l	language:C++
fb	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	Real fb = fx(b);$/;"	l	language:C++
fc	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	Real c,fc;$/;"	l	language:C++
fc	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	Real fc = fa;$/;"	l	language:C++
fds	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real fds = 1.0\/(Kp*1e-1);$/;"	l	language:C++
fds	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real fds = 1.0\/(Kp*1e-1);$/;"	l	language:C++
fds	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real fds = 1.0\/(Kp*1e-1);$/;"	l	language:C++
fds	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real fds = 1.0\/(Kp*1e-1);$/;"	l	language:C++
fds_x	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real fds_x[MAXNW];		\/\/force dependent slip, x dir$/;"	m	language:C++	class:WmrModel
fds_y	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real fds_y[MAXNW];		\/\/force dependent slip, y dir$/;"	m	language:C++	class:WmrModel
fi	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^			int fi = frames[sprocket_fi].parent_ind;$/;"	l	language:C++
fi	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^			int fi = sprocketframeinds[tno]; \/\/frame index$/;"	l	language:C++
fi	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^			int fi = wheelframeinds[wno]; \/\/frame index$/;"	l	language:C++
fi	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^			int fi = wheelframeinds[wno];$/;"	l	language:C++
fi	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		int fi = wheelframeinds[wno];$/;"	l	language:C++
fi	/home/rpradeep/Desktop/wmrde/src/test.cpp	/^        int fi = sprocketframeinds[tno];$/;"	l	language:C++
fi	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^		int fi = sprocketframeinds[tno];$/;"	l	language:C++
fi	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^		int fi = sprocketframeinds[tno];$/;"	l	language:C++
file	/home/rpradeep/Desktop/kft/src/wmrde/surface/GridSurf.cpp	/^	std::ifstream file ( FileName.c_str() );$/;"	p	language:C++	file:
file	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^		std::ifstream file ( filename.c_str() );$/;"	p	language:C++
filename	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	std::string filename;$/;"	l	language:C++
filename	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^	std::string filename;$/;"	l	language:C++
filename	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	std::string filename;$/;"	l	language:C++
filename	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^		addEntityVrml(get_node(wheelframeinds[wno]), filename, -1, draw_faces, draw_edges);$/;"	l	language:C++
filename	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	addEntityVrml(get_node(i), filename, -1, draw_faces, draw_edges);$/;"	l	language:C++
filename	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	addEntityVrml(get_node(i), filename, -1, draw_faces, draw_edges);$/;"	l	language:C++
filename	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	addEntityVrml(get_node(i), filename, -1, draw_faces, draw_edges);$/;"	l	language:C++
filename	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	std::string filename;$/;"	l	language:C++
fill	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    std::fill ( space_.origin(), space_.origin() + space_.size(), false );$/;"	p	language:C++	class:dad_local_planner::std	file:
findMax	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^inline int findMax(const int n, const Type val[]) {$/;"	f	language:C++
findMaxAbs	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^inline int findMaxAbs(const int n, const Type val[]) {$/;"	f	language:C++
findMin	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^inline int findMin(const int n, const Type val[]) {$/;"	f	language:C++
findMinAbs	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^inline int findMinAbs(const int n, const Type val[]) {$/;"	f	language:C++
findRootBisection	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^Real findRootBisection( Real a, Real b, Func fx, const Real tolx, const Real tolfx) {$/;"	f	language:C++
findRootBrents	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^Real findRootBrents( Real a, Real b, Func fx, const Real tolx, const Real tolfx) {$/;"	f	language:C++
finline	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	33;"	d	language:C++
firstMotionPrimitive	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    bool firstMotionPrimitive = true;$/;"	l	language:C++
Fix	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^    typedef int32 Fix;$/;"	t	language:C++	class:xs_Fix
FIX_FRONT_AXLE_ROLL	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const bool FIX_FRONT_AXLE_ROLL = true;$/;"	l	language:C++
FIX_FRONT_AXLE_ROLL	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const bool FIX_FRONT_AXLE_ROLL = true;$/;"	l	language:C++
FIX_FRONT_AXLE_ROLL	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const bool FIX_FRONT_AXLE_ROLL = true;$/;"	l	language:C++
fj	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		int fj = fi; \/\/2nd frame index$/;"	l	language:C++
flat	/home/rpradeep/Desktop/wmrde/include/wmrde/demo/terrains.h	/^void flat(SurfaceVector& surfaces);$/;"	p	language:C++
flat	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^void flat(SurfaceVector& surfaces) {$/;"	f	language:C++
flipVisibility	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^        floorNode->flipVisibility();$/;"	p	language:C++	file:
flipVisibility	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^        floorNode->flipVisibility();$/;"	p	language:C++	file:
floorNode	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    Ogre::SceneNode* floorNode;$/;"	m	language:C++	class:WMRSim
floorNode	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.h	/^    Ogre::SceneNode* floorNode;$/;"	m	language:C++	class:TutorialApplication
floorNode	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^    Ogre::SceneNode* floorNode;$/;"	m	language:C++	class:WMRSim
floorNode	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^    Ogre::SceneNode* floorNode;$/;"	m	language:C++	class:WMRSim
flush	/home/rpradeep/Desktop/kft/src/main.cpp	/^        of.flush();$/;"	p	language:C++	file:
force_h	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Vec6b force_h; \/\/spatial force vector$/;"	l	language:C++
forwardDyn	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^void forwardDyn(const WmrModel& mdl, const Real state0[], const Real qvel0[], ControllerIO& u, $/;"	p	language:C++
forwardDyn	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^void forwardDyn(const WmrModel& mdl, const Real state0[], const Real qvel0[], ControllerIO& u, $/;"	f	language:C++
forwardDynCost	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	auto forwardDynCost = [&] ( const Real x_[] ) mutable -> Real {$/;"	l	language:C++
forwardDynErpCfm	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^void forwardDynErpCfm(const WmrModel& mdl, const Real state0[], const Real qvel0[], const Real u_cmd[], const ContactGeom* contacts, const Real dt, $/;"	p	language:C++
forwardDynForceBalance	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^void forwardDynForceBalance(const WmrModel& mdl, const Real state0[], const Real qvel0[], ControllerIO& u, const ContactGeom* contacts, const Real dt, $/;"	p	language:C++
forwardDynForceBalance	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^void forwardDynForceBalance(const WmrModel& mdl, const Real state0[], const Real qvel0[], ControllerIO& u, const ContactGeom* contacts, const Real dt, $/;"	f	language:C++
forwardDynGradient	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		auto forwardDynGradient = [&] ( Real grad_[] ) mutable {$/;"	l	language:C++
forwardDynPrecompute	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		auto forwardDynPrecompute = [&] ( void ) mutable {$/;"	l	language:C++
forwardVelKin	/home/rpradeep/Desktop/wmrde/include/wmrde/kinematics.h	/^void forwardVelKin(const WmrModel& mdl, const Real state[], const Real u[], const HomogeneousTransform HT_world[], const ContactGeom* contacts, \/\/inputs$/;"	p	language:C++
forwardVelKin	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^void forwardVelKin(const WmrModel& mdl, const Real state[], const Real u[], const HomogeneousTransform HT_world[], const ContactGeom* contacts, $/;"	f	language:C++
for_each	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    std::for_each(solution_.begin(), solution_.end(), [&timeVector](KFTSolutionElement &se)$/;"	p	language:C++	class:std	file:
for_each	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    std::for_each(solution_.elements.begin(), solution_.elements.end(), [&timeVector](KFTSolutionElement &se)$/;"	p	language:C++	class:std	file:
frame	/home/rpradeep/Desktop/sim/basic.cpp	/^        viewer.frame();$/;"	p	language:C++	file:
Frame	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Frame();$/;"	p	language:C++	class:Frame
Frame	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^class Frame {$/;"	c	language:C++
Frame	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^Frame::Frame() {$/;"	f	language:C++	class:Frame
frame	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^        viewer.frame();$/;"	p	language:C++	file:
frameRenderingQueued	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^        mCameraMan->frameRenderingQueued(evt);   \/\/ if dialog isn't up, then update the camera$/;"	p	language:C++	file:
frameRenderingQueued	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    mTrayMgr->frameRenderingQueued(evt);$/;"	p	language:C++	file:
frameRenderingQueued	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^bool BaseApplication::frameRenderingQueued(const Ogre::FrameEvent& evt)$/;"	f	language:C++	class:BaseApplication
frameRenderingQueued	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual bool frameRenderingQueued(const Ogre::FrameEvent& evt);$/;"	p	language:C++	class:BaseApplication
frameRenderingQueued	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^        mCameraMan->frameRenderingQueued(evt);   \/\/ if dialog isn't up, then update the camera$/;"	p	language:C++	file:
frameRenderingQueued	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    mTrayMgr->frameRenderingQueued(evt);$/;"	p	language:C++	file:
frameRenderingQueued	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^bool BaseApplication::frameRenderingQueued(const Ogre::FrameEvent& evt)$/;"	f	language:C++	class:BaseApplication
frameRenderingQueued	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^        mCameraMan->frameRenderingQueued(evt);   \/\/ if dialog isn't up, then update the camera$/;"	p	language:C++	file:
frameRenderingQueued	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    mTrayMgr->frameRenderingQueued(evt);$/;"	p	language:C++	file:
frameRenderingQueued	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^bool BaseApplication::frameRenderingQueued(const Ogre::FrameEvent& evt)$/;"	f	language:C++	class:BaseApplication
frameRenderingQueued	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^        mCameraMan->frameRenderingQueued(evt);   \/\/ if dialog isn't up, then update the camera$/;"	p	language:C++	file:
frameRenderingQueued	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    mTrayMgr->frameRenderingQueued(evt);$/;"	p	language:C++	file:
frameRenderingQueued	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^bool BaseApplication::frameRenderingQueued(const Ogre::FrameEvent& evt)$/;"	f	language:C++	class:BaseApplication
frames	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Frame frames[MAXNF];$/;"	m	language:C++	class:WmrModel
frames	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrde/src/test.cpp	/^    const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
frames	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	const Frame* frames = mdl.get_frames();$/;"	l	language:C++
fromSpatialInertia	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^void fromSpatialInertia(const Mat6b Is, Real m, Vec3 c, Mat3 I);$/;"	p	language:C++
front	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const int front = 0;$/;"	l	language:C++
front	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const int front = 0;$/;"	l	language:C++
front	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const int front = 0;$/;"	l	language:C++
front	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const int front = 0;$/;"	l	language:C++
front	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const int front = 0;$/;"	l	language:C++
front	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const int front = 0;$/;"	l	language:C++
fs	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	Real fs;$/;"	l	language:C++
fvp	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Vec6b fvp[WmrModel::MAXNF]; \/\/force$/;"	l	language:C++
g:EasyMotion_do_mapping	/home/rpradeep/.vimrc	/^let g:EasyMotion_do_mapping = 0 " Disable default mappings$/;"	v	language:Vim
g:EasyMotion_smartcase	/home/rpradeep/.vimrc	/^let g:EasyMotion_smartcase = 1$/;"	v	language:Vim
g:easytags_dynamic_files	/home/rpradeep/.vimrc	/^let g:easytags_dynamic_files = 1$/;"	v	language:Vim
g:easytags_file	/home/rpradeep/.vimrc	/^let g:easytags_file = '~\/.vim\/tags'$/;"	v	language:Vim
g:easytags_opts	/home/rpradeep/.vimrc	/^let g:easytags_opts = ['--c++-kinds=+cdefglmnpstuvx']$/;"	v	language:Vim
g:mapleader	/home/rpradeep/.vimrc	/^let g:mapleader = ","$/;"	v	language:Vim
g:UltiSnipsExpandTrigger	/home/rpradeep/.vimrc	/^let g:UltiSnipsExpandTrigger="<tab>"$/;"	v	language:Vim
g:UltiSnipsJumpBackwardTrigger	/home/rpradeep/.vimrc	/^let g:UltiSnipsJumpBackwardTrigger="<s-tab>"$/;"	v	language:Vim
g:UltiSnipsJumpForwardTrigger	/home/rpradeep/.vimrc	/^let g:UltiSnipsJumpForwardTrigger="<tab>"$/;"	v	language:Vim
g:ycm_confirm_extra_conf	/home/rpradeep/.vimrc	/^let g:ycm_confirm_extra_conf = 0$/;"	v	language:Vim
g:ycm_path_to_python_interpreter	/home/rpradeep/.vimrc	/^let g:ycm_path_to_python_interpreter="\/usr\/bin\/python"$/;"	v	language:Vim
gamma_l	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real omega, gamma_l, gamma_r, vbl, vbr, vfl, vfr;$/;"	l	language:C++
gamma_r	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real omega, gamma_l, gamma_r, vbl, vbr, vfl, vfr;$/;"	l	language:C++
gaussian	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^    inline double gaussian ( const double x, const double s ) const;$/;"	p	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
gaussian	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^double DynamicObstacleCostEvaluator::gaussian ( const double x, const double s ) const$/;"	f	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
get	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^            std::cin.get();$/;"	p	language:C++	file:
get	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    insertVertex_ ( boost::get<0> ( ind ),boost::get<1> ( ind ),boost::get<2> ( ind ), nodeId );$/;"	p	language:C++	class:boost	file:
get	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    insertVertex_ ( boost::get<0> ( ind ),boost::get<1> ( ind ),boost::get<2> ( ind ), nodeId );$/;"	p	language:C++	class:boost	file:
get	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    insertVertex_ ( boost::get<0> ( ind ),boost::get<1> ( ind ),boost::get<2> ( ind ), nodeId );$/;"	p	language:C++	file:
getClosestWayPoint	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    std::list<KFTSolutionElement>::iterator getClosestWayPoint() const;$/;"	p	language:C++	class:dad_local_planner::PurePursuitController
getClosestWayPoint	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^std::list<KFTSolutionElement>::iterator PurePursuitController::getClosestWayPoint() const$/;"	f	language:C++	class:PurePursuitController
getColor	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	void getColor(int part_no, int idx, T& R, T& G, T& B) {$/;"	f	language:C++	class:VrmlData
getCumulativeDistance	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^double WaypointPath::getCumulativeDistance ( int index ) const$/;"	f	language:C++	class:WaypointPath
getDistanceData	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    refTrajPtr_->getDistanceData ( pathPosition,distFromPath,refVelocity,newPoint,minIndex,maxIndex );$/;"	p	language:C++	file:
getDistanceData	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^void WaypointPath::getDistanceData ( double& cumulativeDistance, double& distanceFromPath, double& referenceVelocity, const Eigen::Vector2d& point, const int minIndex, const int maxIndex ) const$/;"	f	language:C++	class:WaypointPath
getElapsedTime	/home/rpradeep/Desktop/kft/include/TrajectoryPlanner.h	/^    int getElapsedTime() const$/;"	f	language:C++	class:dad_local_planner::Timer
getElement	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^    inline KFTSolutionElement getElement(const int index) const$/;"	f	language:C++	class:KFTSolution
getEndIter	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    inline std::list<KFTSolutionElement>::const_iterator getEndIter() const$/;"	f	language:C++	class:TrajectoryQueue
getExecuteEndIter	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    inline std::list<KFTSolutionElement>::iterator getExecuteEndIter() const$/;"	f	language:C++	class:TrajectoryQueue
getExecuteStartIter	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    inline std::list<KFTSolutionElement>::iterator getExecuteStartIter() const$/;"	f	language:C++	class:TrajectoryQueue
getFeasibleMotionPrimitiveIndexSet	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    mpManager_.getFeasibleMotionPrimitiveIndexSet ( mpIndexSet, currentVelocity, -100000 );$/;"	p	language:C++	file:
getFeasibleMotionPrimitiveIndexSet	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^void MotionPrimitiveManager::getFeasibleMotionPrimitiveIndexSet ( std::vector<int>& mpIndexSet ,$/;"	f	language:C++	class:MotionPrimitiveManager
getGoalPosition	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    void getGoalPosition(double& x,double& y) const;$/;"	p	language:C++	class:dad_local_planner::PurePursuitController
getGoalPosition	/home/rpradeep/Desktop/kft/src/main.cpp	/^        ppc.getGoalPosition(xx,yy);$/;"	p	language:C++	file:
getGoalPosition	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^void PurePursuitController::getGoalPosition(double& x,double& y) const$/;"	f	language:C++	class:PurePursuitController
getGoodMergePoint	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    std::list<KFTSolutionElement>::iterator getGoodMergePoint(std::list<KFTSolutionElement>::iterator closestWayPoint) const;$/;"	p	language:C++	class:dad_local_planner::PurePursuitController
getIndexFromTime	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^int ReferencePositionProfile::getIndexFromTime ( const double time ) const$/;"	f	language:C++	class:ReferencePositionProfile
getIndexOfCumulativeDistance	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^inline int WaypointPath::getIndexOfCumulativeDistance( const double cumulativeDistance ) const$/;"	f	language:C++	class:WaypointPath
getInstance	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    static SimInterface* getInstance()$/;"	f	language:C++	class:SimInterface
getInterpolated	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    interpPositionVectorTime.getInterpolated($/;"	p	language:C++	file:
getKReplanStartIter	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    inline std::list<KFTSolutionElement>::iterator getKReplanStartIter() const$/;"	f	language:C++	class:TrajectoryQueue
getLastCumulativeDistance	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^double WaypointPath::getLastCumulativeDistance() const$/;"	f	language:C++	class:WaypointPath
getLastHeading	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    inline double getLastHeading() const$/;"	f	language:C++	class:SimInterface
getLastHeading	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    inline double getLastHeading() const$/;"	f	language:C++	class:SimInterface
getLastPoint	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^const Eigen::Vector2d& WaypointPath::getLastPoint() const$/;"	f	language:C++	class:WaypointPath
getLastPositionX	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    inline double getLastPositionX() const$/;"	f	language:C++	class:SimInterface
getLastPositionX	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    inline double getLastPositionX() const$/;"	f	language:C++	class:SimInterface
getLastPositionY	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    inline double getLastPositionY() const$/;"	f	language:C++	class:SimInterface
getLastPositionY	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    inline double getLastPositionY() const$/;"	f	language:C++	class:SimInterface
getLastPositionZ	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    inline double getLastPositionZ() const$/;"	f	language:C++	class:SimInterface
getLastPositionZ	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    inline double getLastPositionZ() const$/;"	f	language:C++	class:SimInterface
getLastReferenceKinematicPlan	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    inline const KFTSolution& getLastReferenceKinematicPlan() { return mLastReferenceKinematicPlan; };$/;"	f	language:C++	class:TrajectoryQueue
getLastSpeed	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    inline double getLastSpeed() const$/;"	f	language:C++	class:SimInterface
getLastSpeed	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    inline double getLastSpeed() const$/;"	f	language:C++	class:SimInterface
getLastSpeedCommand	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    inline double getLastSpeedCommand() const$/;"	f	language:C++	class:SimInterface
getLastSpeedCommand	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    inline double getLastSpeedCommand() const$/;"	f	language:C++	class:SimInterface
getLastTurnRadiusCommand	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    inline double getLastTurnRadiusCommand() const$/;"	f	language:C++	class:SimInterface
getLastTurnRadiusCommand	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    inline double getLastTurnRadiusCommand() const$/;"	f	language:C++	class:SimInterface
getline	/home/rpradeep/Desktop/kft/src/wmrde/surface/GridSurf.cpp	/^			std::getline (file, value, ','); lowerlim[i] = (Real) atof(value.c_str());$/;"	p	language:C++	class:std	file:
getline	/home/rpradeep/Desktop/kft/src/wmrde/surface/GridSurf.cpp	/^			std::getline (file, value, ','); n[i] = atoi(value.c_str());$/;"	p	language:C++	class:std	file:
getline	/home/rpradeep/Desktop/kft/src/wmrde/surface/GridSurf.cpp	/^			std::getline (file, value, ','); upperlim[i] = (Real) atof(value.c_str());$/;"	p	language:C++	class:std	file:
getline	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^					std::getline(file, tmp, ']');$/;"	p	language:C++	class:VrmlData::std
getline	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^					std::getline(file, tmp, ']');$/;"	p	language:C++	class:VrmlData::std
getline	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^					std::getline(file, tmp, ']');$/;"	p	language:C++	class:VrmlData::std
getline	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^					std::getline(file, tmp, ']');$/;"	p	language:C++	class:VrmlData::std
getline	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^					std::getline(file, tmp, ']');$/;"	p	language:C++	class:VrmlData::std
getline	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^					std::getline(file, tmp, ']');$/;"	p	language:C++	class:VrmlData::std
getline	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^				std::getline(file, tmp, '\\n');$/;"	p	language:C++	class:VrmlData::std
getLookAheadAngle	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    double getLookAheadAngle() const;$/;"	p	language:C++	class:dad_local_planner::PurePursuitController
getLookAheadDistance	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    double getLookAheadDistance() const;$/;"	p	language:C++	class:dad_local_planner::PurePursuitController
getMaxDistanceOneMP	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^double MotionPrimitiveManager::getMaxDistanceOneMP() const$/;"	f	language:C++	class:MotionPrimitiveManager
getMetrics	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    rw->getMetrics(width, height, depth, left, top);$/;"	p	language:C++	file:
getMetrics	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    rw->getMetrics(width, height, depth, left, top);$/;"	p	language:C++	file:
getMetrics	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    rw->getMetrics(width, height, depth, left, top);$/;"	p	language:C++	file:
getMetrics	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    rw->getMetrics(width, height, depth, left, top);$/;"	p	language:C++	file:
getMotionPrimitive	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^const MotionPrimitive& MotionPrimitiveManager::getMotionPrimitive ( const int index ) const$/;"	f	language:C++	class:MotionPrimitiveManager
getMotionPrimitiveInfo	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^const MotionPrimitiveInfo MotionPrimitiveManager::getMotionPrimitiveInfo ( const int index ) const$/;"	f	language:C++	class:MotionPrimitiveManager
getNodeIdVectorAt	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^const std::vector<NodeIdType>& SpatialHash::getNodeIdVectorAt ( double x, double y, double th ) const$/;"	f	language:C++	class:SpatialHash
getNormal	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                        vrml.getNormal(part_no, normal_idx_1[v1 + v2*nv],N1[0],N1[1],N1[2]);$/;"	p	language:C++	file:
getNormal	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                        vrml.getNormal(part_no, normal_idx_2[v1 + v2*nv],N2[0],N2[1],N2[2]);$/;"	p	language:C++	file:
getNormal	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	void getNormal(int part_no, int idx, T& nx, T& ny, T& nz) {$/;"	f	language:C++	class:VrmlData
getNormal	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                        vrml.getNormal(part_no, normal_idx_1[v1 + v2*nv],N1[0],N1[1],N1[2]);$/;"	p	language:C++	file:
getNormal	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                        vrml.getNormal(part_no, normal_idx_2[v1 + v2*nv],N2[0],N2[1],N2[2]);$/;"	p	language:C++	file:
getNormal	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^						vrml.getNormal(part_no, normal_idx_1[v1 + v2*nv],N1[0],N1[1],N1[2]);$/;"	p	language:C++	file:
getNormal	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^						vrml.getNormal(part_no, normal_idx_2[v1 + v2*nv],N2[0],N2[1],N2[2]);$/;"	p	language:C++	file:
getNormal	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                        vrml.getNormal(part_no, normal_idx_1[v1 + v2*nv],N1[0],N1[1],N1[2]);$/;"	p	language:C++	file:
getNormal	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                        vrml.getNormal(part_no, normal_idx_2[v1 + v2*nv],N2[0],N2[1],N2[2]);$/;"	p	language:C++	file:
getPoint	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^const Eigen::Vector2d& WaypointPath::getPoint ( int index ) const$/;"	f	language:C++	class:WaypointPath
getPositionAtTime	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^            ob.getPositionAtTime ( obstaclePosition,timeVector[j] );$/;"	p	language:C++	file:
getPositionAtTime	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        ob.getPositionAtTime ( obstaclePosition,t );$/;"	p	language:C++	file:
getPositionVectorOnPath	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        referencePositionProfile_.getPositionVectorOnPath(robotPosition,s.s);$/;"	p	language:C++	file:
getPositionVectorOnPath	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    referencePositionProfile_.getPositionVectorOnPath(robotPosition,childNode.s);$/;"	p	language:C++	file:
getPositionVectorOnPath	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    referencePositionProfile_.getPositionVectorOnPath(robotPosition,s.s);$/;"	p	language:C++	file:
getPositionVectorOnPath	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^void ReferencePositionProfile::getPositionVectorOnPath ( Eigen::Vector2d& interpolatedPosition, const double pathLength) const$/;"	f	language:C++	class:ReferencePositionProfile
getSolution	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    KFTSolution getSolution() const;$/;"	p	language:C++	class:dad_local_planner::DFTPlanner
getSolution	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    inline const KFTSolution& getSolution ( ) const$/;"	f	language:C++	class:dad_local_planner::KFTPlanner
getSolution	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^KFTSolution DFTPlanner::getSolution() const$/;"	f	language:C++	class:DFTPlanner
getSpeed	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^double WaypointPath::getSpeed ( int index ) const$/;"	f	language:C++	class:WaypointPath
getTimeAtFirstTrajectoryElement	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^double TrajectoryBuffer::getTimeAtFirstTrajectoryElement() const$/;"	f	language:C++	class:TrajectoryBuffer
getTimeAtFirstTrajectoryElement	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^double TrajectoryBuffer::getTimeAtFirstTrajectoryElement() const$/;"	f	language:C++	class:TrajectoryBuffer
getTimeAtLastTrajectoryElement	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^double TrajectoryBuffer::getTimeAtLastTrajectoryElement() const$/;"	f	language:C++	class:TrajectoryBuffer
getTimeAtLastTrajectoryElement	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^double TrajectoryBuffer::getTimeAtLastTrajectoryElement() const$/;"	f	language:C++	class:TrajectoryBuffer
getTimeAtStage	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^const double TrajectoryBuffer::getTimeAtStage(const int stage) const$/;"	f	language:C++	class:TrajectoryBuffer
getTimeAtStage	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^const double TrajectoryBuffer::getTimeAtStage(const int stage) const$/;"	f	language:C++	class:TrajectoryBuffer
getTrajectoryElementAt	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^KFTSolutionElement TrajectoryBuffer::getTrajectoryElementAt(const int index)$/;"	f	language:C++	class:TrajectoryBuffer
getTrajectoryElementAt	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^KFTSolutionElement TrajectoryBuffer::getTrajectoryElementAt(const int index)$/;"	f	language:C++	class:TrajectoryBuffer
getTrajectoryElementNearTime	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^bool TrajectoryBuffer::getTrajectoryElementNearTime(double& x,double& y,double&th ,double&v, const double time) const$/;"	f	language:C++	class:TrajectoryBuffer
getTrajectoryElementNearTime	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^bool TrajectoryBuffer::getTrajectoryElementNearTime(double& x,double& y,double&th ,double&v, const double time) const$/;"	f	language:C++	class:TrajectoryBuffer
getTriangleColor	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                vrml.getTriangleColor(part_no,tno,color[0],color[1],color[2]);$/;"	p	language:C++	file:
getTriangleColor	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	void getTriangleColor(int part_no, int tri_no, T& R, T& G, T& B) {$/;"	f	language:C++	class:VrmlData
getTriangleColor	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                vrml.getTriangleColor(part_no,tno,color[0],color[1],color[2]);$/;"	p	language:C++	file:
getTriangleColor	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^				vrml.getTriangleColor(part_no,tno,color[0],color[1],color[2]);$/;"	p	language:C++	file:
getTriangleColor	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                vrml.getTriangleColor(part_no,tno,color[0],color[1],color[2]);$/;"	p	language:C++	file:
getTriangleColorIndex	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	int getTriangleColorIndex(int part_no, int tri_no) {$/;"	f	language:C++	class:VrmlData
getTriangleNormal	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                vrml.getTriangleNormal(part_no,tno,normal[0],normal[1],normal[2]);$/;"	p	language:C++	file:
getTriangleNormal	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	void getTriangleNormal(int part_no, int tri_no, T& nx, T& ny, T& nz) {$/;"	f	language:C++	class:VrmlData
getTriangleNormal	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                vrml.getTriangleNormal(part_no,tno,normal[0],normal[1],normal[2]);$/;"	p	language:C++	file:
getTriangleNormal	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^				vrml.getTriangleNormal(part_no,tno,normal[0],normal[1],normal[2]);$/;"	p	language:C++	file:
getTriangleNormal	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                vrml.getTriangleNormal(part_no,tno,normal[0],normal[1],normal[2]);$/;"	p	language:C++	file:
getTriangleNormalIndex	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	int getTriangleNormalIndex(int part_no, int tri_no) { return normal_idx[part_no][tri_no*4+0]; }$/;"	f	language:C++	class:VrmlData
getTriangleVertex	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                    vrml.getTriangleVertex(part_no,tno,vno,pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
getTriangleVertex	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	void getTriangleVertex(int part_no, int tri_no, int vert_no, T& x, T& y, T& z) {$/;"	f	language:C++	class:VrmlData
getTriangleVertex	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                    vrml.getTriangleVertex(part_no,tno,vno,pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
getTriangleVertex	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^					vrml.getTriangleVertex(part_no,tno,vno,pos[0],pos[1],pos[2]); $/;"	p	language:C++	file:
getTriangleVertex	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                    vrml.getTriangleVertex(part_no,tno,vno,pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
getTriangleVertexIndex	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	int getTriangleVertexIndex(int part_no, int tri_no, int vert_no) { return coord_idx[part_no][tri_no*4 + vert_no]; }$/;"	f	language:C++	class:VrmlData
getVertex	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                vrml.getVertex(part_no, evert_idx_1[edge_no], pos[0], pos[1], pos[2]);$/;"	p	language:C++	file:
getVertex	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                vrml.getVertex(part_no, evert_idx_2[edge_no], pos[0], pos[1], pos[2]);$/;"	p	language:C++	file:
getVertex	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	void getVertex(int part_no, int idx, T& x, T& y, T & z) {$/;"	f	language:C++	class:VrmlData
getVertex	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                vrml.getVertex(part_no, evert_idx_1[edge_no], pos[0], pos[1], pos[2]);$/;"	p	language:C++	file:
getVertex	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                vrml.getVertex(part_no, evert_idx_2[edge_no], pos[0], pos[1], pos[2]);$/;"	p	language:C++	file:
getVertex	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^				vrml.getVertex(part_no, evert_idx_1[edge_no], pos[0], pos[1], pos[2]);$/;"	p	language:C++	file:
getVertex	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^				vrml.getVertex(part_no, evert_idx_2[edge_no], pos[0], pos[1], pos[2]);$/;"	p	language:C++	file:
getVertex	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                vrml.getVertex(part_no, evert_idx_1[edge_no], pos[0], pos[1], pos[2]);$/;"	p	language:C++	file:
getVertex	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                vrml.getVertex(part_no, evert_idx_2[edge_no], pos[0], pos[1], pos[2]);$/;"	p	language:C++	file:
getVertexCountAt	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^int SpatialHash::getVertexCountAt ( const PoseSpaceIndex ind ) const$/;"	f	language:C++	class:SpatialHash
getVertexCountAt_	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^int SpatialHash::getVertexCountAt_ ( const PoseSpaceIndexType binX,const PoseSpaceIndexType binY,const PoseSpaceIndexType binTH ) const$/;"	f	language:C++	class:SpatialHash
getWindowIndex	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    refTrajPtr_->getWindowIndex ( minIndex,maxIndex,parentNode.pathPosition,parentNode.pathPosition + lookAhead_ ); \/\/ SEARCH_PERF$/;"	p	language:C++	file:
getWindowIndex	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^void WaypointPath::getWindowIndex ( int& minIndex, int& maxIndex, const double minDist, const double maxDist ) const$/;"	f	language:C++	class:WaypointPath
get_actframeinds	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	const int* get_actframeinds() const { return actframeinds; }$/;"	f	language:C++	class:WmrModel
get_angvel	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void get_angvel(const int idx, Vec3 angvel) const;$/;"	p	language:C++	class:WmrModelODE
get_angvel_local	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void get_angvel_local(const int idx, Vec3 angvel) const;$/;"	p	language:C++	class:WmrModelODE
get_body	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	const dBodyID* get_body() const { return body; }$/;"	f	language:C++	class:WmrModelODE
get_cm	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	const Real* get_cm() const { return cm; }$/;"	f	language:C++	class:Frame
get_contactgroup	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	const dJointGroupID get_contactgroup() const { return contactgroup; }$/;"	f	language:C++	class:WmrModelODE
get_dSurfaceParameters	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	dSurfaceParameters* get_dSurfaceParameters() { return &contact.surface; }$/;"	f	language:C++	class:WmrModelODE
get_dx	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	const Real get_dx() const { return d[0]; }$/;"	f	language:C++	class:GridSurf
get_dy	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	const Real get_dy() const { return d[1]; }$/;"	f	language:C++	class:GridSurf
get_frameptr	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	const Frame* get_frameptr(const int fi) const { return frames+fi; }$/;"	f	language:C++	class:WmrModel
get_frames	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	const Frame* get_frames() const { return frames; }$/;"	f	language:C++	class:WmrModel
get_HT	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void get_HT(const int idx, HomogeneousTransform HT) const;$/;"	p	language:C++	class:WmrModelODE
get_I	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	const Real* get_I() const { return I; }$/;"	f	language:C++	class:Frame
get_indices	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	const int* get_indices() const { return indices; }$/;"	f	language:C++	class:TriMeshSurf
get_ineq	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	void get_ineq(const Vec3 v0, const Vec3 v1, Vec3 lec);$/;"	p	language:C++	class:TriMeshSurf
get_Is	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	const Real* get_Is() const { return Is; }$/;"	f	language:C++	class:Frame
get_joint	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	const dJointID* get_joint() const { return joint; }$/;"	f	language:C++	class:WmrModelODE
get_jointdisp	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	Real get_jointdisp(const int idx) const;$/;"	p	language:C++	class:WmrModelODE
get_jointrate	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	Real get_jointrate(const int idx) const;$/;"	p	language:C++	class:WmrModelODE
get_loc	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	int get_loc(const Vec3 pt);$/;"	p	language:C++	class:GridSurf
get_loc	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	int get_loc(const Vec3 pt);$/;"	p	language:C++	class:TriMeshSurf
get_lowerlimx	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	const Real get_lowerlimx() const { return lowerlim[0]; }$/;"	f	language:C++	class:GridSurf
get_lowerlimy	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	const Real get_lowerlimy() const { return lowerlim[1]; }$/;"	f	language:C++	class:GridSurf
get_mass	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	const Real get_mass() const { return mass; }$/;"	f	language:C++	class:Frame
get_mPause	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^	bool get_mPause(void) { return mPause; } \/\/added by Neal$/;"	f	language:C++	class:BaseApplication
get_na	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	const int get_na() const { return na; }$/;"	f	language:C++	class:WmrModel
get_nb	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	const int get_nb() const { return nb; }$/;"	f	language:C++	class:WmrModelODE
get_nf	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	const int get_nf() const { return nf; }$/;"	f	language:C++	class:WmrModel
get_njc	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	const int get_njc() const { return njc; }$/;"	f	language:C++	class:WmrModel
get_nl	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	const int get_nl() const { return nl; }$/;"	f	language:C++	class:WmrAnimation
get_nl	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	const int get_nl() const { return nl; }$/;"	f	language:C++	class:WmrAnimation
get_nl	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	const int get_nl() const { return nl; }$/;"	f	language:C++	class:WmrAnimation
get_nn	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	const int get_nn() const { return nn; }$/;"	f	language:C++	class:WmrAnimation
get_nn	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	const int get_nn() const { return nn; }$/;"	f	language:C++	class:WmrAnimation
get_nn	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	const int get_nn() const { return nn; }$/;"	f	language:C++	class:WmrAnimation
get_node	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	Ogre::SceneNode* get_node(const int index) const { return nodes[index]; }$/;"	f	language:C++	class:WmrAnimation
get_node	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	Ogre::SceneNode* get_node(const int index) const { return nodes[index]; }$/;"	f	language:C++	class:WmrAnimation
get_node	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	Ogre::SceneNode* get_node(const int index) const { return nodes[index]; }$/;"	f	language:C++	class:WmrAnimation
get_node	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    Ogre::SceneNode* get_node(const int index) const$/;"	f	language:C++	class:WMRSim
get_node	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^		addEntityVrml(get_node(wheelframeinds[wno]), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
get_node	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	addEntityVrml(get_node(i), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
get_node	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	addEntityVrml(get_node(i), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
get_node	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	addEntityVrml(get_node(i), filename, -1, draw_faces, draw_edges);$/;"	p	language:C++	file:
get_np	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	int get_np() const { return 1; }$/;"	f	language:C++	class:WheelContactGeom
get_np	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	int get_np() const { return np; }$/;"	f	language:C++	class:TrackContactGeom
get_np	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	virtual int get_np() const = 0; \/\/get number of contact points$/;"	p	language:C++	class:ContactGeom
get_nt	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	int get_nt() const { return nt; }$/;"	f	language:C++	class:TriMeshSurf
get_nt	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	const int get_nt() const { return nt; }$/;"	f	language:C++	class:WmrModel
get_nv	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	int get_nv() const { return nv; }$/;"	f	language:C++	class:TriMeshSurf
get_nw	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	const int get_nw() const { return nw; }$/;"	f	language:C++	class:WmrModel
get_nx	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	const int get_nx() const { return n[0]; }$/;"	f	language:C++	class:GridSurf
get_ny	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	const int get_ny() const { return n[1]; }$/;"	f	language:C++	class:GridSurf
get_pec	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	const Real* get_pec() const { return pec; }$/;"	f	language:C++	class:TriMeshSurf
get_pos	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void get_pos(const int idx, Vec3 pos) const;$/;"	p	language:C++	class:WmrModelODE
get_rot	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void get_rot(const int idx, Mat3 R) const;$/;"	p	language:C++	class:WmrModelODE
get_sprocketframeinds	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	const int* get_sprocketframeinds() const { return sprocketframeinds; }$/;"	f	language:C++	class:WmrModel
get_vel	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void get_vel(const int idx, Vec3 vel) const;$/;"	p	language:C++	class:WmrModelODE
get_vel_local	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void get_vel_local(const int idx, Vec3 vel) const;$/;"	p	language:C++	class:WmrModelODE
get_vertices	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	const Vec3* get_vertices() const { return vertices; }$/;"	f	language:C++	class:TriMeshSurf
get_wheelframeinds	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	const int* get_wheelframeinds() const { return wheelframeinds; }$/;"	f	language:C++	class:WmrModel
get_world	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	const dWorldID get_world() const { return world; }$/;"	f	language:C++	class:WmrModelODE
get_Z	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	Real* get_Z() { return Z; }$/;"	f	language:C++	class:GridSurf
globalReferenceTime_	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^    double globalReferenceTime_;$/;"	m	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
go	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^void BaseApplication::go(void)$/;"	f	language:C++	class:BaseApplication
go	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual void go(void);$/;"	p	language:C++	class:BaseApplication
go	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^void BaseApplication::go(void)$/;"	f	language:C++	class:BaseApplication
go	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	virtual void go(void); \/\/override go() in BaseApplication$/;"	p	language:C++	class:WmrAnimation
go	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^void BaseApplication::go(void)$/;"	f	language:C++	class:BaseApplication
go	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^        app.go();$/;"	p	language:C++	file:
go	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^        app.go();$/;"	p	language:C++	file:
go	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^void BaseApplication::go(void)$/;"	f	language:C++	class:BaseApplication
go	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^void WmrAnimation::go(void) {$/;"	f	language:C++	class:WmrAnimation
go	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^void WMRSim::go(void) {$/;"	f	language:C++	class:WMRSim
goalDist	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^int goalDist;$/;"	v	language:C++
goalHeading	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        const double goalHeading = std::atan2(goalVector[1],goalVector[0]);$/;"	l	language:C++
goalIndex	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^int goalIndex;$/;"	v	language:C++
goalNode_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    Node goalNode_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
goalPosition	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        const Eigen::Vector2d goalPosition = mCurrentGoalPoint->positionVector;$/;"	l	language:C++
goalTolerance	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double goalTolerance;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
goalTolerance	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double goalTolerance;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
goalVector	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        const Eigen::Vector2d goalVector = goalPosition - currentPosition;$/;"	l	language:C++
goalX	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    const double goalX = pathX[goalIndex];$/;"	l	language:C++
goalY	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    const double goalY = pathY[goalIndex];$/;"	l	language:C++
GOAL_TOLERANCE	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^    const double GOAL_TOLERANCE = 1.0;$/;"	l	language:C++
grad	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real grad[MAXNV]; \/\/ 1 x ninpt, dcost\/dx$/;"	l	language:C++
grad	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real grad[MAXNS];$/;"	l	language:C++
gradp	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^			Real gradp = dotVec(ninpt,grad,p);$/;"	l	language:C++
gradp	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		Real gradp = dotVec(nfree,grad,p);$/;"	l	language:C++
grav	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real grav;				\/\/scalar acceleration of gravity$/;"	m	language:C++	class:WmrModel
grid	/home/rpradeep/Desktop/wmrde/include/wmrde/demo/terrains.h	/^void grid(SurfaceVector& surfaces, const std::string FileName);$/;"	p	language:C++
grid	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^void grid(SurfaceVector& surfaces, const std::string FileName) {$/;"	f	language:C++
GridSurf	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	GridSurf() {} \/\/constructor$/;"	f	language:C++	class:GridSurf
GridSurf	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^class GridSurf : public Surface {$/;"	c	language:C++
grid_surf	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    GridSurf* grid_surf = dynamic_cast<GridSurf*>(surf);$/;"	l	language:C++
grid_surf	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    GridSurf* grid_surf = dynamic_cast<GridSurf*>(surf);$/;"	l	language:C++
grid_surf	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	GridSurf* grid_surf = dynamic_cast<GridSurf*>(surf);$/;"	l	language:C++
grid_surf	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    GridSurf* grid_surf = dynamic_cast<GridSurf*>(surf);$/;"	l	language:C++
groundEntity	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^  Ogre::Entity* groundEntity = mSceneMgr->createEntity("ground");$/;"	l	language:C++
gv	/home/rpradeep/.vimrc	/^vnoremap <silent> gv :call VisualSelection('gv')<CR>$/;"	m	language:Vim
h	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	Real h;		\/\/height$/;"	l	language:C++
H	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real H[MAXNV*MAXNV];$/;"	l	language:C++
HandC	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^void HandC(const WmrModel& mdl, const HomogeneousTransform HT_parent[], const Real qvel[], \/\/input$/;"	p	language:C++
HandC	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^void HandC(const WmrModel& mdl, const HomogeneousTransform HT_parent[], const Real qvel[], \/\/input$/;"	f	language:C++
handle	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^    FirstPersonManipulator::handle(ea, aa);$/;"	p	language:C++	class:FirstPersonManipulator	file:
handle	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^bool FirstPersonController::handle(const osgGA::GUIEventAdapter &ea, osgGA::GUIActionAdapter &aa)$/;"	f	language:C++	class:FirstPersonController
hasCollision	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    bool hasCollision;$/;"	m	language:C++	class:dad_local_planner::STNode
hasCollision	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        bool hasCollision = performCollisionCheckAtTime(tmpCost,Eigen::Vector2d(robotTrajectory.x[j],robotTrajectory.y[j]), robotTrajectory.t[j]);$/;"	l	language:C++
HasPaste	/home/rpradeep/.vimrc	/^function! HasPaste()$/;"	f	language:Vim
Hb	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const Real Hb = .5; \/\/height of body$/;"	l	language:C++
Hb	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real Hb = .16;		\/\/height of body$/;"	l	language:C++
Hb	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const Real Hb = .5; \/\/height of body$/;"	l	language:C++
Hb	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const Real Hb = .5; \/\/height of body$/;"	l	language:C++
hCost	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    double hCost;$/;"	m	language:C++	class:dad_local_planner::STNode
hCost	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    double hCost = 0;$/;"	l	language:C++
hCostSimple	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    double hCostSimple = config_.detourCostFactor * ( childNode.avgDistFromPath - config_.tubeSize ) \/ (config_.velMaxFwd + 0.01);$/;"	l	language:C++
height	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    unsigned int width, height, depth;$/;"	l	language:C++
height	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    unsigned int width, height, depth;$/;"	l	language:C++
height	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    unsigned int width, height, depth;$/;"	l	language:C++
height	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    unsigned int width, height, depth;$/;"	l	language:C++
Hess	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		Real Hess[MAXNV*MAXNV]; \/\/ninpt x ninpt$/;"	l	language:C++
Hess	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real Hess[MAXNS*MAXNS];$/;"	l	language:C++
HessL	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		Real HessL[MAXNV*MAXNV]; \/\/lower triangular$/;"	l	language:C++
HessL	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real HessL[MAXNS*MAXNS];$/;"	l	language:C++
hide	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^            mDetailsPanel->hide();$/;"	p	language:C++	file:
hide	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    mDetailsPanel->hide();$/;"	p	language:C++	file:
hide	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^            mDetailsPanel->hide();$/;"	p	language:C++	file:
hide	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    mDetailsPanel->hide();$/;"	p	language:C++	file:
hide	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^            mDetailsPanel->hide();$/;"	p	language:C++	file:
hide	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    mDetailsPanel->hide();$/;"	p	language:C++	file:
hide	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^            mDetailsPanel->hide();$/;"	p	language:C++	file:
hide	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    mDetailsPanel->hide();$/;"	p	language:C++	file:
hideCursor	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    mTrayMgr->hideCursor();$/;"	p	language:C++	file:
hideCursor	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    mTrayMgr->hideCursor();$/;"	p	language:C++	file:
hideCursor	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    mTrayMgr->hideCursor();$/;"	p	language:C++	file:
hideCursor	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    mTrayMgr->hideCursor();$/;"	p	language:C++	file:
holonomicJointConstraints	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void (*holonomicJointConstraints) ( const WmrModel& mdl, const Real jd[], const Real jr[], \/\/inputs$/;"	m	language:C++	class:WmrModel
holonomicJointConstraints	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		mdl.holonomicJointConstraints(mdl, state0+SI_JD, qvel0+VI_JR, \/\/inputs$/;"	p	language:C++	file:
holonomicJointConstraints	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		mdl.holonomicJointConstraints(mdl, state+SI_JD, 0, $/;"	p	language:C++	file:
HomogeneousTransform	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^typedef Real HomogeneousTransform[4*SIZEVEC3];$/;"	t	language:C++
HT	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	HomogeneousTransform HT;$/;"	l	language:C++
HT	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	HomogeneousTransform HT;$/;"	l	language:C++
HT	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	HomogeneousTransform HT;$/;"	l	language:C++
HT	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	HomogeneousTransform HT;$/;"	l	language:C++
HT	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	HomogeneousTransform HT;$/;"	l	language:C++
HTContactToTrack	/home/rpradeep/Desktop/wmrde/include/wmrde/collision.h	/^int HTContactToTrack(const Real rad, const Real rad2, const Real L, const int npflat, const bool sides[], HomogeneousTransform HT_track[]);$/;"	p	language:C++
HTContactToTrack	/home/rpradeep/Desktop/wmrsim/include/wmrde/collision.h	/^int HTContactToTrack(const Real rad, const Real rad2, const Real L, const int npflat, const bool sides[], HomogeneousTransform HT_track[]);$/;"	p	language:C++
HTContactToWheel	/home/rpradeep/Desktop/wmrde/include/wmrde/collision.h	/^void HTContactToWheel(const Vec3 pt, const Vec3 N, HomogeneousTransform HT_contact_to_wheel);$/;"	p	language:C++
HTContactToWheel	/home/rpradeep/Desktop/wmrsim/include/wmrde/collision.h	/^void HTContactToWheel(const Vec3 pt, const Vec3 N, HomogeneousTransform HT_contact_to_wheel);$/;"	p	language:C++
HTToPlucker	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^inline void HTToPlucker(const HomogeneousTransform T, Mat6b P) {$/;"	f	language:C++
HTToPose	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	236;"	d	language:C++
HT_contact_to_world	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^			HomogeneousTransform HT_contact_to_world;$/;"	l	language:C++
HT_parent	/home/rpradeep/Desktop/kft/src/main.cpp	/^    HomogeneousTransform HT_parent[WmrModel::MAXNF];$/;"	l	language:C++
HT_parent	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    HomogeneousTransform HT_parent[WmrModel::MAXNF];$/;"	l	language:C++
HT_parent	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	HomogeneousTransform HT_parent[WmrModel::MAXNF + WmrModel::MAXNW];$/;"	l	language:C++
HT_parent	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    HomogeneousTransform HT_parent[WmrModel::MAXNF];$/;"	l	language:C++
HT_parent	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	HomogeneousTransform HT_parent[WmrModel::MAXNF];$/;"	l	language:C++
HT_parent	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	HomogeneousTransform HT_parent[WmrModel::MAXNF];$/;"	l	language:C++
HT_parent_jd0	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	HomogeneousTransform HT_parent_jd0; \/\/Homogeneous Transform of frame wrt parent if joint displacement=0$/;"	m	language:C++	class:Frame
HT_track	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	HomogeneousTransform HT_track[MAXNP];	\/\/transform from contact to track coords$/;"	m	language:C++	class:TrackContactGeom
HT_track_to_world	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^			HomogeneousTransform HT_track_to_world;$/;"	l	language:C++
HT_track_to_world	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		HomogeneousTransform HT_track_to_world;$/;"	l	language:C++
HT_wheel	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	HomogeneousTransform HT_wheel; \/\/transform from contact to wheel coords$/;"	m	language:C++	class:WheelContactGeom
HT_world	/home/rpradeep/Desktop/kft/src/main.cpp	/^    HomogeneousTransform HT_world[WmrModel::MAXNF];$/;"	l	language:C++
HT_world	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^	HomogeneousTransform HT_world[WmrModel::MAXNF];$/;"	l	language:C++
HT_world	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	HomogeneousTransform HT_world; \/\/transform from contact to world coords$/;"	m	language:C++	class:WheelContactGeom
HT_world	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	HomogeneousTransform HT_world[MAXNP];	\/\/transform from contact to world coords$/;"	m	language:C++	class:TrackContactGeom
HT_world	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	HomogeneousTransform HT_world[WmrModel::MAXNF + WmrModel::MAXNW];$/;"	l	language:C++
HT_world	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	HomogeneousTransform HT_world[WmrModel::MAXNF];$/;"	l	language:C++
HT_world	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^	HomogeneousTransform HT_world[WmrModel::MAXNF];$/;"	l	language:C++
H_	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real H_[6*6];$/;"	l	language:C++
H_init	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	static bool H_init = false; \/\/flag, H is initialized$/;"	l	language:C++	file:
H_prev	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	static Real H_prev[MAXNV*MAXNV]; $/;"	l	language:C++	file:
i	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        const int i = 0;$/;"	l	language:C++
i	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^        int i=0;$/;"	l	language:C++
i	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    int i, j;$/;"	l	language:C++
i	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^        int i=0;$/;"	l	language:C++
i	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^        Ogre::ConfigFile::SettingsMultiMap::iterator i;$/;"	l	language:C++
i	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgreDynamicObstacles.cpp	/^        ss << "dynobs_" << i;$/;"	l	language:C++
I	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Mat3 I; \/\/Inertia$/;"	l	language:C++
i	/home/rpradeep/Desktop/kft/src/wmrde/surface/GridSurf.cpp	/^		int i=0;$/;"	l	language:C++
I	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Mat3 I;				\/\/moment of inertia$/;"	m	language:C++	class:Frame
i	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^        Ogre::ConfigFile::SettingsMultiMap::iterator i;$/;"	l	language:C++
I	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Mat3 I; \/\/moment of inertia$/;"	l	language:C++
i	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	int i;$/;"	l	language:C++
I	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Mat3 I; \/\/Inertia$/;"	l	language:C++
i	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^	int i;$/;"	l	language:C++
i	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	int i = 0;$/;"	l	language:C++
i	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	int i = nf-1;$/;"	l	language:C++
i	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	int i = nf-1;$/;"	l	language:C++
i	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	int i = nf;$/;"	l	language:C++
i	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^        Ogre::ConfigFile::SettingsMultiMap::iterator i;$/;"	l	language:C++
I	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Mat3 I; \/\/Inertia$/;"	l	language:C++
i	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	int i;$/;"	l	language:C++
i	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^        Ogre::ConfigFile::SettingsMultiMap::iterator i;$/;"	l	language:C++
i	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	int i;$/;"	l	language:C++
id	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    int id;$/;"	m	language:C++	class:dad_local_planner::STNode
id	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        NodeIdType id = *it;$/;"	l	language:C++
Id	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	Vec3 Id;$/;"	l	language:C++
Id	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	Vec3 Id;$/;"	l	language:C++
ideal_actuators	/home/rpradeep/Desktop/kft/src/main.cpp	/^    bool ideal_actuators = false;$/;"	l	language:C++
ideal_actuators	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    bool ideal_actuators = false;$/;"	l	language:C++
ideal_actuators	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    bool ideal_actuators = false;$/;"	l	language:C++
ideal_actuators	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	bool ideal_actuators = false;$/;"	l	language:C++
ideal_actuators	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	bool ideal_actuators = false;$/;"	l	language:C++
idx	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^		int idx=0; \/\/in case no color_idx$/;"	l	language:C++
ijToxy	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^void TrajectorySpace::ijToxy ( const int i, const int j , double& x, double& y ) const$/;"	f	language:C++	class:dad_local_planner::TrajectorySpace
incontact	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	bool incontact;$/;"	m	language:C++	class:WheelContactGeom
incontact	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	bool incontact[MAXNP];$/;"	m	language:C++	class:TrackContactGeom
incontact	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	bool incontact[MAXNP];$/;"	l	language:C++
incontact	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	bool incontact[MAXNP]; \/\/concatenated, necessary?$/;"	l	language:C++
incontactinds	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	int incontactinds[MAXNP];$/;"	l	language:C++
incontactinds	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		int incontactinds[ContactGeom::MAXNP];$/;"	l	language:C++
incontactinds	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int incontactinds[MAXNP];$/;"	l	language:C++
ind	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    PoseSpaceIndex ind = poseToIndex ( x,y,th );$/;"	l	language:C++
ind	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    PoseSpaceIndex ind = poseToIndex ( x,y,th );$/;"	l	language:C++
index	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    int index = 0;$/;"	l	language:C++
index	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    const int index = ( std::abs(trajectoryVector_[mid].time - time) < std::abs(trajectoryVector_[upper].time - time) ? mid : upper);$/;"	l	language:C++
index	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    const int index = ( std::abs(trajectoryVector_[mid].time - time) < std::abs(trajectoryVector_[upper].time - time) ? mid : upper);$/;"	l	language:C++
indices	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const int* indices = surf->get_indices();$/;"	l	language:C++
indices	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    int indices[nf][3] = {{0,3,2}, \/\/quad$/;"	l	language:C++
indices	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    int indices[nf][4] = {{0,1,2,3},$/;"	l	language:C++
indices	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	int indices[3*MAXNT];	\/\/3 x nt, 3 indices per triangle$/;"	m	language:C++	class:TriMeshSurf
indices	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const int* indices = surf->get_indices();$/;"	l	language:C++
indices	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    int indices[nf][3] = {{0,3,2}, \/\/quad$/;"	l	language:C++
indices	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    int indices[nf][4] = {{0,1,2,3},$/;"	l	language:C++
indices	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const int* indices = surf->get_indices();$/;"	l	language:C++
indices	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	int indices[nf][3] = {{0,3,2}, \/\/quad$/;"	l	language:C++
indices	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	int indices[nf][4] = {{0,1,2,3}, $/;"	l	language:C++
indices	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const int* indices = surf->get_indices();$/;"	l	language:C++
indices	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    int indices[nf][3] = {{0,3,2}, \/\/quad$/;"	l	language:C++
indices	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    int indices[nf][4] = {{0,1,2,3},$/;"	l	language:C++
inertiaBox	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^void inertiaBox(const Real m, const Real x, const Real y, const Real z, Mat3 I);$/;"	p	language:C++
inertiaBox	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^void inertiaBox(const Real m, const Real x, const Real y, const Real z, Mat3 I) {$/;"	f	language:C++
inertiaCylinder	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^void inertiaCylinder(const Real m, const Real r, const Real h, const int axis, Mat3 I);$/;"	p	language:C++
inertiaCylinder	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^void inertiaCylinder(const Real m, const Real r, const Real h, const int axis, Mat3 I) {$/;"	f	language:C++
INIT	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    enum KSTATUS {PLAN,WAIT, INIT, DONE};$/;"	e	language:C++	enum:KSTATUS	file:
INIT	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    enum KSTATUS {PLAN,WAIT, INIT, DONE};$/;"	e	language:C++	enum:KSTATUS	file:
init	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	static bool init = false; \/\/flag, initialized$/;"	l	language:C++	file:
init	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	static bool init = false; \/\/flag, static variables initialized$/;"	l	language:C++	file:
init	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^    static int init;$/;"	m	language:C++	class:OgreText
init	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^int OgreText::init=0;$/;"	m	language:C++	class:OgreText
init	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^    static int init;$/;"	m	language:C++	class:OgreText
init	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^int OgreText::init=0;$/;"	m	language:C++	class:OgreText
init	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	static bool init = false; \/\/flag, initialized$/;"	l	language:C++	file:
init	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	static bool init = false; \/\/flag, static variables initialized$/;"	l	language:C++	file:
init	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	static bool init = false; \/\/flag, initialized$/;"	l	language:C++	file:
init	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	static bool init = false; \/\/flag, static variables initialized$/;"	l	language:C++	file:
initFrame	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void initFrame(const int fi);$/;"	p	language:C++	class:WmrModel
initFrame	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^void WmrModel::initFrame(const int fi) {$/;"	f	language:C++	class:WmrModel
initialize	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    void initialize (const double s, const double t, const double v, const KFTSolution& kftSolution , const double dt, const bool replan = false, const double sFinal = -1);$/;"	p	language:C++	class:dad_local_planner::DFTPlanner
initialize	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^    void initialize ( const std::string& configFilePath );$/;"	p	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
initialize	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    void initialize(const double x, const double y, const double th, const double v, const double t, const int state, const double prevPlanPathPosition = 0 , const int prevPlanFinalStage = 0);$/;"	p	language:C++	class:dad_local_planner::KFTPlanner
initialize	/home/rpradeep/Desktop/kft/src/main.cpp	/^                dft.initialize(keStart.position,keStart.time,keStart.speed,tq.getLastReferenceKinematicPlan(),0.25,true, keEnd.position);$/;"	p	language:C++	file:
initialize	/home/rpradeep/Desktop/kft/src/main.cpp	/^            kft.initialize(keEnd.positionVector[0],keEnd.positionVector[1],keEnd.angle,1.0,keEnd.time,0,keEnd.position,keEnd.stage); \/\/ x,y,th,v,t,state,prevPathPos,prevStage$/;"	p	language:C++	file:
initialize	/home/rpradeep/Desktop/kft/src/main.cpp	/^    kft.initialize(keEnd.positionVector[0],keEnd.positionVector[1],keEnd.angle,1.0,keEnd.time,0,keEnd.position,keEnd.stage); \/\/ x,y,th,v,t,state,prevPathPos,prevStage$/;"	p	language:C++	file:
initialize	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    referencePositionProfile_.initialize ( inputPositionVector_, inputTime_ , inputPathPosition_.front(), dt_\/5);$/;"	p	language:C++	file:
initialize	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^void DFTPlanner::initialize (const double s, const double t, const double v, const KFTSolution& kftSolution , const double dt, const bool replan , const double sFinal)$/;"	f	language:C++	class:DFTPlanner
initialize	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^void DynamicObstacleCostEvaluator::initialize ( const std::string& configFilePath)$/;"	f	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
initialize	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    tubeCostEvaluator_.initialize ( refWaypointPath_, lookAheadDistance_ , config_.detourCostFactor , config_.tubeSize, config_.skipCostFactor ); \/\/ look ahead is 1.0 ( this has to scale with the motion primitives used ) SEARCH_PERF$/;"	p	language:C++	file:
initialize	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^void KFTPlanner::initialize(const double x, const double y, const double th, const double v, const double t, const int state, const double prevPlanPathPosition, const int prevPlanFinalStage)$/;"	f	language:C++	class:KFTPlanner
initialize	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^    trajSpace_.initialize();$/;"	p	language:C++	file:
initialize	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    interpPositionVectorTime.initialize(positionVectorInput,timeInput);$/;"	p	language:C++	file:
initialize	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^void ReferencePositionProfile::initialize ( const std::vector< Eigen::Vector2d >& positionVectorInput, const std::vector< double >& timeInput, const double initialPosition, const double dt )$/;"	f	language:C++	class:ReferencePositionProfile
initialize	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^void TrajectoryBuffer::initialize(const double startTime )$/;"	f	language:C++	class:TrajectoryBuffer
initialize	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^            kft.initialize(startPositionX,startPositionY,startHeading,startSpeed,startTime,startState);$/;"	p	language:C++	file:
initialize	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^void TrajectorySpace::initialize()$/;"	f	language:C++	class:dad_local_planner::TrajectorySpace
initialize	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^void TubeCostEvaluator::initialize ($/;"	f	language:C++	class:TubeCostEvaluator
initialize	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^void TrajectoryBuffer::initialize(const double startTime )$/;"	f	language:C++	class:TrajectoryBuffer
initialize	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^            kft.initialize(startPositionX,startPositionY,startHeading,startSpeed,startTime,startState);$/;"	p	language:C++	file:
initialize	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^        dft.initialize(ks1,0.25);$/;"	p	language:C++	file:
initialize	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^        dft.initialize(ks1,0.25);$/;"	p	language:C++	file:
initialize	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^        kft.initialize(x,y,th,v,t,0);$/;"	p	language:C++	file:
initializeCumulativeDistances_	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^void WaypointPath::initializeCumulativeDistances_()$/;"	f	language:C++	class:WaypointPath
initializePositionSpeed	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    refWaypointPath_.initializePositionSpeed( refPath, refSpeed );$/;"	p	language:C++	file:
initializePositionSpeed	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^void WaypointPath::initializePositionSpeed( const std::vector< Eigen::Vector2d >& pointList, const std::vector< double >& desiredSpeedList )$/;"	f	language:C++	class:WaypointPath
initParams	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void initParams();$/;"	p	language:C++	class:WmrModelODE
initTerrainContact	/home/rpradeep/Desktop/wmrde/include/wmrde/kinematics.h	/^void initTerrainContact( const WmrModel mdl, const SurfaceVector& surfaces, ContactGeom* contacts, Real state[] ); $/;"	p	language:C++
initTerrainContact	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^void initTerrainContact( const WmrModel mdl, const SurfaceVector& surfaces, ContactGeom* contacts, Real state[] ) {$/;"	f	language:C++
initTerrainContactCost	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	auto initTerrainContactCost = [&] ( const Real x_[] ) mutable -> Real {$/;"	l	language:C++
initTerrainContactGradient	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	auto initTerrainContactGradient = [&] ( Real grad_[] ) mutable {$/;"	l	language:C++
initTrackContactGeom	/home/rpradeep/Desktop/wmrde/include/wmrde/collision.h	/^void initTrackContactGeom(const Real rad, const Real rad2, const Real L, TrackContactGeom& contact);$/;"	p	language:C++
initTrackContactGeom	/home/rpradeep/Desktop/wmrsim/include/wmrde/collision.h	/^void initTrackContactGeom(const Real rad, const Real rad2, const Real L, TrackContactGeom& contact);$/;"	p	language:C++
injectKeyDown	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    mCameraMan->injectKeyDown(arg);$/;"	p	language:C++	file:
injectKeyDown	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    mCameraMan->injectKeyDown(arg);$/;"	p	language:C++	file:
injectKeyDown	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    mCameraMan->injectKeyDown(arg);$/;"	p	language:C++	file:
injectKeyDown	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^    mCameraMan->injectKeyDown(arg);$/;"	p	language:C++	file:
injectKeyDown	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^    mCameraMan->injectKeyDown(arg);$/;"	p	language:C++	file:
injectKeyDown	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    mCameraMan->injectKeyDown(arg);$/;"	p	language:C++	file:
injectKeyDown	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    mCameraMan->injectKeyDown(arg);$/;"	p	language:C++	file:
injectKeyUp	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    mCameraMan->injectKeyUp(arg);$/;"	p	language:C++	file:
injectKeyUp	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    mCameraMan->injectKeyUp(arg);$/;"	p	language:C++	file:
injectKeyUp	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    mCameraMan->injectKeyUp(arg);$/;"	p	language:C++	file:
injectKeyUp	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    mCameraMan->injectKeyUp(arg);$/;"	p	language:C++	file:
inputContext	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^	OgreBites::InputContext inputContext;$/;"	l	language:C++
inputPathPosition_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    std::vector< double > inputPathPosition_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
inputPositionVector_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    std::vector< Eigen::Vector2d > inputPositionVector_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
inputSolutionVector_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    std::vector<KFTSolutionElement> inputSolutionVector_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
inputStage_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    std::vector< int > inputStage_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
inputTimeInterval	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^const float inputTimeInterval = 0.02;$/;"	v	language:C++
inputTime_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    std::vector< double > inputTime_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
insertVertex	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^            spatialHash_.insertVertex ( childNode.x, childNode.y, childNode.th, childNode.id );$/;"	p	language:C++	file:
insertVertex	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^            spatialHash_.insertVertex ( currentNode.x, currentNode.y, currentNode.th, currentNode.id );$/;"	p	language:C++	file:
insertVertex	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^void SpatialHash::insertVertex ( double x,double y, double th, NodeIdType nodeId )$/;"	f	language:C++	class:SpatialHash
insertVertex_	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^void SpatialHash::insertVertex_ ( const PoseSpaceIndexType binX,const PoseSpaceIndexType binY, const PoseSpaceIndexType binTH, const NodeIdType nodeId )$/;"	f	language:C++	class:SpatialHash
int16	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^    typedef short                   int16;$/;"	t	language:C++
int32	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^    typedef long                    int32;$/;"	t	language:C++
int8	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^    typedef char                    int8;$/;"	t	language:C++
interpPositionVectorTime	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    Interpolator<Eigen::Vector2d,double> interpPositionVectorTime;$/;"	l	language:C++
Interp_xn	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	/^inline void Interp_xn ( const int dim, const Real lim[], const Real d[], const Real x[], int I[], Real xn[] ) {$/;"	f	language:C++
interr	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^	Real interr[WmrModel::MAXNA]; \/\/integrated error$/;"	m	language:C++	class:ControllerIO
intom	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	Real intom = .0254;$/;"	l	language:C++
invertHT	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	95;"	d	language:C++
invHTToPlucker	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^inline void invHTToPlucker(const HomogeneousTransform T, Mat6b P) {$/;"	f	language:C++
Is	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Mat6b Is;			\/\/spatial inertia$/;"	m	language:C++	class:Frame
Is	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Mat6b Is[MAXNF]; \/\/spatial inertia$/;"	m	language:C++	class:WmrModel
Is	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^			const Real* Is = frames[fi].get_Is();$/;"	l	language:C++
isactuated	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	bool isactuated;$/;"	m	language:C++	class:Frame
isEmpty	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    inline bool isEmpty() const { return mQueue.empty();}$/;"	f	language:C++	class:TrajectoryQueue
isFinished	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        bool isFinished = sendCommand();$/;"	l	language:C++
isFinished	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^    bool isFinished = false;$/;"	l	language:C++
isfixed	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	bool isfixed;		\/\/if true, keep fixed when initializing terrain contact$/;"	m	language:C++	class:Frame
isfree	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	bool isfree[MAXNS]; \/\/ which elements of state vector are free$/;"	l	language:C++
ishigamiLUTWgc	/home/rpradeep/Desktop/wmrde/include/wmrde/wheelgroundcontact.h	/^void ishigamiLUTWgc( const Real params[], const Vec3 vc, const Real Rw, const Real dz, \/\/inputs$/;"	p	language:C++
ishigamiWgc	/home/rpradeep/Desktop/wmrde/include/wmrde/wheelgroundcontact.h	/^void ishigamiWgc(const Real params[], const Vec3 vc, const Real Rw, const Real dz, \/\/inputs$/;"	p	language:C++
ISHIGAMI_LUT_WGC	/home/rpradeep/Desktop/wmrde/include/wmrde/wheelgroundcontact.h	53;"	d	language:C++
ISHIGAMI_WGC	/home/rpradeep/Desktop/wmrde/include/wmrde/wheelgroundcontact.h	52;"	d	language:C++
issprocket	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	bool issprocket;	\/\/is a sprocket frame (for a track)$/;"	m	language:C++	class:Frame
isValid	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^bool TrajectorySpace::isValid ( const double v, const double k ) const$/;"	f	language:C++	class:dad_local_planner::TrajectorySpace
iswheel	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	bool iswheel;		\/\/is a wheel frame$/;"	m	language:C++	class:Frame
Is_pc	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Mat6b Is_pc; \/\/parent coords$/;"	l	language:C++
Is_subt	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	static Mat6b Is_subt[WmrModel::MAXNF];$/;"	l	language:C++	file:
it	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^    auto it = std::max_element ( mpDatabasePtr_->begin(),$/;"	l	language:C++
items	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    Ogre::StringVector items;$/;"	l	language:C++
items	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    Ogre::StringVector items;$/;"	l	language:C++
items	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    Ogre::StringVector items;$/;"	l	language:C++
items	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    Ogre::StringVector items;$/;"	l	language:C++
iter	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    auto iter = mQueue.begin();$/;"	l	language:C++
iter	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	int iter = 0;$/;"	l	language:C++
iter	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	int iter = 0;$/;"	l	language:C++
iter	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	int iter=0;$/;"	l	language:C++
iter	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int iter;$/;"	l	language:C++
iterationCount_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    int iterationCount_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
j	/home/rpradeep/.vimrc	/^map j gj$/;"	m	language:Vim
j	/home/rpradeep/.vimrc	/^nnoremap j gj$/;"	m	language:Vim
j	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    int i, j;$/;"	l	language:C++
j	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^	int j = (ci\/3)*BLOCK2+(ci%3)*SIZEVEC3; \/\/index of first element of column$/;"	l	language:C++
j	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^	int j = (ci\/3)*BLOCK2+(ci%3)*SIZEVEC3; \/\/index of first element of column$/;"	l	language:C++
Jc	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		Real Jc[WmrModel::MAXNJC*MAXNJ]; \/\/njc x nj$/;"	l	language:C++
Jc	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		Real Jc[WmrModel::MAXNJC*MAXNJ];$/;"	l	language:C++
Jc	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real Jc[WmrModel::MAXNJC*(WmrModel::MAXNF-1)];$/;"	l	language:C++
jk	/home/rpradeep/.vimrc	/^inoremap jk <esc>$/;"	m	language:Vim
join	/home/rpradeep/Desktop/kft/src/main.cpp	/^    simThread.join();$/;"	p	language:C++	file:
joint	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^	Real joint[WmrModel::MAXNJC * MAXNV]; \/\/holonomic joint constraints$/;"	m	language:C++	class:ConstraintJacobian
joint	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	dJointID joint[MAXNB]; \/\/joint[0] is null$/;"	m	language:C++	class:WmrModelODE
jointSpaceBiasForce	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^void jointSpaceBiasForce(const WmrModel& mdl, const Mat6b Xup[], const Real qvel[], Real C[]);$/;"	p	language:C++
jointSpaceBiasForce	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^void jointSpaceBiasForce(const WmrModel& mdl, const Mat6b Xup[], const Real qvel[], Real C[]) {$/;"	f	language:C++
jointSpaceInertia	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^void jointSpaceInertia( const WmrModel& mdl, const Mat6b Xup[], const Mat6b Is_subt[], Real H[] );$/;"	p	language:C++
jointSpaceInertia	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^void jointSpaceInertia( const WmrModel& mdl, const Mat6b Xup[], const Mat6b Is_subt[], Real H[] ) {$/;"	f	language:C++
joint_djd	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		Real joint_djd[WmrModel::MAXNJC*MAXNJ];$/;"	m	language:C++	struct:dModelForce	file:
joint_djr	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		Real joint_djr[WmrModel::MAXNJC*MAXNJ];$/;"	m	language:C++	struct:dModelForce	file:
joint_i0	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int joint_i0 = ncc + nac;$/;"	l	language:C++
joint_i0	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int joint_i0 = ncc + nac;$/;"	l	language:C++
joint_i0	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int joint_i0 = ncc; \/\/joint constraint$/;"	l	language:C++
k	/home/rpradeep/.vimrc	/^map k gk$/;"	m	language:Vim
k	/home/rpradeep/.vimrc	/^nnoremap k gk$/;"	m	language:Vim
k	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^            double k;$/;"	l	language:C++
k	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^            f >> k;$/;"	l	language:C++
K	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    const int K = (int) std::ceil( (endTime - startTime) \/ dt_ );$/;"	l	language:C++
k	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^            double v,k;$/;"	l	language:C++
k	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    double v, k;$/;"	l	language:C++
k	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    double v, k;$/;"	l	language:C++
k	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    std::vector<double> k;$/;"	l	language:C++
k1	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real k1 = 10.5\/100;		\/\/vertical offset between (R)over reference to (D)ifferential$/;"	l	language:C++
k10	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real k10 = 6.5\/100;		\/\/wheel radius$/;"	l	language:C++
k10	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real k10 = 6.5\/100;		\/\/wheel radius$/;"	l	language:C++
k2	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real k2 = 12.075\/100;	\/\/forward offset between R and D$/;"	l	language:C++
k3	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real k3 = 20.0\/100;		\/\/horizontal distance between D and wheels$/;"	l	language:C++
k3	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real k3 = 20.0\/100;$/;"	l	language:C++
k4	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real k4 = 28.8\/100;		\/\/distance from D to steering axis of front wheels$/;"	l	language:C++
k4	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real k4 = 28.8\/100;$/;"	l	language:C++
k5	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real k5 = 12.5\/100;		\/\/height of D from wheel axles$/;"	l	language:C++
k6	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real k6 = 16.0\/100;		\/\/length of link from rocker joint to bogie joint$/;"	l	language:C++
k6	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real k6 = 16.0\/100;$/;"	l	language:C++
k6x	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real k6x = sin(DEGTORAD(k9-90.0))*k6;$/;"	l	language:C++
k6x	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real k6x = sin(DEGTORAD(k9-90))*k6;$/;"	l	language:C++
k6z	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real k6z = cos(DEGTORAD(k9-90.0))*k6;$/;"	l	language:C++
k7	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real k7 = 6.9\/100;		\/\/length from bogie joint to front\/rear bogie$/;"	l	language:C++
k8	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real k8 = 2.0\/100;		\/\/height of bogie joint from wheel axles$/;"	l	language:C++
k9	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real k9 = 139.0;		\/\/angle of link between rocker and bogie joints (degrees)$/;"	l	language:C++
k9	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real k9 = 139.0;$/;"	l	language:C++
Kd	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^		Real Kd = Kp\/20;$/;"	l	language:C++
Kd	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^		Real Kd = Kp\/20;$/;"	l	language:C++
Kd	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^		Real Kd = Kp\/20;$/;"	l	language:C++
Kd	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^		Real Kd = Kp\/20;$/;"	l	language:C++
ke	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        KFTSolutionElement ke;$/;"	l	language:C++
ke	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^        KFTSolutionElement ke = ds1.getElement(50);$/;"	l	language:C++
keEnd	/home/rpradeep/Desktop/kft/src/main.cpp	/^                KFTSolutionElement keEnd = *(tq.getKReplanStartIter());$/;"	l	language:C++
keEnd	/home/rpradeep/Desktop/kft/src/main.cpp	/^            KFTSolutionElement keEnd = *(tq.getKReplanStartIter());$/;"	l	language:C++
keEnd	/home/rpradeep/Desktop/kft/src/main.cpp	/^    KFTSolutionElement keEnd = *(tq.getKReplanStartIter());$/;"	l	language:C++
keepGoing	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        bool keepGoing = true;$/;"	l	language:C++
keStart	/home/rpradeep/Desktop/kft/src/main.cpp	/^                KFTSolutionElement keStart = *(tq.getExecuteEndIter());$/;"	l	language:C++
keyPressed	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^    virtual bool keyPressed( const OIS::KeyEvent &arg );$/;"	p	language:C++	class:WmrAnimation
keyPressed	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^bool BaseApplication::keyPressed( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:BaseApplication
keyPressed	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^bool WmrAnimation::keyPressed( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:WmrAnimation
keyPressed	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual bool keyPressed( const OIS::KeyEvent &arg );$/;"	p	language:C++	class:BaseApplication
keyPressed	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^    virtual bool keyPressed( const OIS::KeyEvent &arg );$/;"	p	language:C++	class:WmrAnimation
keyPressed	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^bool BaseApplication::keyPressed( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:BaseApplication
keyPressed	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^bool WmrAnimation::keyPressed( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:WmrAnimation
keyPressed	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    virtual bool keyPressed(const OIS::KeyEvent &arg);$/;"	p	language:C++	class:WMRSim
keyPressed	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^bool BaseApplication::keyPressed( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:BaseApplication
keyPressed	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^bool TutorialApplication::keyPressed( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:TutorialApplication
keyPressed	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.h	/^    virtual bool keyPressed(const OIS::KeyEvent &arg);$/;"	p	language:C++	class:TutorialApplication
keyPressed	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^bool WMRSim::keyPressed( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:WMRSim
keyPressed	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^    virtual bool keyPressed(const OIS::KeyEvent &arg);$/;"	p	language:C++	class:WMRSim
keyPressed	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^bool BaseApplication::keyPressed( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:BaseApplication
keyPressed	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^bool WMRSim::keyPressed( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:WMRSim
keyPressed	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^    virtual bool keyPressed(const OIS::KeyEvent &arg);$/;"	p	language:C++	class:WMRSim
keyReleased	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^bool BaseApplication::keyReleased( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:BaseApplication
keyReleased	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual bool keyReleased( const OIS::KeyEvent &arg );$/;"	p	language:C++	class:BaseApplication
keyReleased	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^bool BaseApplication::keyReleased( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:BaseApplication
keyReleased	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    virtual bool keyReleased( const OIS::KeyEvent &arg );$/;"	p	language:C++	class:WMRSim
keyReleased	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^bool BaseApplication::keyReleased( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:BaseApplication
keyReleased	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^bool TutorialApplication::keyReleased( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:TutorialApplication
keyReleased	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.h	/^    virtual bool keyReleased( const OIS::KeyEvent &arg );$/;"	p	language:C++	class:TutorialApplication
keyReleased	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^bool WMRSim::keyReleased( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:WMRSim
keyReleased	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^    virtual bool keyReleased( const OIS::KeyEvent &arg );$/;"	p	language:C++	class:WMRSim
keyReleased	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^bool BaseApplication::keyReleased( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:BaseApplication
keyReleased	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^bool WMRSim::keyReleased( const OIS::KeyEvent &arg )$/;"	f	language:C++	class:WMRSim
keyReleased	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^    virtual bool keyReleased( const OIS::KeyEvent &arg );$/;"	p	language:C++	class:WMRSim
kft	/home/rpradeep/Desktop/kft/src/main.cpp	/^    KFTPlanner kft(refPath);$/;"	p	language:C++	file:
kft	/home/rpradeep/Desktop/kft/src/main.cpp	/^    KFTPlanner kft;$/;"	l	language:C++
kft	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    KFTPlanner kft;$/;"	l	language:C++
kft	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    KFTPlanner kft;$/;"	l	language:C++
KFTPlanner	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    KFTPlanner(const std::vector<Eigen::Vector2d>& refPath);$/;"	p	language:C++	class:dad_local_planner::KFTPlanner
KFTPlanner	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^class KFTPlanner$/;"	c	language:C++	namespace:dad_local_planner
KFTPlanner	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^KFTPlanner::KFTPlanner(const std::vector<Eigen::Vector2d>& refPath)$/;"	f	language:C++	class:KFTPlanner
kfts	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^        KFTSolution kfts = solution;$/;"	l	language:C++
kfts	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^        KFTSolution kfts = solution;$/;"	l	language:C++
KFTSolution	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^class KFTSolution$/;"	c	language:C++
KFTSolutionElement	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^class KFTSolutionElement$/;"	c	language:C++
kinematicOldTime	/home/rpradeep/Desktop/kft/src/main.cpp	/^    double kinematicOldTime = 0;$/;"	l	language:C++
kinematicPlannerThread	/home/rpradeep/Desktop/kft/src/main.cpp	/^void kinematicPlannerThread();$/;"	p	language:C++	file:
kinematicPlannerThread	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^void kinematicPlannerThread()$/;"	f	language:C++
kinematicPlannerThread	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^void kinematicPlannerThread()$/;"	f	language:C++
KINEMATIC_PLANNER_PERIOD_MS	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    const int KINEMATIC_PLANNER_PERIOD_MS = 2000;$/;"	l	language:C++
KINEMATIC_PLANNER_PERIOD_MS	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    const int KINEMATIC_PLANNER_PERIOD_MS = 2000;$/;"	l	language:C++
KINEMATIC_PLANNER_PERIOD_S	/home/rpradeep/Desktop/kft/src/main.cpp	/^    const double KINEMATIC_PLANNER_PERIOD_S = 1.0;$/;"	l	language:C++
kMax	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        const double kMax = mpDatabasePtr_->at ( i ).kMax;$/;"	l	language:C++
kMax	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        double kMax;$/;"	l	language:C++
kMax	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        f >> kMax;$/;"	l	language:C++
Kp	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^		Real Kp = 22500;$/;"	l	language:C++
Kp	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const Real Kp = 1.0;		\/\/proportional gain$/;"	l	language:C++
Kp	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real Kp = TotalMass*mdl.grav\/(nw*-mdl.dz_target[0]);$/;"	l	language:C++
Kp	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^		Real Kp = 2250;$/;"	l	language:C++
Kp	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real Kp = TotalMass*mdl.grav\/(nw*-mdl.dz_target[0]);$/;"	l	language:C++
Kp	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^		Real Kp = 22500;$/;"	l	language:C++
Kp	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const Real Kp = 1.0;		\/\/proportional gain$/;"	l	language:C++
Kp	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real Kp = TotalMass*mdl.grav\/(nw*-mdl.dz_target[0]);$/;"	l	language:C++
Kp	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^		Real Kp = 22500;$/;"	l	language:C++
Kp	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const Real Kp = 1.0;		\/\/proportional gain$/;"	l	language:C++
Kp	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real Kp = TotalMass*mdl.grav\/(nw*-mdl.dz_target[0]);$/;"	l	language:C++
KpKdToErpCfm	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^void KpKdToErpCfm( const Real kp, const Real kd, const Real dt, Real& erp, Real& cfm );$/;"	p	language:C++
KpKdToErpCfm	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^void KpKdToErpCfm( const Real kp, const Real kd, const Real dt, Real& erp, Real& cfm ) {$/;"	f	language:C++
KReplanStartIter	/home/rpradeep/Desktop/kft/src/main.cpp	/^            auto KReplanStartIter = tq.getKReplanStartIter();$/;"	l	language:C++
KReplanStartIter	/home/rpradeep/Desktop/kft/src/main.cpp	/^            auto KReplanStartIter = tq.getKReplanStartIter();$/;"	l	language:C++
ks	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    KFTSolution ks;$/;"	l	language:C++
ks1	/home/rpradeep/Desktop/kft/src/main.cpp	/^    KFTSolution ks1 = kft.getSolution();$/;"	l	language:C++
ks1	/home/rpradeep/Desktop/kft/src/main.cpp	/^    KFTSolution ks1 = kft.getSolution();$/;"	l	language:C++
ks1	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^                KFTSolution ks1 = kft.getSolution();$/;"	l	language:C++
ks1	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^                KFTSolution ks1 = kft.getSolution();$/;"	l	language:C++
ks1	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^        KFTSolution ks1 = kft.getSolution();$/;"	l	language:C++
ks1	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^        KFTSolution ks1 = kft.getSolution();$/;"	l	language:C++
ks2	/home/rpradeep/Desktop/kft/src/main.cpp	/^    KFTSolution ks2 = kft.getSolution();$/;"	l	language:C++
KSTATUS	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    enum KSTATUS {PLAN,WAIT, INIT, DONE};$/;"	g	language:C++	file:
kStatus	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    KSTATUS kStatus = KSTATUS::INIT;$/;"	l	language:C++
KSTATUS	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    enum KSTATUS {PLAN,WAIT, INIT, DONE};$/;"	g	language:C++	file:
kStatus	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    KSTATUS kStatus = KSTATUS::INIT;$/;"	l	language:C++
L	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::Vector3 L(width,width,length-hlength);$/;"	p	language:C++	file:
L	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const Real L = 1.91; \/\/front to rear$/;"	l	language:C++
L	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real L,B,rad; \/\/dimensions$/;"	l	language:C++
L	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real L;$/;"	m	language:C++	class:Frame
L	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Ogre::Vector3 L(width,width,length-hlength);$/;"	p	language:C++	file:
L	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real L = k4+k6x; \/\/length, front to rear$/;"	l	language:C++
L	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const Real L = 1.91; \/\/front to rear$/;"	l	language:C++
L	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real L,B,rad; \/\/dimensions$/;"	l	language:C++
L	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const Real L = 1.91; \/\/front to rear$/;"	l	language:C++
L	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real L,B,rad; \/\/dimensions$/;"	l	language:C++
L	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Ogre::Vector3 L(width,width,length-hlength);$/;"	p	language:C++	file:
L	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    Ogre::Vector3 L(width,width,length-hlength);$/;"	p	language:C++	file:
lagging	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    const bool lagging = (targetPosition > currentPosition);$/;"	l	language:C++
lastDistSq	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^    double lastDistSq = std::numeric_limits<double>::max();$/;"	l	language:C++
lastdsq	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    double lastdsq = std::numeric_limits<double>::max(); $/;"	l	language:C++
lastIndex	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^int lastIndex;$/;"	v	language:C++
lastPoint	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    Eigen::Vector2d lastPoint = refWaypointPath_.getLastPoint();$/;"	l	language:C++
lastPositionVector	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    Eigen::Vector2d lastPositionVector = interpolatedPosition_.front();$/;"	l	language:C++
lastStage	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    int lastStage = 0;$/;"	l	language:C++
lastStage	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    int lastStage = 0;$/;"	l	language:C++
latex_macros	/home/rpradeep/.vimrc	/^augroup latex_macros " {$/;"	a	language:Vim
Lb	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real Lb = .40;		\/\/length of body$/;"	l	language:C++
left	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    int left, top;$/;"	l	language:C++
left	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    int left, top;$/;"	l	language:C++
left	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    int left, top;$/;"	l	language:C++
left	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    int left, top;$/;"	l	language:C++
leftIndex	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    int leftIndex = 0;$/;"	l	language:C++
length	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	Real length = .1;$/;"	l	language:C++
length	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^	Real length = .25;$/;"	l	language:C++
length	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	Real length = .25;$/;"	l	language:C++
lf	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	Real lf;	\/\/length of flat surface$/;"	l	language:C++
light	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::Light* light = mSceneMgr->createLight("MainLight");$/;"	l	language:C++
light	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Ogre::Light* light = mSceneMgr->createLight("MainLight");$/;"	l	language:C++
light	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^    Ogre::Light* light = mSceneMgr->createLight("MainLight");$/;"	l	language:C++
light	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    Ogre::Light* light = mSceneMgr->createLight("MainLight");$/;"	l	language:C++
lim	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^		Real lim = DEGTORAD(60);$/;"	l	language:C++
lin	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int lin = 3;$/;"	l	language:C++
LINALG3_SIMD	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	14;"	d	language:C++
linearInterp	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	/^inline Real linearInterp( const Real f[2], const Real xn[1]) {$/;"	f	language:C++
linearInterp_f	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	/^inline void linearInterp_f(const Real* F, const int I[1], Real f[2]) {$/;"	f	language:C++
linearInterp_xn	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	/^inline void linearInterp_xn( const Real lim[], const Real d[], const Real x[], int I[], Real xn[] ) {$/;"	f	language:C++
linear_axis	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        const char linear_axis[] = {'x','y'};$/;"	l	language:C++
lines	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	Ogre::BillboardChain* lines[MAXNL];$/;"	m	language:C++	class:WmrAnimation
lines	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	Ogre::BillboardChain* lines[MAXNL];$/;"	m	language:C++	class:WmrAnimation
lines	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	Ogre::BillboardChain* lines[MAXNL];$/;"	m	language:C++	class:WmrAnimation
line_ind	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            int line_ind = 1;$/;"	l	language:C++
line_ind	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            int line_ind = 1;$/;"	l	language:C++
line_ind	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			int line_ind = 1;$/;"	l	language:C++
linspace	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^inline void linspace(const Type lo, const Type hi, const int n, Type val[]) {$/;"	f	language:C++
load	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    cf.load(mResourcesCfg);$/;"	p	language:C++	file:
load	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    cf.load(mResourcesCfg);$/;"	p	language:C++	file:
load	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    cf.load(mResourcesCfg);$/;"	p	language:C++	file:
load	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    cf.load(mResourcesCfg);$/;"	p	language:C++	file:
loadDynamicObstacleData	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^    static void loadDynamicObstacleData(std::vector<DynamicObstacle>& dynamicObstaclesVector,const std::string& fullFilePath) ;$/;"	p	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
loadDynamicObstacleData	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^    DynamicObstacleCostEvaluator::loadDynamicObstacleData(dynamicObstaclesVector_,config_.dynamicObstaclesConfigFilePath);$/;"	p	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator	file:
loadDynamicObstacleData	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^void DynamicObstacleCostEvaluator::loadDynamicObstacleData(std::vector<DynamicObstacle>& dynamicObstaclesVector,const std::string& fullFilePath) $/;"	f	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
loadDynamicObstacleData	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgreDynamicObstacles.cpp	/^    DynamicObstacleCostEvaluator::loadDynamicObstacleData(mDynamicObstaclesVector,config.dynamicObstaclesConfigFilePath);$/;"	p	language:C++	class:DynamicObstacleCostEvaluator	file:
loadFromFile	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    static DADPlannerConfig loadFromFile(const std::string fullFilePath = "\/home\/rpradeep\/Desktop\/kft\/config\/config.ini" )$/;"	f	language:C++	class:dad_local_planner::DADPlannerConfig
loadFromFile	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    static DADPlannerConfig loadFromFile(const std::string fullFilePath = "\/home\/rpradeep\/Desktop\/kft\/config\/config.ini" )$/;"	f	language:C++	class:dad_local_planner::DADPlannerConfig
loadMotionPrimitives	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^bool MotionPrimitiveManager::loadMotionPrimitives ( const std::string fileName )$/;"	f	language:C++	class:MotionPrimitiveManager
loadResources	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^void BaseApplication::loadResources(void)$/;"	f	language:C++	class:BaseApplication
loadResources	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual void loadResources(void);$/;"	p	language:C++	class:BaseApplication
loadResources	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^void BaseApplication::loadResources(void)$/;"	f	language:C++	class:BaseApplication
loadResources	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^void BaseApplication::loadResources(void)$/;"	f	language:C++	class:BaseApplication
loadResources	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^void BaseApplication::loadResources(void)$/;"	f	language:C++	class:BaseApplication
load_video	/etc/grub.d/00_header	/^function load_video {$/;"	f	language:Sh
logicalCount	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^inline int logicalCount( const int n, const bool logical[] ) {$/;"	f	language:C++
logicalFind	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^inline int logicalFind( const int n, const bool logical[], int inds[] ) {$/;"	f	language:C++
logicalIndexIn	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^inline int logicalIndexIn( const int n, const bool logical[], const Type array_in[], Type array_out[] ) {$/;"	f	language:C++
logicalIndexOut	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^inline int logicalIndexOut( const int n, const bool logical[], const Type array_in[], Type array_out[] ) {$/;"	f	language:C++
lookAheadDistance_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    double lookAheadDistance_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
lower	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    int lower = 0;$/;"	l	language:C++
lower	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    int lower = 0;$/;"	l	language:C++
lowerIndex	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^    int lowerIndex = 0;$/;"	l	language:C++
lowerlim	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	Real lowerlim[2]; \/\/lower limit$/;"	m	language:C++	class:GridSurf
lowestDistance	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^    double lowestDistance = std::numeric_limits<double>::max();$/;"	l	language:C++
lowx	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const float lowx = surf->get_lowerlimx();$/;"	l	language:C++
lowx	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const float lowx = surf->get_lowerlimx();$/;"	l	language:C++
lowx	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const float lowx = surf->get_lowerlimx();$/;"	l	language:C++
lowx	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const float lowx = surf->get_lowerlimx();$/;"	l	language:C++
lowy	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const float lowy = surf->get_lowerlimy();$/;"	l	language:C++
lowy	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const float lowy = surf->get_lowerlimy();$/;"	l	language:C++
lowy	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const float lowy = surf->get_lowerlimy();$/;"	l	language:C++
lowy	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const float lowy = surf->get_lowerlimy();$/;"	l	language:C++
ls	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	Real ls = h\/tan(a); \/\/length of sloped surface$/;"	l	language:C++
LUTFilenames	/home/rpradeep/Desktop/wmrde/include/wmrde/wheelgroundcontact.h	/^inline void LUTFilenames( std::string FileNames[] )$/;"	f	language:C++
M	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    const int M = solutionNodeList_.size();$/;"	l	language:C++
M	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^    f >> M;$/;"	l	language:C++
M	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^    int M;$/;"	l	language:C++
M	/home/rpradeep/Desktop/kft/src/planner/Node.cpp	/^    const int M = mp.x.size();$/;"	l	language:C++
M	/home/rpradeep/Desktop/kft/src/planner/Node.cpp	/^    const int M = mp.x.size();$/;"	l	language:C++
m	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^            f << m << " ";$/;"	l	language:C++
m	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^            int m = 0;$/;"	l	language:C++
M01	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	Vec3 M01[MAXNT];$/;"	m	language:C++	class:TriMeshSurf
M12	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	Vec3 M12[MAXNT];$/;"	m	language:C++	class:TriMeshSurf
M20	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	Vec3 M20[MAXNT];$/;"	m	language:C++	class:TriMeshSurf
main	/home/rpradeep/Desktop/kft/src/main.cpp	/^int main(int argc, char *argv[]) \/\/use this for console output$/;"	f	language:C++
main	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^int main()$/;"	f	language:C++
main	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^int main(int argc, char *argv[]) \/\/use this for console output$/;"	f	language:C++
main	/home/rpradeep/Desktop/sim/basic.cpp	/^int main()$/;"	f	language:C++
main	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^int main(int argc, char *argv[]) \/\/use this for console output$/;"	f	language:C++
main	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^int main(int argc, char *argv[])$/;"	f	language:C++
main	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^int main(int argc, char *argv[])$/;"	f	language:C++
main	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^int main(int argc, char *argv[]) \/\/use this for console output$/;"	f	language:C++
main	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^int main()$/;"	f	language:C++
make_timeout	/etc/grub.d/00_header	/^make_timeout ()$/;"	f	language:Sh
manual	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^ManualObject* manual = mSceneMgr->createManualObject("manual");$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^ManualObject* manual = mSceneMgr->createManualObject("manual");$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manual	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    Ogre::ManualObject* manual = mSceneMgr->createManualObject();$/;"	l	language:C++
manualKFT	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    KFTSolution manualKFT;$/;"	l	language:C++
mapleader	/home/rpradeep/.vimrc	/^let mapleader = ","$/;"	v	language:Vim
mass	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real mass;$/;"	m	language:C++	class:Frame
Mat3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	/^typedef Real Mat3[SIZEMAT3];$/;"	t	language:C++
Mat6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^typedef Real Mat6b[4*SIZEMAT3];$/;"	t	language:C++
MatEuler	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^typedef Real MatEuler[3*SIZEEULER]; \/\/for 3x3 transforms between Euler rates and angular velocity$/;"	t	language:C++
MatOrient	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^typedef MatEuler MatOrient;$/;"	t	language:C++
MatOrient	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^typedef MatQuat MatOrient;$/;"	t	language:C++
MatQuat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^typedef Real MatQuat[3*SIZEQUAT]; \/\/for 3x4 or 4x3 transforms between quaternion rates and angular velocity$/;"	t	language:C++
matrix	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^   osg::Matrix matrix = _viewer->getCameraManipulator()->getMatrix();$/;"	l	language:C++
Matrix3	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^		Ogre::Quaternion quat( Ogre::Matrix3( $/;"	p	language:C++
Matrix3	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^		Ogre::Quaternion quat( Ogre::Matrix3( $/;"	p	language:C++
Matrix3	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^		Ogre::Quaternion quat( Ogre::Matrix3( $/;"	p	language:C++
Matrix3	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^        Ogre::Quaternion quat( Ogre::Matrix3($/;"	p	language:C++
Matrix3	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^		Ogre::Quaternion quat( Ogre::Matrix3( $/;"	p	language:C++
Matrix3	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^		Ogre::Quaternion quat( Ogre::Matrix3( $/;"	p	language:C++
MatrixXr	/home/rpradeep/Desktop/wmrde/include/wmrde/eigensolve.h	/^typedef Eigen::Matrix<Real,Eigen::Dynamic,Eigen::Dynamic> MatrixXr;$/;"	t	language:C++
maxIndex	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    int maxIndex;$/;"	l	language:C++
MAXNA	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	static const int MAXNA = MAXNF-1;	\/\/max number of actuated frames$/;"	m	language:C++	class:WmrModel
MAXNB	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	static const int MAXNB = 13; \/\/max number of bodies$/;"	m	language:C++	class:WmrModelODE
MAXNC	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^	static const int MAXNC = 3*MAXNP + WmrModel::MAXNA + WmrModel::MAXNJC;$/;"	m	language:C++	class:ConstraintJacobian
MAXNC	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int MAXNC = ConstraintJacobian::MAXNC;$/;"	l	language:C++
MAXNC	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int MAXNC = 3*MAXNP + WmrModel::MAXNJC; \/\/max number of constraints$/;"	l	language:C++
MAXNE	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int MAXNE = MAXNP + WmrModel::MAXNJC; \/\/error vector$/;"	l	language:C++
MAXNF	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	static const int MAXNF = 13;		\/\/max number of frames$/;"	m	language:C++	class:WmrModel
MAXNJ	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int MAXNJ = WmrModel::MAXNF-1;$/;"	l	language:C++
MAXNJ	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int MAXNJ = WmrModel::MAXNF-1;$/;"	l	language:C++
MAXNJ	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int MAXNJ = WmrModel::MAXNF-1; \/\/max number of joints$/;"	l	language:C++
MAXNJC	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	static const int MAXNJC = 1;		\/\/max number of (holonomic) joint constraints$/;"	m	language:C++	class:WmrModel
MAXNL	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	static const int MAXNL = 5; \/\/max number of lines$/;"	m	language:C++	class:WmrAnimation
MAXNL	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	static const int MAXNL = 5; \/\/max number of lines$/;"	m	language:C++	class:WmrAnimation
MAXNL	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	static const int MAXNL = 5; \/\/max number of lines$/;"	m	language:C++	class:WmrAnimation
MAXNN	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	static const int MAXNN = 50; \/\/max number of nodes$/;"	m	language:C++	class:WmrAnimation
MAXNN	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	static const int MAXNN = 50; \/\/max number of nodes$/;"	m	language:C++	class:WmrAnimation
MAXNN	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	static const int MAXNN = 50; \/\/max number of nodes$/;"	m	language:C++	class:WmrAnimation
MAXNN	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    static const int MAXNN = 50; \/\/max number of nodes$/;"	m	language:C++	class:WMRSim
MAXNN	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^	static const int MAXNN = 50; \/\/max number of nodes$/;"	m	language:C++	class:WMRSim
MAXNN	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^	static const int MAXNN = 50; \/\/max number of nodes$/;"	m	language:C++	class:WMRSim
MAXNP	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	static const int MAXNP = 3; \/\/max number of contact points$/;"	m	language:C++	class:ContactGeom
MAXNP	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^	static const int MAXNP = WmrModel::MAXNT * ContactGeom::MAXNP; \/\/max number of contact points$/;"	m	language:C++	class:ConstraintJacobian
MAXNP	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int MAXNP = ConstraintJacobian::MAXNP;$/;"	l	language:C++
MAXNP	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int MAXNP = WmrModel::MAXNT * ContactGeom::MAXNP; \/\/max number of contact points$/;"	l	language:C++
MAXNP	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int MAXNP = WmrModel::MAXNT * ContactGeom::MAXNP; \/\/max number of contact points$/;"	l	language:C++
MAXNPAR	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	static const int MAXNPAR = 20;		\/\/max number of parameters$/;"	m	language:C++	class:WmrModel
MAXNS	/home/rpradeep/Desktop/kft/src/main.cpp	/^    const int MAXNS = NUMSTATE(WmrModel::MAXNF);$/;"	l	language:C++
MAXNS	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    const int MAXNS = NUMSTATE(WmrModel::MAXNF);$/;"	l	language:C++
MAXNS	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	static const int MAXNS = 10; \/\/max number of surfaces$/;"	m	language:C++	class:WmrModelODE
MAXNS	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int MAXNS = NUMSTATE(WmrModel::MAXNF);$/;"	l	language:C++
MAXNS	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int MAXNS = NUMSTATE(WmrModel::MAXNF); \/\/state vector$/;"	l	language:C++
MAXNS	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    const int MAXNS = NUMSTATE(WmrModel::MAXNF);$/;"	l	language:C++
MAXNS	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int MAXNS = NUMSTATE(WmrModel::MAXNF);$/;"	l	language:C++
MAXNS	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int MAXNS = NUMSTATE(WmrModel::MAXNF);$/;"	l	language:C++
MAXNS	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	const int MAXNS = NUMSTATE(WmrModel::MAXNF);$/;"	l	language:C++
MAXNT	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	static const int MAXNT = 20; \/\/max number of triangles$/;"	m	language:C++	class:TriMeshSurf
MAXNT	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	static const int MAXNT = 2;			\/\/max number of tracks (used to determine max number of contact points)$/;"	m	language:C++	class:WmrModel
MAXNV	/home/rpradeep/Desktop/kft/src/main.cpp	/^    const int MAXNV = NUMQVEL(WmrModel::MAXNF);$/;"	l	language:C++
MAXNV	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    const int MAXNV = NUMQVEL(WmrModel::MAXNF);$/;"	l	language:C++
MAXNV	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^	static const int MAXNV = NUMQVEL(WmrModel::MAXNF);$/;"	m	language:C++	class:ConstraintJacobian
MAXNV	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/PlaneSurf.h	/^	static const int MAXNV = 10; \/\/max number of vertices$/;"	m	language:C++	class:PlaneSurf
MAXNV	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int MAXNV = NUMQVEL(WmrModel::MAXNF); \/\/max size of qvel$/;"	l	language:C++
MAXNV	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int MAXNV = NUMQVEL(WmrModel::MAXNF);$/;"	l	language:C++
MAXNV	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int MAXNV = NUMQVEL(WmrModel::MAXNF);$/;"	l	language:C++
MAXNV	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int MAXNV = NUMQVEL(WmrModel::MAXNF);$/;"	l	language:C++
MAXNV	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int MAXNV = NUMQVEL(WmrModel::MAXNF); \/\/max size of qvel$/;"	l	language:C++
MAXNV	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int MAXNV = NUMQVEL(WmrModel::MAXNF);$/;"	l	language:C++
MAXNV	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int MAXNV = NUMQVEL(WmrModel::MAXNF);$/;"	l	language:C++
MAXNV	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    const int MAXNV = NUMQVEL(WmrModel::MAXNF);$/;"	l	language:C++
MAXNV	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int MAXNV = NUMQVEL(WmrModel::MAXNF);$/;"	l	language:C++
MAXNV	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int MAXNV = NUMQVEL(WmrModel::MAXNF);$/;"	l	language:C++
MAXNV	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	const int MAXNV = NUMQVEL(WmrModel::MAXNF);$/;"	l	language:C++
MAXNW	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	static const int MAXNW = 6;			\/\/max number of wheels (or sprockets)$/;"	m	language:C++	class:WmrModel
MAXNY	/home/rpradeep/Desktop/kft/src/main.cpp	/^    const int MAXNY = MAXNS+MAXNV+WmrModel::MAXNA; \/\/for dynamic sim$/;"	l	language:C++
MAXNY	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    const int MAXNY = MAXNS+MAXNV+WmrModel::MAXNA; \/\/for dynamic sim$/;"	l	language:C++
MAXNY	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    const int MAXNY = MAXNS+MAXNV+WmrModel::MAXNA; \/\/for dynamic sim$/;"	l	language:C++
MAXNY	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int MAXNY = MAXNS+MAXNV+WmrModel::MAXNA; \/\/for dynamic sim$/;"	l	language:C++
MAXNY	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	const int MAXNY = MAXNS+MAXNV+WmrModel::MAXNA; \/\/for dynamic sim$/;"	l	language:C++
maxTick	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^double maxTick = inputTimeInterval;$/;"	v	language:C++
max_dvel	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const Real max_dvel = 1.5;	\/\/max difference btwn left & right wheel vel due to feedback$/;"	l	language:C++
max_dvel	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const Real max_dvel = 1.5;	\/\/max difference btwn left & right wheel vel due to feedback$/;"	l	language:C++
max_dvel	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const Real max_dvel = 1.5;	\/\/max difference btwn left & right wheel vel due to feedback$/;"	l	language:C++
max_idx	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	int max_idx=0;$/;"	l	language:C++
max_idx	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	int max_idx=0;$/;"	l	language:C++
max_iter	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int max_iter = 20;$/;"	l	language:C++
max_iter	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int max_iter = 15;$/;"	l	language:C++
MAX_NUM_PARTS	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	static const int MAX_NUM_PARTS = 20;$/;"	m	language:C++	class:VrmlData
max_val	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	Type max_val=val[0];$/;"	l	language:C++
max_val	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	Type max_val=val[0];$/;"	l	language:C++
Mb	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const Real Mb = .9*TotalMass; \/\/mass of body$/;"	l	language:C++
Mb	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real Mb = 1*11;		\/\/mass of body$/;"	l	language:C++
Mb	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const Real Mb = .9*TotalMass; \/\/mass of body$/;"	l	language:C++
Mb	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const Real Mb = .9*TotalMass; \/\/mass of body$/;"	l	language:C++
mCamera	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    Ogre::Camera* mCamera;$/;"	m	language:C++	class:BaseApplication
mCameraMan	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    OgreBites::SdkCameraMan* mCameraMan;       \/\/ basic camera controller$/;"	m	language:C++	class:BaseApplication
mChain	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgrePath.h	/^    Ogre::BillboardChain* mChain;$/;"	m	language:C++	class:OgrePath
mChain	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgrePath.h	/^    Ogre::BillboardChain* mChain;$/;"	m	language:C++	class:OgrePath
mColor	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgreDynamicObstacles.h	/^    Ogre::ColourValue mColor;$/;"	m	language:C++	class:OgreDynamicObstacles
mColor	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgrePath.h	/^    Ogre::ColourValue mColor;$/;"	m	language:C++	class:OgrePath
mColor	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgrePath.h	/^    Ogre::ColourValue mColor;$/;"	m	language:C++	class:OgrePath
mCurrentGoalPoint	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    std::list<KFTSolutionElement>::iterator mCurrentGoalPoint;$/;"	m	language:C++	class:dad_local_planner::PurePursuitController
mCurrentHeading	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    double mCurrentHeading;$/;"	m	language:C++	class:dad_local_planner::PurePursuitController
mCurrentPosition	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    Eigen::Vector3d mCurrentPosition;$/;"	m	language:C++	class:dad_local_planner::PurePursuitController
mCurrentTime	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    double mCurrentTime;$/;"	m	language:C++	class:dad_local_planner::PurePursuitController
mCurrentWaypoint	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    std::list<KFTSolutionElement>::iterator mCurrentWaypoint;$/;"	m	language:C++	class:dad_local_planner::PurePursuitController
mCursorWasVisible	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^	bool mCursorWasVisible;                    \/\/ was cursor visible before dialog appeared$/;"	m	language:C++	class:BaseApplication
mDetailsPanel	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    OgreBites::ParamsPanel* mDetailsPanel;     \/\/ sample details panel$/;"	m	language:C++	class:BaseApplication
mdl	/home/rpradeep/Desktop/kft/src/main.cpp	/^    WmrModel mdl;$/;"	l	language:C++
mdl	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    WmrModel mdl;$/;"	l	language:C++
mdl	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    WmrModel mdl;$/;"	l	language:C++
mdl	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	WmrModel mdl;$/;"	l	language:C++
mdl	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	WmrModel mdl;$/;"	l	language:C++
mdl	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	WmrModel mdl;$/;"	l	language:C++
mDynamicObstacles	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^    OgreDynamicObstacles* mDynamicObstacles;$/;"	m	language:C++	class:WmrAnimation
mDynamicObstaclesVector	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgreDynamicObstacles.h	/^    std::vector<DynamicObstacle> mDynamicObstaclesVector;$/;"	m	language:C++	class:OgreDynamicObstacles
mDynamicPlanCommitStage	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    int mDynamicPlanCommitStage;$/;"	m	language:C++	class:TrajectoryQueue
mEntity	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::Entity* mEntity = mSceneMgr->createEntity("mySphere", Ogre::SceneManager::PT_SPHERE);$/;"	l	language:C++
mEntity	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^Ogre::Entity* mEntity = mSceneMgr->createEntity("mySphere", Ogre::SceneManager::PT_SPHERE);$/;"	l	language:C++
merge	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^        std::merge( trajectoryVector_.begin(),trajectoryVector_.end(), kfts.elements.begin(),kfts.elements.end(),std::back_inserter(mergedTrajectoryVector), compareTime );$/;"	p	language:C++	class:std	file:
merge	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^        std::merge( trajectoryVector_.begin(),trajectoryVector_.end(), solution.elements.begin(),solution.elements.end(),std::back_inserter(mergedTrajectoryVector), compareTime );$/;"	p	language:C++	class:std	file:
merge	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^        std::merge( trajectoryVector_.begin(),trajectoryVector_.end(), kfts.elements.begin(),kfts.elements.end(),std::back_inserter(mergedTrajectoryVector), compareTime );$/;"	p	language:C++	class:std	file:
merge	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^        std::merge( trajectoryVector_.begin(),trajectoryVector_.end(), solution.elements.begin(),solution.elements.end(),std::back_inserter(mergedTrajectoryVector), compareTime );$/;"	p	language:C++	class:std	file:
mergedTrajectoryVector	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    std::vector<KFTSolutionElement> mergedTrajectoryVector;$/;"	l	language:C++
mergedTrajectoryVector	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    std::vector<KFTSolutionElement> mergedTrajectoryVector;$/;"	l	language:C++
messagePump	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::WindowEventUtilities::messagePump();$/;"	p	language:C++	class:Ogre::WindowEventUtilities	file:
messagePump	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Ogre::WindowEventUtilities::messagePump();$/;"	p	language:C++	class:Ogre::WindowEventUtilities	file:
messagePump	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Ogre::WindowEventUtilities::messagePump();$/;"	p	language:C++	class:Ogre::WindowEventUtilities	file:
messagePump	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^        Ogre::WindowEventUtilities::messagePump();$/;"	p	language:C++	class:Ogre::WindowEventUtilities	file:
messagePump	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^        Ogre::WindowEventUtilities::messagePump();$/;"	p	language:C++	class:Ogre::WindowEventUtilities	file:
messagePump	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    Ogre::WindowEventUtilities::messagePump();$/;"	p	language:C++	class:Ogre::WindowEventUtilities	file:
mExecuteCommitDuration	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    double mExecuteCommitDuration;$/;"	m	language:C++	class:TrajectoryQueue
mExecuteEndIter	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    std::list<KFTSolutionElement>::iterator mExecuteEndIter;$/;"	m	language:C++	class:TrajectoryQueue
mExecuteStartIter	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    std::list<KFTSolutionElement>::iterator mExecuteStartIter;$/;"	m	language:C++	class:TrajectoryQueue
mf	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real mf[MAXNC]; \/\/model force$/;"	l	language:C++
mflag	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	bool mflag = true;$/;"	l	language:C++
mGoalLookAheadDistance	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    double mGoalLookAheadDistance;$/;"	m	language:C++	class:dad_local_planner::PurePursuitController
mGoalNode	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^    Ogre::SceneNode* mGoalNode;$/;"	m	language:C++	class:WmrAnimation
mGoalNode	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^    Ogre::SceneNode* mGoalNode;$/;"	m	language:C++	class:WmrAnimation
mHeading	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    double mHeading;$/;"	m	language:C++	class:SimInterface
mHeading	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    double mHeading;$/;"	m	language:C++	class:SimInterface
mi	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	int mi; \/\/match index$/;"	l	language:C++
mid	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    int mid = (upper + lower)\/2;$/;"	l	language:C++
mid	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    int mid = (upper + lower)\/2;$/;"	l	language:C++
midCumulativeDist	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^    double midCumulativeDist;$/;"	l	language:C++
midIndex	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^    int midIndex ;$/;"	l	language:C++
milliseconds	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^            boost::this_thread::sleep_for(boost::chrono::milliseconds(DYNAMIC_PLANNER_PERIOD_MS));$/;"	p	language:C++	class:boost::this_thread	file:
milliseconds	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^            boost::this_thread::sleep_for(boost::chrono::milliseconds(timeLeft));$/;"	p	language:C++	class:boost::this_thread	file:
milliseconds	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^            boost::this_thread::sleep_for(boost::chrono::milliseconds(DYNAMIC_PLANNER_PERIOD_MS));$/;"	p	language:C++	class:boost::this_thread	file:
milliseconds	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^            boost::this_thread::sleep_for(boost::chrono::milliseconds(timeLeft));$/;"	p	language:C++	class:boost::this_thread	file:
milliseconds	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^        std::this_thread::sleep_for(std::chrono::milliseconds(dt_ms));$/;"	p	language:C++	class:std::this_thread	file:
milliseconds	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^        std::this_thread::sleep_for(std::chrono::milliseconds(dt_ms));$/;"	p	language:C++	class:std::this_thread	file:
minId	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^    int minId = -1;$/;"	l	language:C++
minIndex	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    int minIndex;$/;"	l	language:C++
mInputContext	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^	OgreBites::InputContext mInputContext;$/;"	m	language:C++	class:BaseApplication
mInputManager	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    OIS::InputManager* mInputManager;$/;"	m	language:C++	class:BaseApplication
mInstance	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^	static SimInterface* mInstance; $/;"	m	language:C++	class:SimInterface
mInstance	/home/rpradeep/Desktop/wmrde/src/animate/SimInterface.cpp	/^SimInterface* SimInterface::mInstance = 0;$/;"	m	language:C++	class:SimInterface	file:
min_idx	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	int min_idx=0;$/;"	l	language:C++
min_idx	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	int min_idx=0;$/;"	l	language:C++
min_npic	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	int min_npic;			\/\/minimum number of points in contact$/;"	m	language:C++	class:WmrModel
min_rad	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const Real min_rad = 3.0;	\/\/min turn radius$/;"	l	language:C++
min_rad	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const Real min_rad = 3.0;	\/\/min turn radius$/;"	l	language:C++
min_rad	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const Real min_rad = 3.0;	\/\/min turn radius$/;"	l	language:C++
MIN_TURN_RADIUS	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^    const double MIN_TURN_RADIUS = 3;$/;"	l	language:C++
min_val	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	Type min_val=val[0];$/;"	l	language:C++
min_val	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	Type min_val=val[0];$/;"	l	language:C++
mKeyboard	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    OIS::Keyboard* mKeyboard;$/;"	m	language:C++	class:BaseApplication
mKReplanStartIter	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    std::list<KFTSolutionElement>::iterator mKReplanStartIter;$/;"	m	language:C++	class:TrajectoryQueue
mLastReferenceKinematicPlan	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    KFTSolution mLastReferenceKinematicPlan;$/;"	m	language:C++	class:TrajectoryQueue
mMouse	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    OIS::Mouse*    mMouse;$/;"	m	language:C++	class:BaseApplication
mObstacles	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgreDynamicObstacles.h	/^    std::vector<Ogre::SceneNode*> mObstacles;$/;"	m	language:C++	class:OgreDynamicObstacles
moment_of_inertia	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	Mat3 moment_of_inertia;$/;"	l	language:C++
motionPrimitiveFilePath	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    std::string motionPrimitiveFilePath;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
motionPrimitiveFilePath	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    std::string motionPrimitiveFilePath;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
MotionPrimitiveManager	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^MotionPrimitiveManager::MotionPrimitiveManager ( const std::string fileName )$/;"	f	language:C++	class:MotionPrimitiveManager
mouseMoved	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^bool BaseApplication::mouseMoved( const OIS::MouseEvent &arg )$/;"	f	language:C++	class:BaseApplication
mouseMoved	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual bool mouseMoved( const OIS::MouseEvent &arg );$/;"	p	language:C++	class:BaseApplication
mouseMoved	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^bool BaseApplication::mouseMoved( const OIS::MouseEvent &arg )$/;"	f	language:C++	class:BaseApplication
mouseMoved	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^bool BaseApplication::mouseMoved( const OIS::MouseEvent &arg )$/;"	f	language:C++	class:BaseApplication
mouseMoved	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^bool BaseApplication::mouseMoved( const OIS::MouseEvent &arg )$/;"	f	language:C++	class:BaseApplication
mousePressed	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^bool BaseApplication::mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id )$/;"	f	language:C++	class:BaseApplication
mousePressed	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual bool mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id );$/;"	p	language:C++	class:BaseApplication
mousePressed	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^bool BaseApplication::mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id )$/;"	f	language:C++	class:BaseApplication
mousePressed	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^bool BaseApplication::mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id )$/;"	f	language:C++	class:BaseApplication
mousePressed	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^bool BaseApplication::mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id )$/;"	f	language:C++	class:BaseApplication
mouseReleased	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^bool BaseApplication::mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id )$/;"	f	language:C++	class:BaseApplication
mouseReleased	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual bool mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id );$/;"	p	language:C++	class:BaseApplication
mouseReleased	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^bool BaseApplication::mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id )$/;"	f	language:C++	class:BaseApplication
mouseReleased	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^bool BaseApplication::mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id )$/;"	f	language:C++	class:BaseApplication
mouseReleased	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^bool BaseApplication::mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id )$/;"	f	language:C++	class:BaseApplication
mOverlaySystem	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^	Ogre::OverlaySystem *mOverlaySystem;$/;"	m	language:C++	class:BaseApplication
moveSpeed	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^const float moveSpeed = 0.1;$/;"	v	language:C++
moveWidgetToTray	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^            mTrayMgr->moveWidgetToTray(mDetailsPanel, OgreBites::TL_TOPRIGHT, 0);$/;"	p	language:C++	file:
moveWidgetToTray	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^            mTrayMgr->moveWidgetToTray(mDetailsPanel, OgreBites::TL_TOPRIGHT, 0);$/;"	p	language:C++	file:
moveWidgetToTray	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^            mTrayMgr->moveWidgetToTray(mDetailsPanel, OgreBites::TL_TOPRIGHT, 0);$/;"	p	language:C++	file:
moveWidgetToTray	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^            mTrayMgr->moveWidgetToTray(mDetailsPanel, OgreBites::TL_TOPRIGHT, 0);$/;"	p	language:C++	file:
MOVE_STATE_TIME_TOLERANCE	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        const double MOVE_STATE_TIME_TOLERANCE = 0.1;$/;"	l	language:C++
MOVING	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    enum STATE {RESET,WAIT,MOVING,STOP};$/;"	e	language:C++	enum:dad_local_planner::PurePursuitController::STATE
mp	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        const MotionPrimitive mp = mpManager_.getMotionPrimitive ( dummyChild.mpId );$/;"	l	language:C++
mp	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        const MotionPrimitive mp = mpManager_.getMotionPrimitive ( mpIndexSet[k] );$/;"	l	language:C++
mp	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        MotionPrimitive mp ( dx, dy, dth, ds, kMax, mpid );$/;"	p	language:C++	file:
mPath	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^    OgrePath* mPath;$/;"	m	language:C++	class:WmrAnimation
mPause	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^	bool mPause;		\/\/added by Neal$/;"	m	language:C++	class:BaseApplication
mpid	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        f >> mpid;$/;"	l	language:C++
mpid	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        int mpid;$/;"	l	language:C++
mpIndexSet	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    std::vector<int> mpIndexSet;$/;"	l	language:C++
mpInfo	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        const MotionPrimitiveInfo mpInfo = mpManager_.getMotionPrimitiveInfo( mpIndexSet[k] );$/;"	l	language:C++
mPluginsCfg	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    Ogre::String mPluginsCfg;$/;"	m	language:C++	class:BaseApplication
mpManager_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    MotionPrimitiveManager mpManager_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
mPositionX	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    double mPositionX;$/;"	m	language:C++	class:SimInterface
mPositionX	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    double mPositionX;$/;"	m	language:C++	class:SimInterface
mPositionY	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    double mPositionY;$/;"	m	language:C++	class:SimInterface
mPositionY	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    double mPositionY;$/;"	m	language:C++	class:SimInterface
mPositionZ	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    double mPositionZ;$/;"	m	language:C++	class:SimInterface
mPositionZ	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    double mPositionZ;$/;"	m	language:C++	class:SimInterface
mQueue	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    std::list<KFTSolutionElement> mQueue;$/;"	m	language:C++	class:TrajectoryQueue
mRefPath	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^    OgrePath* mRefPath;$/;"	m	language:C++	class:WmrAnimation
mResourcesCfg	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    Ogre::String mResourcesCfg;$/;"	m	language:C++	class:BaseApplication
mRoot	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    Ogre::Root *mRoot;$/;"	m	language:C++	class:BaseApplication
ms	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    const OIS::MouseState &ms = mMouse->getMouseState();$/;"	l	language:C++
ms	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    const OIS::MouseState &ms = mMouse->getMouseState();$/;"	l	language:C++
ms	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    const OIS::MouseState &ms = mMouse->getMouseState();$/;"	l	language:C++
ms	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    const OIS::MouseState &ms = mMouse->getMouseState();$/;"	l	language:C++
mSceneMgr	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgreDynamicObstacles.h	/^    Ogre::SceneManager *const mSceneMgr;$/;"	m	language:C++	class:OgreDynamicObstacles::Ogre
mSceneMgr	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgrePath.h	/^    Ogre::SceneManager *const mSceneMgr;$/;"	m	language:C++	class:OgrePath::Ogre
mSceneMgr	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    Ogre::SceneManager* mSceneMgr;$/;"	m	language:C++	class:BaseApplication
mSceneMgr	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgrePath.h	/^    Ogre::SceneManager *const mSceneMgr;$/;"	m	language:C++	class:OgrePath::Ogre
mShutDown	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    bool mShutDown;$/;"	m	language:C++	class:BaseApplication
mSimInterfacePtr	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    SimInterface* mSimInterfacePtr;$/;"	m	language:C++	class:dad_local_planner::PurePursuitController
mSpeed	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    double mSpeed;$/;"	m	language:C++	class:SimInterface
mSpeed	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    double mSpeed;$/;"	m	language:C++	class:SimInterface
mSpeedCmd	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    double mSpeedCmd;$/;"	m	language:C++	class:SimInterface
mSpeedCmd	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    double mSpeedCmd;$/;"	m	language:C++	class:SimInterface
mState	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    STATE mState;$/;"	m	language:C++	class:dad_local_planner::PurePursuitController
mThickness	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgrePath.h	/^    float mThickness;$/;"	m	language:C++	class:OgrePath
mThickness	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgrePath.h	/^    float mThickness;$/;"	m	language:C++	class:OgrePath
mTrajectoryQueuePtr	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    TrajectoryQueue* mTrajectoryQueuePtr;$/;"	m	language:C++	class:dad_local_planner::PurePursuitController
mTrayMgr	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    OgreBites::SdkTrayManager* mTrayMgr;$/;"	m	language:C++	class:BaseApplication
mTurnRadiusCmd	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    double mTurnRadiusCmd;$/;"	m	language:C++	class:SimInterface
mTurnRadiusCmd	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    double mTurnRadiusCmd;$/;"	m	language:C++	class:SimInterface
mulcMat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void mulcMat(const int nrows, const int ncols, const Type m, Type Dest[] ) { $/;"	f	language:C++
mulcMat3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	173;"	d	language:C++
mulcMatBlock	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void mulcMatBlock(const int nrows, const int ri, const int ci, const int nrows_block, const int ncols_block, const Type m, Type Dest[] ) { $/;"	f	language:C++
mulcMatCol	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void mulcMatCol(const int nrows, const int ci, const Type m, Type Dest[] ) { $/;"	f	language:C++
mulcMatRow	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void mulcMatRow(const int nrows, const int ncols, const int ri, const Type m, Type Dest[] ) { $/;"	f	language:C++
mulcVec	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void mulcVec(const int n, const Type m, Type Dest[]) {$/;"	f	language:C++
mulcVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	144;"	d	language:C++
multMatMat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void multMatMat(const int nrows_a, const int ncols_a, const Type A[], const int ncols_b, const Type B[], const Type m, Type AB[]) {$/;"	f	language:C++
multMatMat3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	254;"	d	language:C++
multMatTMat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void multMatTMat(const int nrows_a, const int ncols_a, const Type A[], const int ncols_b, const Type B[], const Type m, Type ATB[]) {$/;"	f	language:C++
multMatTMat3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	262;"	d	language:C++
multMatTVec	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void multMatTVec(const int nrows, const int ncols, const Type A[], const Type b[], const Type m, Type ATb[]) {$/;"	f	language:C++
multMatTVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	245;"	d	language:C++
multMatVec	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void multMatVec(const int nrows, const int ncols, const Type A[], const Type b[], const Type m, Type Ab[]) {$/;"	f	language:C++
multMatVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	/^inline void multMatVec3(const Mat3 A, const Vec3 b, Vec3 c) {$/;"	f	language:C++
multMatVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	232;"	d	language:C++
multMatVec6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^inline void multMatVec6b(const Mat6b M, const Vec6b v, Vec6b w) {$/;"	f	language:C++
multPluckerTInertiaPlucker	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^void multPluckerTInertiaPlucker(const Mat6b P, const Mat6b I, Mat6b R); \/\/faster alternative$/;"	p	language:C++
multPluckerTVec6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	212;"	d	language:C++
multPluckerVec6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	198;"	d	language:C++
Mw	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const Real Mw = .1*TotalMass\/Real(nw); \/\/mass of wheel$/;"	l	language:C++
Mw	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real Mw = 1*.5;		\/\/mass of wheel$/;"	l	language:C++
Mw	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const Real Mw = .1*TotalMass\/Real(nw); \/\/mass of wheel$/;"	l	language:C++
Mw	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const Real Mw = .1*TotalMass\/Real(nw); \/\/mass of wheel$/;"	l	language:C++
mWindow	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    Ogre::RenderWindow* mWindow;$/;"	m	language:C++	class:BaseApplication
M_	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	/^	Real M_[3*3];$/;"	l	language:C++
M_	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^	Real M_[6*6];$/;"	l	language:C++
M_PI	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	45;"	d	language:C++
M_PI	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	46;"	d	language:C++
M_TAU	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	/^const Real M_TAU = 2*M_PI; \/\/faster?$/;"	v	language:C++
N	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    const double N = 10;$/;"	l	language:C++
N	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        f >> N;$/;"	l	language:C++
N	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        int N;$/;"	l	language:C++
n	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	/^	Real n = normVec3(A);$/;"	l	language:C++
n	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^	int n = nrows*ncols; \/\/much slower without this$/;"	l	language:C++
n	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^	int n = nrows*ncols;$/;"	l	language:C++
n	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^	Real n = normVec3(q+1);$/;"	l	language:C++
n	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	int n[2]; \/\/number$/;"	m	language:C++	class:GridSurf
N1	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                        float N1[3], N2[3]; \/\/normal vectors$/;"	l	language:C++
N1	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                        float N1[3], N2[3]; \/\/normal vectors$/;"	l	language:C++
N1	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^						float N1[3], N2[3]; \/\/normal vectors$/;"	l	language:C++
N1	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                        float N1[3], N2[3]; \/\/normal vectors$/;"	l	language:C++
N2	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                        float N1[3], N2[3]; \/\/normal vectors$/;"	l	language:C++
N2	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                        float N1[3], N2[3]; \/\/normal vectors$/;"	l	language:C++
N2	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^						float N1[3], N2[3]; \/\/normal vectors$/;"	l	language:C++
N2	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                        float N1[3], N2[3]; \/\/normal vectors$/;"	l	language:C++
na	/home/rpradeep/Desktop/kft/src/main.cpp	/^    const int na = mdl.get_na();$/;"	l	language:C++
na	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const int na = 4; \/\/4 independently actuated wheels$/;"	l	language:C++
na	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    const int na = mdl.get_na();$/;"	l	language:C++
na	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	int na; \/\/number of actuated frames (or joints)$/;"	m	language:C++	class:WmrModel
na	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^		const int na = mdl.get_na();$/;"	l	language:C++
na	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const int na = 4; \/\/4 independently actuated wheels$/;"	l	language:C++
na	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int na = mdl.get_na();$/;"	l	language:C++
na	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int na = mdl.get_na();$/;"	l	language:C++
na	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int na = mdl.get_na();$/;"	l	language:C++
na	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int na = mdl.get_na();$/;"	l	language:C++
na	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    const int na = mdl.get_na();$/;"	l	language:C++
na	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const int na = 4; \/\/4 independently actuated wheels$/;"	l	language:C++
na	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int na = mdl.get_na(); $/;"	l	language:C++
na	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	const int na = mdl.get_na(); $/;"	l	language:C++
nac	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nac = na;$/;"	l	language:C++
nac	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nac = na;$/;"	l	language:C++
name	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^        ss << name << ".txt";$/;"	l	language:C++
name	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    ss << name <<".txt";$/;"	l	language:C++
name	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    ss << name <<".txt";$/;"	l	language:C++
name	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	std::string name;$/;"	m	language:C++	class:Frame
nameToInd	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	int nameToInd(const std::string Name) const; \/\/returns index of frame by name$/;"	p	language:C++	class:WmrModel
nameToInd	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^int WmrModel::nameToInd(const std::string name) const {$/;"	f	language:C++	class:WmrModel
nb	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	int nb; \/\/number of bodies$/;"	m	language:C++	class:WmrModelODE
nc	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nc = ncc + nac + njc;$/;"	l	language:C++
nc	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nc = ncc + nac + njc;$/;"	l	language:C++
nc	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int nc = 3*npic; \/\/number of constraints (rows of A)$/;"	l	language:C++
nc	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int nc = 3*npic; \/\/number of constraints (rows of A)$/;"	l	language:C++
nc	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int nc = ncc + njc; \/\/total number of constraints$/;"	l	language:C++
ncc	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int ncc = 3*npic;$/;"	l	language:C++
ncc	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	int ncc = 0;$/;"	l	language:C++
ncc	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int ncc = 3*npic; \/\/number of contact constraints$/;"	l	language:C++
nce	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    size_t nce = lines[lineno]->getNumChainElements(chainno);$/;"	l	language:C++
nce	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    size_t nce = lines[lineno]->getNumChainElements(chainno);$/;"	l	language:C++
nce	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	size_t nce = lines[lineno]->getNumChainElements(chainno);$/;"	l	language:C++
ncoords	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	int ncoords(int part_no) { return (int) coord[part_no].size() \/ 3; }$/;"	f	language:C++	class:VrmlData
ne	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            int ne = (int) evert_idx_1.size();$/;"	l	language:C++
ne	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            int ne = (int) evert_idx_1.size();$/;"	l	language:C++
ne	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int ne; \/\/size of error vector$/;"	l	language:C++
ne	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			int ne = (int) evert_idx_1.size();$/;"	l	language:C++
ne	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            int ne = (int) evert_idx_1.size();$/;"	l	language:C++
negativeVelocityPenaltyFactor	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double negativeVelocityPenaltyFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
negativeVelocityPenaltyFactor	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double negativeVelocityPenaltyFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
newPoint	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    Eigen::Vector2d newPoint = Eigen::Vector2d ( transformedMp.x.back(),transformedMp.y.back() );$/;"	l	language:C++
newPositionVector	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^        Eigen::Vector2d newPositionVector = interpolatedPosition_[i];$/;"	l	language:C++
newVal	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^        Ogre::String newVal;$/;"	l	language:C++
newVal	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^        Ogre::String newVal;$/;"	l	language:C++
newVal	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^        Ogre::String newVal;$/;"	l	language:C++
newVal	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^        Ogre::String newVal;$/;"	l	language:C++
newVal	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^        Ogre::String newVal;$/;"	l	language:C++
newVal	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^        Ogre::String newVal;$/;"	l	language:C++
newVal	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^        Ogre::String newVal;$/;"	l	language:C++
newVal	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^        Ogre::String newVal;$/;"	l	language:C++
nf	/home/rpradeep/Desktop/kft/src/main.cpp	/^    const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const int nf = 6; \/\/6 triangular faces (2 in bottom quad)$/;"	l	language:C++
nf	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const int nf=6; \/\/number of faces$/;"	l	language:C++
nf	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	int nf;				\/\/number of frames$/;"	m	language:C++	class:WmrModel
nf	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const int nf = 6; \/\/6 triangular faces (2 in bottom quad)$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const int nf=6; \/\/number of faces$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nf = mdl.get_nf(); \/\/number of frames in WmrModel obj$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nf = mdl.get_nf(); \/\/number of frames$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const int nf = 6; \/\/6 triangular faces (2 in bottom quad)$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const int nf=6; \/\/number of faces$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const int nf = 6; \/\/6 triangular faces (2 in bottom quad)$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const int nf=6; \/\/number of faces$/;"	l	language:C++
nf	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	const int nf = mdl.get_nf();$/;"	l	language:C++
nfree	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int nfree;$/;"	l	language:C++
nfree	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int nfree=0;$/;"	l	language:C++
ninpt	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	int ninpt; \/\/number of inputs$/;"	l	language:C++
nj	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	int nj = mdl.get_nf()-1; \/\/number of joints$/;"	l	language:C++
nj	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const int nj = mdl.get_nf()-1; \/\/number of joints$/;"	l	language:C++
nj	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	int nj = mdl.get_nf()-1; \/\/number of joints$/;"	l	language:C++
nj	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nj = nf - 1;$/;"	l	language:C++
nj	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nj = nf-1;$/;"	l	language:C++
nj	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nj = nf-1; \/\/number of joints$/;"	l	language:C++
nj	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	int nj = mdl.get_nf()-1; \/\/number of joints$/;"	l	language:C++
njc	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	int njc;			\/\/number of (holonomic) joint constraints$/;"	m	language:C++	class:WmrModel
njc	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int njc = mdl.get_njc();$/;"	l	language:C++
njc	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int njc = mdl.get_njc();$/;"	l	language:C++
njc	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int njc = mdl.get_njc(); \/\/number of (holonomic) joint constraints$/;"	l	language:C++
nl	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	int nl; \/\/number of lines$/;"	m	language:C++	class:WmrAnimation
nl	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	int nl; \/\/number of lines$/;"	m	language:C++	class:WmrAnimation
nl	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	int nl; \/\/number of lines$/;"	m	language:C++	class:WmrAnimation
nn	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	int nn; \/\/number of nodes (one per frame in WmrModel)$/;"	m	language:C++	class:WmrAnimation
nn	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	int nn; \/\/number of nodes (one per frame in WmrModel)$/;"	m	language:C++	class:WmrAnimation
nn	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	int nn; \/\/number of nodes (one per frame in WmrModel)$/;"	m	language:C++	class:WmrAnimation
nn	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    int nn; \/\/number of nodes (one per frame in WmrModel)$/;"	m	language:C++	class:WMRSim
nn	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^	int nn; \/\/number of nodes (one per frame in WmrModel)$/;"	m	language:C++	class:WMRSim
nn	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^	int nn; \/\/number of nodes (one per frame in WmrModel)$/;"	m	language:C++	class:WMRSim
Node	/home/rpradeep/Desktop/kft/src/planner/Node.cpp	/^Node::Node()$/;"	f	language:C++	class:Node
node	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgreDynamicObstacles.cpp	/^        Ogre::SceneNode* node = mSceneMgr->getRootSceneNode()->createChildSceneNode();$/;"	l	language:C++
nodeId	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    insertVertex_ ( boost::get<0> ( ind ),boost::get<1> ( ind ),boost::get<2> ( ind ), nodeId );$/;"	l	language:C++
nodes	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	Ogre::SceneNode* nodes[MAXNN];$/;"	m	language:C++	class:WmrAnimation
nodes	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	Ogre::SceneNode* nodes[MAXNN];$/;"	m	language:C++	class:WmrAnimation
nodes	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	Ogre::SceneNode* nodes[MAXNN];$/;"	m	language:C++	class:WmrAnimation
nodes	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    Ogre::SceneNode* nodes[MAXNN];$/;"	m	language:C++	class:WMRSim
nodes	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^	Ogre::SceneNode* nodes[MAXNN];$/;"	m	language:C++	class:WMRSim
nodes	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^	Ogre::SceneNode* nodes[MAXNN];$/;"	m	language:C++	class:WMRSim
nodes_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    std::vector<STNode> nodes_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
nodes_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    std::vector<Node> nodes_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
node_idx	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^        int node_idx = nf-1;$/;"	l	language:C++
node_idx	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^        int node_idx = nf-1;$/;"	l	language:C++
node_idx	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^		int node_idx = nf-1;$/;"	l	language:C++
node_ind	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            int node_ind = nf + wno; \/\/node index for contact frame$/;"	l	language:C++
node_ind	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            int node_ind = nf + wno; \/\/node index for contact frame$/;"	l	language:C++
node_ind	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			int node_ind = nf + wno; \/\/node index for contact frame$/;"	l	language:C++
normal	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                    manual->normal(normal[0],normal[1],normal[2]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                float normal[3];$/;"	l	language:C++
normal	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            manual->normal( normals[face_no] );$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            manual->normal(normals[face_no]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            manual->normal(nvec[0], nvec[1], nvec[2]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            manual->normal(pec_[0],pec_[1],pec_[2]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	std::vector<T> normal[MAX_NUM_PARTS];$/;"	m	language:C++	class:VrmlData
normal	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                    manual->normal(normal[0],normal[1],normal[2]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                float normal[3];$/;"	l	language:C++
normal	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            manual->normal( normals[face_no] );$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            manual->normal(normals[face_no]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            manual->normal(nvec[0], nvec[1], nvec[2]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            manual->normal(pec_[0],pec_[1],pec_[2]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^					manual->normal(normal[0],normal[1],normal[2]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^				float normal[3];$/;"	l	language:C++
normal	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			manual->normal( normals[face_no] );$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			manual->normal(normals[face_no]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			manual->normal(nvec[0], nvec[1], nvec[2]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			manual->normal(pec_[0],pec_[1],pec_[2]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                    manual->normal(normal[0],normal[1],normal[2]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                float normal[3];$/;"	l	language:C++
normal	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            manual->normal( normals[face_no] );$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            manual->normal(normals[face_no]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            manual->normal(nvec[0], nvec[1], nvec[2]);$/;"	p	language:C++	file:
normal	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            manual->normal(pec_[0],pec_[1],pec_[2]);$/;"	p	language:C++	file:
normalizeAngle	/home/rpradeep/Desktop/kft/src/planner/Node.cpp	/^void normalizeAngle ( double& angle )$/;"	f	language:C++	namespace:dad_local_planner
normalizeQuat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^inline void normalizeQuat( VecQuat q) {$/;"	f	language:C++
normalizeVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	/^inline void normalizeVec3(Vec3 A) {$/;"	f	language:C++
normals	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::Vector3 normals[nf];$/;"	l	language:C++
normals	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::Vector3 normals[nf];$/;"	l	language:C++
normals	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Ogre::Vector3 normals[nf];$/;"	l	language:C++
normals	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Ogre::Vector3 normals[nf];$/;"	l	language:C++
normals	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Ogre::Vector3 normals[nf];$/;"	l	language:C++
normals	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Ogre::Vector3 normals[nf];$/;"	l	language:C++
normals	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    Ogre::Vector3 normals[nf];$/;"	l	language:C++
normals	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    Ogre::Vector3 normals[nf];$/;"	l	language:C++
normal_idx	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	std::vector<int> normal_idx[MAX_NUM_PARTS];$/;"	m	language:C++	class:VrmlData
normal_idx_1	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            std::vector<int> normal_idx_1(nv*nv,-1); \/\/1st$/;"	p	language:C++	file:
normal_idx_1	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            std::vector<int> normal_idx_1(nv*nv,-1); \/\/1st$/;"	p	language:C++	file:
normal_idx_1	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			std::vector<int> normal_idx_1(nv*nv,-1); \/\/1st$/;"	p	language:C++	file:
normal_idx_1	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            std::vector<int> normal_idx_1(nv*nv,-1); \/\/1st$/;"	p	language:C++	file:
normal_idx_2	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            std::vector<int> normal_idx_2(nv*nv,-1); \/\/2nd$/;"	p	language:C++	file:
normal_idx_2	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            std::vector<int> normal_idx_2(nv*nv,-1); \/\/2nd$/;"	p	language:C++	file:
normal_idx_2	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			std::vector<int> normal_idx_2(nv*nv,-1); \/\/2nd$/;"	p	language:C++	file:
normal_idx_2	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            std::vector<int> normal_idx_2(nv*nv,-1); \/\/2nd$/;"	p	language:C++	file:
normVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	183;"	d	language:C++
np	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            int np = tcontacts[tno].get_np();$/;"	l	language:C++
np	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    int np = vrml.nparts();$/;"	l	language:C++
np	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	int np;		\/\/number of contact points$/;"	m	language:C++	class:TrackContactGeom
np	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            int np = tcontacts[tno].get_np();$/;"	l	language:C++
np	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    int np = vrml.nparts();$/;"	l	language:C++
np	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	int np = 0;$/;"	l	language:C++
np	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	int np = 0;$/;"	l	language:C++
np	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	int np; \/\/total number of points$/;"	l	language:C++
np	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int np = 0; \/\/total number of points$/;"	l	language:C++
np	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			int np = tcontacts[tno].get_np();$/;"	l	language:C++
np	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	int np = vrml.nparts();$/;"	l	language:C++
np	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    int np = vrml.nparts();$/;"	l	language:C++
nparts	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	int nparts() { return nparts_; }$/;"	f	language:C++	class:VrmlData
nparts_	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	int nparts_;$/;"	m	language:C++	class:VrmlData
npic	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	int npic; \/\/number of points in contact$/;"	l	language:C++
npic	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int npic = 0; \/\/total number of points in contact$/;"	l	language:C++
npic	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int npic; \/\/number of points in contact$/;"	l	language:C++
npic	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int npic=0; \/\/number of points in contact$/;"	l	language:C++
npic_track	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		const int npic_track = logicalFind(contacts[tno].get_np(), contacts[tno].incontact, incontactinds);$/;"	l	language:C++
np_	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		int np_ = tcontacts[tno].get_np(); \/\/number of points for this track only$/;"	l	language:C++
np_	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^			int np_ = tcontacts[tno].get_np(); \/\/number of points for this track only$/;"	l	language:C++
ns	/home/rpradeep/Desktop/kft/src/main.cpp	/^    const int ns = NUMSTATE(nf); \/\/number of states$/;"	l	language:C++
ns	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	int ns = NUMSTATE(nf); \/\/number of elements in state$/;"	l	language:C++
ns	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    const int ns = NUMSTATE(nf); \/\/number of states$/;"	l	language:C++
ns	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	int ns = NUMSTATE(nf); \/\/number of elements in state$/;"	l	language:C++
ns	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	int ns = NUMSTATE(nf); \/\/number of elements in state$/;"	l	language:C++
ns	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int ns = NUMSTATE(nf);$/;"	l	language:C++
ns	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int ns = NUMSTATE(nf);$/;"	l	language:C++
ns	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    const int ns = NUMSTATE(nf); \/\/number of states$/;"	l	language:C++
ns	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	int ns = NUMSTATE(nf); \/\/number of elements in state$/;"	l	language:C++
ns	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int ns = NUMSTATE(nf); \/\/number of states$/;"	l	language:C++
ns	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	const int ns = NUMSTATE(nf); \/\/number of states$/;"	l	language:C++
nsteps	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    const int nsteps = (int) floor(totalTime\/dt);$/;"	l	language:C++
nsteps	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    const int nsteps = (int) floor(totalTime\/dt);$/;"	l	language:C++
nsteps	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int nsteps = (int) floor(10.0\/dt);$/;"	l	language:C++
nsteps	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	const int nsteps = (int) floor(10.0\/dt);$/;"	l	language:C++
nt	/home/rpradeep/Desktop/kft/src/main.cpp	/^    const int nt = mdl.get_nt();$/;"	l	language:C++
nt	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^        const int nt = num_contacts;$/;"	l	language:C++
nt	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^        int nt = vrml.ntriangles(part_no); \/\/number of triangles$/;"	l	language:C++
nt	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const int nt = surf->get_nt(); \/\/number of triangles$/;"	l	language:C++
nt	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    const int nt = mdl.get_nt();$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	int nt;$/;"	m	language:C++	class:TriMeshSurf
nt	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	int nt; \/\/number of tracks$/;"	m	language:C++	class:WmrModel
nt	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^        const int nt = num_contacts;$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^        int nt = vrml.ntriangles(part_no); \/\/number of triangles$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const int nt = surf->get_nt(); \/\/number of triangles$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nt = mdl.get_nt();$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nt = mdl.get_nt();$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nt = mdl.get_nt(); \/\/number of tracks$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nt = mdl.get_nt();$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nt = mdl.get_nt();$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nt = mdl.get_nt();$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    const int nt = mdl.get_nt();$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrde/src/test.cpp	/^    const int nt = mdl.get_nt();$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int nt = mdl.get_nt();$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int nt = mdl.get_nt();$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^		const int nt = num_contacts;$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^		int nt = vrml.ntriangles(part_no); \/\/number of triangles$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const int nt = surf->get_nt(); \/\/number of triangles$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^        int nt = vrml.ntriangles(part_no); \/\/number of triangles$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const int nt = surf->get_nt(); \/\/number of triangles$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	const int nt = mdl.get_nt();$/;"	l	language:C++
nt	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	const int nt = mdl.get_nt();$/;"	l	language:C++
ntriangles	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	int ntriangles(int part_no) { return (int) coord_idx[part_no].size() \/ 4; } $/;"	f	language:C++	class:VrmlData
ntrue	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	int ntrue=0;$/;"	l	language:C++
ntrue	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	int ntrue=0;$/;"	l	language:C++
ntrue	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	int ntrue=0;$/;"	l	language:C++
ntrue	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	int ntrue=0;$/;"	l	language:C++
numberOfObstacles	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        obstacle_section << "Obstacle" << numberOfObstacles;$/;"	l	language:C++
numberOfObstacles	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^    int numberOfObstacles = 0;$/;"	l	language:C++
NUMQVEL	/home/rpradeep/Desktop/wmrde/include/wmrde/state.h	30;"	d	language:C++
NUMSTATE	/home/rpradeep/Desktop/wmrde/include/wmrde/state.h	29;"	d	language:C++
nv	/home/rpradeep/Desktop/kft/src/main.cpp	/^    const int nv = NUMQVEL(nf); \/\/size of joint space vel$/;"	l	language:C++
nv	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            int nv = vrml.ncoords(part_no);$/;"	l	language:C++
nv	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const int nv = 5;$/;"	l	language:C++
nv	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const int nv=8; \/\/number of vertices$/;"	l	language:C++
nv	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^		int nv = NUMQVEL(mdl.get_nf());$/;"	l	language:C++
nv	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    const int nv = NUMQVEL(nf); \/\/size of joint space vel$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	int nv;$/;"	m	language:C++	class:TriMeshSurf
nv	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            int nv = vrml.ncoords(part_no);$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const int nv = 5;$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const int nv=8; \/\/number of vertices$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^		const int nv = NUMQVEL(mdl.get_nf());$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^		const int nv = 6;$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^		const int nv = 8;$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^		int nv = NUMQVEL(mdl.get_nf());$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nv = NUMQVEL(nf);$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nv = NUMQVEL(nf);$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nv = NUMQVEL(nf);$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nv = NUMQVEL(nf);$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nv = NUMQVEL(nf);$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nv = TOQVELI(nf);$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nv = NUMQVEL(nf); \/\/size of joint space vel (cols of A)$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nv = NUMQVEL(nf); \/\/size of qvel$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nv = NUMQVEL(nf);$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    const int nv = NUMQVEL(nf); \/\/size of joint space vel$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^		int nv = NUMQVEL(mdl.get_nf());$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int nv = NUMQVEL(nf); \/\/size of joint space vel$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			int nv = vrml.ncoords(part_no);$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const int nv = 5;$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const int nv=8; \/\/number of vertices$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            int nv = vrml.ncoords(part_no);$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const int nv = 5;$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const int nv=8; \/\/number of vertices$/;"	l	language:C++
nv	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	const int nv = NUMQVEL(nf); \/\/size of joint space vel$/;"	l	language:C++
nvec	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Vec3 nvec; \/\/normal vector$/;"	l	language:C++
nvec	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Vec3 nvec; \/\/normal vector$/;"	l	language:C++
nvec	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Vec3 nvec; \/\/normal vector$/;"	l	language:C++
nvec	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    Vec3 nvec; \/\/normal vector$/;"	l	language:C++
nw	/home/rpradeep/Desktop/kft/src/main.cpp	/^    const int nw = mdl.get_nw();$/;"	l	language:C++
nw	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^        const int nw = num_contacts;$/;"	l	language:C++
nw	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const int nw = 4;$/;"	l	language:C++
nw	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const int nw=4; \/\/number of wheels$/;"	l	language:C++
nw	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const int nw=4;$/;"	l	language:C++
nw	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    const int nw = mdl.get_nw();$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	int nw; \/\/number of wheels$/;"	m	language:C++	class:WmrModel
nw	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^        const int nw = num_contacts;$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const int nw=6; \/\/number of wheels$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	const int nw = mdl.get_nw();$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const int nw = 4;$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const int nw=4; \/\/number of wheels$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const int nw=4;$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^	const int nw = mdl.get_nw();$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nw = mdl.get_nw();$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int nw = mdl.get_nw();$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nw = mdl.get_nw(); \/\/number of wheels$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nw = mdl.get_nw();$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nw = mdl.get_nw();$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int nw = mdl.get_nw();; \/\/number of wheels$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    const int nw = mdl.get_nw();$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const int nw = 4;$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const int nw=4; \/\/number of wheels$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const int nw=4;$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int nw = mdl.get_nw();$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int nw = mdl.get_nw();$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^		const int nw = num_contacts;$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	const int nw = mdl.get_nw();$/;"	l	language:C++
nw	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	const int nw = mdl.get_nw();$/;"	l	language:C++
nx	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const int nx = surf->get_nx();$/;"	l	language:C++
nx	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const int nx = surf->get_nx();$/;"	l	language:C++
nx	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const int nx = surf->get_nx();$/;"	l	language:C++
nx	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const int nx = surf->get_nx();$/;"	l	language:C++
ny	/home/rpradeep/Desktop/kft/src/main.cpp	/^    int ny;$/;"	l	language:C++
ny	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const int ny = surf->get_ny();$/;"	l	language:C++
ny	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    int ny;$/;"	l	language:C++
ny	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const int ny = surf->get_ny();$/;"	l	language:C++
ny	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    int ny;$/;"	l	language:C++
ny	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	int ny;$/;"	l	language:C++
ny	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const int ny = surf->get_ny();$/;"	l	language:C++
ny	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const int ny = surf->get_ny();$/;"	l	language:C++
ny	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	int ny;$/;"	l	language:C++
ob	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        const DynamicObstacle& ob = dynamicObstaclesVector_[i];$/;"	l	language:C++
ob	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        const DynamicObstacle& ob = dynamicObstaclesVector_[i];$/;"	l	language:C++
obstaclePosition	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^            Eigen::Vector2d obstaclePosition;$/;"	l	language:C++
obstaclePosition	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        Eigen::Vector2d obstaclePosition;$/;"	l	language:C++
obstacle_section	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        std::stringstream obstacle_section;$/;"	l	language:C++
odeDyn	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^void odeDyn(const Real time, const Real y[], const WmrModel& mdl, const SurfaceVector& surfaces, ContactGeom* contacts, const Real dt, \/\/inputs$/;"	p	language:C++
odeDyn	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^void odeDyn(const Real time, const Real y[], const WmrModel& mdl, const SurfaceVector& surfaces, ContactGeom* contacts, const Real dt, \/\/inputs$/;"	f	language:C++
odeKin	/home/rpradeep/Desktop/wmrde/include/wmrde/kinematics.h	/^void odeKin( const Real time, const Real y[], const WmrModel& mdl, const SurfaceVector& surfaces, ContactGeom* contacts, \/\/inputs$/;"	p	language:C++
odeKin	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^void odeKin( const Real time, const Real y[], const WmrModel& mdl, const SurfaceVector& surfaces, ContactGeom* contacts, \/\/inputs$/;"	f	language:C++
odeWgc	/home/rpradeep/Desktop/wmrde/include/wmrde/wheelgroundcontact.h	/^void odeWgc( const Real params[], const Vec3 vc, const Real Rw, const Real dz, \/\/inputs$/;"	p	language:C++
ODE_WGC	/home/rpradeep/Desktop/wmrde/include/wmrde/wheelgroundcontact.h	50;"	d	language:C++
offsetX	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    double offsetX = x - originX_;$/;"	l	language:C++
offsetY	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    double offsetY = y - originY_;$/;"	l	language:C++
ofile	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^        std::ofstream ofile(ss.str());$/;"	p	language:C++
OgreDynamicObstacles	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgreDynamicObstacles.h	/^    OgreDynamicObstacles(Ogre::SceneManager *const sceneMgr, Ogre::ColourValue color = Ogre::ColourValue(0.2,0.7,0.2) );$/;"	p	language:C++	class:OgreDynamicObstacles
OgreDynamicObstacles	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgreDynamicObstacles.h	/^class OgreDynamicObstacles$/;"	c	language:C++
OgreDynamicObstacles	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgreDynamicObstacles.cpp	/^OgreDynamicObstacles::OgreDynamicObstacles(Ogre::SceneManager *const sceneMgr, Ogre::ColourValue color  ):$/;"	f	language:C++	class:OgreDynamicObstacles
OgrePath	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgrePath.h	/^    OgrePath(Ogre::SceneManager *const sceneMgr, Ogre::ColourValue color = Ogre::ColourValue(0.2,0.7,0.2) );$/;"	p	language:C++	class:OgrePath
OgrePath	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgrePath.h	/^class OgrePath$/;"	c	language:C++
OgrePath	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgrePath.cpp	/^OgrePath::OgrePath(Ogre::SceneManager *const sceneMgr, Ogre::ColourValue color):$/;"	f	language:C++	class:OgrePath
OgrePath	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgrePath.h	/^    OgrePath(Ogre::SceneManager *const sceneMgr);$/;"	p	language:C++	class:OgrePath
OgrePath	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgrePath.h	/^class OgrePath$/;"	c	language:C++
OgrePath	/home/rpradeep/Desktop/wmrde/src/animate/OgrePath.cpp	/^OgrePath::OgrePath(Ogre::SceneManager *const sceneMgr):$/;"	f	language:C++	class:OgrePath
OgreText	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^    OgreText()$/;"	f	language:C++	class:OgreText
OgreText	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^class OgreText$/;"	c	language:C++
OgreText	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^    OgreText()$/;"	f	language:C++	class:OgreText
OgreText	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^class OgreText$/;"	c	language:C++
olm	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^    Ogre::OverlayManager *olm;$/;"	m	language:C++	class:OgreText
olm	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^    OverlayManager *olm;$/;"	m	language:C++	class:OgreText
omega	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real omega, gamma_l, gamma_r, vbl, vbr, vfl, vfr;$/;"	l	language:C++
op	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    OgrePath op(mSceneMgr);$/;"	p	language:C++	file:
operator ()	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    bool operator() ( const STNode& lhs, const STNode&rhs ) const$/;"	f	language:C++	class:dad_local_planner::STNodeComparator
operator <<	/home/rpradeep/Desktop/kft/src/planner/Node.cpp	/^std::ostream& operator<< ( std::ostream& os, const Node& nd )$/;"	f	language:C++	namespace:dad_local_planner
operator =	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^SpatialHash& SpatialHash::operator=(const SpatialHash& other)$/;"	f	language:C++	class:SpatialHash
ori	/home/rpradeep/Desktop/kft/src/main.cpp	/^        Vec3 ori;$/;"	l	language:C++
ori	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^            Vec3 ori;$/;"	l	language:C++
ori	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^            Vec3 ori;$/;"	l	language:C++
orient	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	VecOrient orient;$/;"	l	language:C++
orient	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	VecOrient orient;$/;"	l	language:C++
orient	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	VecOrient orient;$/;"	l	language:C++
orient	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	VecOrient orient;$/;"	l	language:C++
orientrateToVel	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	214;"	d	language:C++
orientrateToVel	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	223;"	d	language:C++
orientToRot	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	211;"	d	language:C++
orientToRot	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	220;"	d	language:C++
other	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    ( const PurePursuitController& other ) = delete;$/;"	m	language:C++	class:dad_local_planner::PurePursuitController
other	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    ( PurePursuitController&& other ) = delete;$/;"	m	language:C++	class:dad_local_planner::PurePursuitController
other	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    PurePursuitController ( const PurePursuitController& other ) = delete;$/;"	m	language:C++	class:dad_local_planner::PurePursuitController
other	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    PurePursuitController ( PurePursuitController&& other ) = delete;$/;"	m	language:C++	class:dad_local_planner::PurePursuitController
out	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	int out = -1;$/;"	l	language:C++
outputSolutionVector	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    std::vector<KFTSolutionElement> outputSolutionVector;$/;"	l	language:C++
overlay	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^    Ogre::Overlay *overlay;$/;"	m	language:C++	class:OgreText
overlay	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^    Overlay *overlay;$/;"	m	language:C++	class:OgreText
p	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^	Type p=0; \/\/product$/;"	l	language:C++
p	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^	const Real* p = M+j; \/\/pointer to first element of column$/;"	l	language:C++
p	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^	const Real* p = M+j; \/\/pointer to first element of column$/;"	l	language:C++
p	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		Real p[MAXNV];$/;"	l	language:C++
p	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real p[MAXNS];$/;"	l	language:C++
pacejkaDerivatives	/home/rpradeep/Desktop/wmrde/include/wmrde/wheelgroundcontact.h	/^void pacejkaDerivatives(const Real Ba, const Real Bs, const Real Ca, const Real Cs, const Real Da, const Real Ds, const Real Ea, const Real Es, const Real Ka, const Real Ks, const Real alpha, const Real fz, const Real mu, const Real s, const Real sgn, \/\/inputs$/;"	p	language:C++
pacejkaWgc	/home/rpradeep/Desktop/wmrde/include/wmrde/wheelgroundcontact.h	/^void pacejkaWgc( const Real params[], const Vec3 vc, const Real Rw, const Real dz, \/\/inputs$/;"	p	language:C++
PACEJKA_WGC	/home/rpradeep/Desktop/wmrde/include/wmrde/wheelgroundcontact.h	51;"	d	language:C++
panel	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^    Ogre::OverlayContainer *panel ;$/;"	m	language:C++	class:OgreText
panel	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^    OverlayContainer *panel ;$/;"	m	language:C++	class:OgreText
parentId	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    int parentId;$/;"	m	language:C++	class:dad_local_planner::STNode
parent_fi	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^			int parent_fi = frames[fi].parent_ind;$/;"	l	language:C++
parent_fi	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		int parent_fi = frames[fi].parent_ind; \/\/parent frame index$/;"	l	language:C++
parent_fi	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		int parent_fi = frames[fi].parent_ind;$/;"	l	language:C++
parent_ind	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	int parent_ind[MAXNN];$/;"	m	language:C++	class:WmrAnimation
parent_ind	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	int parent_ind[MAXNN];$/;"	m	language:C++	class:WmrAnimation
parent_ind	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	int parent_ind;		\/\/index of parent frame$/;"	m	language:C++	class:Frame
parent_ind	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	int parent_ind[MAXNN];$/;"	m	language:C++	class:WmrAnimation
parent_ind	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    int parent_ind[MAXNN];$/;"	m	language:C++	class:WMRSim
parseTrackContacts	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^int parseTrackContacts(const TrackContactGeom* tcontacts, const int nt,	bool incontact[], Real dz0[], int whichtrack[]);$/;"	p	language:C++
parseTrackContacts	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^int parseTrackContacts(const TrackContactGeom* tcontacts, const int nt,	bool incontact[], Real dz0[], int whichtrack[]) {$/;"	f	language:C++
parseWheelContacts	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^int parseWheelContacts(const WheelContactGeom* wcontacts, const int nw, bool incontact[], Real dz0[]);$/;"	p	language:C++
parseWheelContacts	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^int parseWheelContacts(const WheelContactGeom* wcontacts, const int nw, bool incontact[], Real dz0[]) {$/;"	f	language:C++
part_no	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^		int part_no=-1;$/;"	l	language:C++
pathPosition	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    double pathPosition = prevPlanPathPosition_;$/;"	l	language:C++
pathPosition	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    double pathPosition = initialPosition_;$/;"	l	language:C++
pathPosition	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    double pathPosition = 0;$/;"	l	language:C++
pathX	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^std::vector<double> pathX;$/;"	v	language:C++
pathY	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^        pathY.push_back((1+std::cos(i*6.28\/25))*std::sin(i*2*3.14\/50));$/;"	p	language:C++	file:
pathY	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^std::vector<double> pathY;$/;"	v	language:C++
pec	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const Real* pec = surf->get_pec();$/;"	l	language:C++
pec	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/PlaneSurf.h	/^	Real pec[4]; \/\/plane equation coefficients [a b c d]*[x y z 1]^T = 0$/;"	m	language:C++	class:PlaneSurf
pec	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	Real pec[4*MAXNT];		\/\/4 x nt, plane equation coefficients$/;"	m	language:C++	class:TriMeshSurf
pec	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const Real* pec = surf->get_pec();$/;"	l	language:C++
pec	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	Real pec[4]={0,0,1,0};$/;"	l	language:C++
pec	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const Real* pec = surf->get_pec();$/;"	l	language:C++
pec	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const Real* pec = surf->get_pec();$/;"	l	language:C++
pec_	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            const Real* pec_ = pec + S2I(0,tno,4); \/\/pointer to normal$/;"	l	language:C++
pec_	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            const Real* pec_ = pec + S2I(0,tno,4); \/\/pointer to normal$/;"	l	language:C++
pec_	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			const Real* pec_ = pec + S2I(0,tno,4); \/\/pointer to normal$/;"	l	language:C++
pec_	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            const Real* pec_ = pec + S2I(0,tno,4); \/\/pointer to normal$/;"	l	language:C++
penaltyFactor	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    const double penaltyFactor = ( childNode.v < 0 ) ? config_.negativeVelocityPenaltyFactor : config_.referenceDeviationPenaltyFactor;$/;"	l	language:C++
performCollisionCheck	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^    bool performCollisionCheck ( double& cost, const Trajectory& robotTrajectory );$/;"	p	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
performCollisionCheck	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^bool DynamicObstacleCostEvaluator::performCollisionCheck ( double& cost, const Trajectory& robotTrajectory )$/;"	f	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
performCollisionCheckAtTime	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^    bool performCollisionCheckAtTime ( double& cost, const Eigen::Vector2d& robotPosition, const double& time ) const;$/;"	p	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
performCollisionCheckAtTime	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^bool DynamicObstacleCostEvaluator::performCollisionCheckAtTime ( double& cost, const Eigen::Vector2d& robotPosition, const double& time ) const$/;"	f	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
performMovement	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^bool FirstPersonController::performMovement()$/;"	f	language:C++	class:FirstPersonController
PIact	/home/rpradeep/Desktop/wmrde/include/wmrde/actuator.h	/^void PIact( const Real params[], const Real ucmd, const Real u, const Real interr, \/\/inputs$/;"	p	language:C++
pl	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    OIS::ParamList pl;$/;"	l	language:C++
pl	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    OIS::ParamList pl;$/;"	l	language:C++
pl	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    OIS::ParamList pl;$/;"	l	language:C++
pl	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    OIS::ParamList pl;$/;"	l	language:C++
PLAN	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    enum DSTATUS {PLAN,WAIT,DONE};$/;"	e	language:C++	enum:DSTATUS	file:
PLAN	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    enum KSTATUS {PLAN,WAIT, INIT, DONE};$/;"	e	language:C++	enum:KSTATUS	file:
PLAN	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    enum DSTATUS {PLAN,WAIT,DONE};$/;"	e	language:C++	enum:DSTATUS	file:
PLAN	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    enum KSTATUS {PLAN,WAIT, INIT, DONE};$/;"	e	language:C++	enum:KSTATUS	file:
plane	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^  Ogre::Plane plane(Ogre::Vector3::UNIT_Z, 0);$/;"	p	language:C++	file:
PlaneSurf	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/PlaneSurf.h	/^	PlaneSurf(const Real PlaneEqnCoeff[4]);$/;"	p	language:C++	class:PlaneSurf
PlaneSurf	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/PlaneSurf.h	/^	PlaneSurf(const Vec3 normal, const Vec3 point);$/;"	p	language:C++	class:PlaneSurf
PlaneSurf	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/PlaneSurf.h	/^class PlaneSurf : public Surface {$/;"	c	language:C++
PluckerToHT	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^inline void PluckerToHT(const Mat6b P, HomogeneousTransform T) {$/;"	f	language:C++
pm	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^        Ogre::PolygonMode pm;$/;"	l	language:C++
pm	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^        Ogre::PolygonMode pm;$/;"	l	language:C++
pm	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^        Ogre::PolygonMode pm;$/;"	l	language:C++
pm	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^        Ogre::PolygonMode pm;$/;"	l	language:C++
pno	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^			int pno = incontactinds[i]; \/\/point number in list of all$/;"	l	language:C++
pno	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^			int pno = incontactinds[i]; \/\/point number$/;"	l	language:C++
pop	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^            priorityQueue_.pop();$/;"	p	language:C++	file:
pop	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^            priorityQueue_.pop();$/;"	p	language:C++	file:
populateChildNodeCosts	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    void populateChildNodeCosts ( STNode& childNode, const STNode& parentNode );$/;"	p	language:C++	class:dad_local_planner::DFTPlanner
populateChildNodeCosts	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    bool populateChildNodeCosts ( Node& childNode,const Node& parentNode, const MotionPrimitive& transformedMp, const Trajectory& trajectory);$/;"	p	language:C++	class:dad_local_planner::KFTPlanner
populateChildNodeCosts	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^void DFTPlanner::populateChildNodeCosts ( STNode& childNode, const STNode& parentNode )$/;"	f	language:C++	class:DFTPlanner
populateChildNodeCosts	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^bool KFTPlanner::populateChildNodeCosts ( Node &childNode, const Node &parentNode, const MotionPrimitive &transformedMp, const Trajectory& trajectory)$/;"	f	language:C++	class:KFTPlanner
populateTransitionData	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^    void populateTransitionData ( Node& childNode,const Node& parentNode, const Trajectory& traj );$/;"	p	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
populateTransitionData	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^void DynamicObstacleCostEvaluator::populateTransitionData ( Node& childNode, const Node& parentNode, const Trajectory& trajectory )$/;"	f	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
populateTransitionData	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    dynamicObstacleCostEvaluator_.populateTransitionData ( childNode, parentNode , trajectory ); \/\/ dynamic obstalce cost;$/;"	p	language:C++	file:
populateTransitionData	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    tubeCostEvaluator_.populateTransitionData ( childNode, parentNode , transformedMp ); \/\/ this sets the childNode state, path pos and tCost$/;"	p	language:C++	file:
populateTransitionData	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^void TubeCostEvaluator::populateTransitionData ( Node& childNode, const Node& parentNode, const MotionPrimitive& transformedMp ) const$/;"	f	language:C++	class:TubeCostEvaluator
pos	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^		Ogre::Vector3 pos( HT[0+COL3], HT[1+COL3], HT[2+COL3] );$/;"	p	language:C++
pos	/home/rpradeep/Desktop/kft/src/main.cpp	/^        Vec3 pos;$/;"	l	language:C++
pos	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        const Eigen::Vector2d pos(px,py);$/;"	p	language:C++	file:
pos	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                    float pos[3];$/;"	l	language:C++
pos	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                float pos[3];$/;"	l	language:C++
pos	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Vec3 pos; \/\/position$/;"	l	language:C++
pos	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Vec3 pos;$/;"	l	language:C++
pos	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^            Vec3 pos;$/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^		Ogre::Vector3 pos( HT[0+COL3], HT[1+COL3], HT[2+COL3] );$/;"	p	language:C++
pos	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                    float pos[3];$/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                float pos[3];$/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Vec3 pos; \/\/position$/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Vec3 pos;$/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	Vec3 pos; $/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Vec3 pos;$/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^            Vec3 pos;$/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^		Ogre::Vector3 pos( HT[0+COL3], HT[1+COL3], HT[2+COL3] );$/;"	p	language:C++
pos	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^        Ogre::Vector3 pos( HT[0+COL3], HT[1+COL3], HT[2+COL3] );$/;"	p	language:C++
pos	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^		Ogre::Vector3 pos( HT[0+COL3], HT[1+COL3], HT[2+COL3] );$/;"	p	language:C++
pos	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Vec3 pos;$/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^					float pos[3];$/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^				float pos[3];$/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Vec3 pos; \/\/position$/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                    float pos[3];$/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                float pos[3];$/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    Vec3 pos; \/\/position$/;"	l	language:C++
pos	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^		Ogre::Vector3 pos( HT[0+COL3], HT[1+COL3], HT[2+COL3] );$/;"	p	language:C++
poseToHT	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	229;"	d	language:C++
poseToIndex	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^PoseSpaceIndex SpatialHash::poseToIndex (const double x, const double y, const double th ) const$/;"	f	language:C++	class:SpatialHash
position	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^    double position;$/;"	m	language:C++	class:KFTSolutionElement
position	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^            std::stringstream position;$/;"	l	language:C++
position	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^            std::stringstream position;$/;"	l	language:C++
position	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        std::stringstream position;$/;"	l	language:C++
position	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                    manual->position(pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                manual->position(pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                manual->position(pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            manual->position( vertices[indices[face_no][vno]] );$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            manual->position(pos[0], pos[1], pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            manual->position(vertices[indices[face_no][vno]]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            manual->position(vert[0], vert[1], vert[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                    manual->position(pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                manual->position(pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                manual->position(pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            manual->position( vertices[indices[face_no][vno]] );$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            manual->position(pos[0], pos[1], pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            manual->position(vertices[indices[face_no][vno]]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            manual->position(vert[0], vert[1], vert[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^					manual->position(pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^				manual->position(pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^				manual->position(pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			manual->position( vertices[indices[face_no][vno]] );$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			manual->position(pos[0], pos[1], pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			manual->position(vertices[indices[face_no][vno]]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			manual->position(vert[0], vert[1], vert[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                    manual->position(pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                manual->position(pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                manual->position(pos[0],pos[1],pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            manual->position( vertices[indices[face_no][vno]] );$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            manual->position(pos[0], pos[1], pos[2]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            manual->position(vertices[indices[face_no][vno]]);$/;"	p	language:C++	file:
position	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            manual->position(vert[0], vert[1], vert[2]);$/;"	p	language:C++	file:
positionAtInsertPoint	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^        const double positionAtInsertPoint = trajectoryVector_[i].position;$/;"	l	language:C++
positionAtInsertPoint	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^        const double positionAtInsertPoint = trajectoryVector_[i].position;$/;"	l	language:C++
positionAtReplanEnd	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    const double positionAtReplanEnd = mKReplanStartIter->position;$/;"	l	language:C++
positionAtReplanStart	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    const double positionAtReplanStart = mKReplanStartIter->position;$/;"	l	language:C++
positionBeforeInsertPoint	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^        const double positionBeforeInsertPoint = trajectoryVector_[i-1].position;$/;"	l	language:C++
positionBeforeInsertPoint	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^        const double positionBeforeInsertPoint = trajectoryVector_[i-1].position;$/;"	l	language:C++
positionList	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    std::vector<double> positionList;$/;"	l	language:C++
positionVector	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^    Eigen::Vector2d positionVector;$/;"	m	language:C++	class:KFTSolutionElement
positionVectorAtReplanEnd	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    const Eigen::Vector2d positionVectorAtReplanEnd = mKReplanStartIter->positionVector;$/;"	l	language:C++
positionVectorAtReplanStart	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    const Eigen::Vector2d positionVectorAtReplanStart = mExecuteEndIter->positionVector;$/;"	l	language:C++
positionVectorAtReplanStart	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    const Eigen::Vector2d positionVectorAtReplanStart = mKReplanStartIter->positionVector;$/;"	l	language:C++
positionVectorList	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    std::vector<Eigen::Vector2d> positionVectorList;$/;"	l	language:C++
pos_cm	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	Vec3 pos_cm[MAXNB]; \/\/pos_cm[i] position of center of mass in frame i coords (relative coordinates)$/;"	m	language:C++	class:WmrModelODE
prevPlanFinalStage_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    int prevPlanFinalStage_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
prevPlanPathPosition_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    double prevPlanPathPosition_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
prevPosition	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    double prevPosition = se.position;$/;"	l	language:C++
prevPosition	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    double prevPosition = se.position;$/;"	l	language:C++
prevPositionVector	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        Eigen::Vector2d prevPositionVector(traj.x[0],traj.y[0]);$/;"	p	language:C++	file:
prevTime	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    double prevTime = se.time;$/;"	l	language:C++
prevTime	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    double prevTime = se.time;$/;"	l	language:C++
print	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^    inline void print() const$/;"	f	language:C++	class:KFTSolution
printConfig	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    void printConfig() const$/;"	f	language:C++	class:dad_local_planner::DADPlannerConfig
printConfig	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    void printConfig() const$/;"	f	language:C++	class:dad_local_planner::DADPlannerConfig
printElement	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^    inline void printElement() const$/;"	f	language:C++	class:KFTSolutionElement
printElement	/home/rpradeep/Desktop/kft/src/main.cpp	/^            keEnd.printElement();$/;"	p	language:C++	file:
printElement	/home/rpradeep/Desktop/kft/src/main.cpp	/^    keEnd.printElement();$/;"	p	language:C++	file:
printElement	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^        iter->printElement();$/;"	p	language:C++	file:
printEuler	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^inline void printEuler(const VecEuler euler, int precision, int width) { $/;"	f	language:C++
printHT	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^inline void printHT(const HomogeneousTransform T, int precision, int width) {$/;"	f	language:C++
printMat3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	/^inline void printMat3(const Mat3 M, int precision, int width) { $/;"	f	language:C++
printMat6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^inline void printMat6b(const Mat6b M, int precision, int width) {$/;"	f	language:C++
printMatBool	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^void printMatBool(const int nrows, const int ncols, const bool M[], int width);$/;"	p	language:C++
printMatInt	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^void printMatInt(const int nrows, const int ncols, const int M[], int width);$/;"	p	language:C++
printMatReal	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^void printMatReal(const int nrows, const int ncols, const Real M[], int precision, int width );$/;"	p	language:C++
printnVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	/^inline void printnVec3(const int n, const Vec3 V[], int precision, int width) {$/;"	f	language:C++
printnVec6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^inline void printnVec6b(const int n, const Vec6b V[], int precision, int width) { $/;"	f	language:C++
printOrient	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	215;"	d	language:C++
printOrient	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	224;"	d	language:C++
printQuat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^inline void printQuat(const VecQuat quat, int precision, int width) { $/;"	f	language:C++
printQueue	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    void printQueue( const std::string& name) const;$/;"	p	language:C++	class:TrajectoryQueue
printQueue	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^void TrajectoryQueue::printQueue(const std::string& name) const$/;"	f	language:C++	class:TrajectoryQueue
printTrajectory	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^void TrajectoryBuffer::printTrajectory(const std::string& name) const$/;"	f	language:C++	class:TrajectoryBuffer
printTrajectory	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^void TrajectoryBuffer::printTrajectory() const$/;"	f	language:C++	class:TrajectoryBuffer
printTrajectory_	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^void TrajectoryBuffer::printTrajectory_(const std::vector<KFTSolutionElement>& tv, const std::string& name) const$/;"	f	language:C++	class:TrajectoryBuffer
printTrajectory_	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^void TrajectoryBuffer::printTrajectory_(const std::vector<KFTSolutionElement>& tv, const std::string name) const$/;"	f	language:C++	class:TrajectoryBuffer
printVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	/^inline void printVec3(const Vec3 V, int precision, int width) { $/;"	f	language:C++
printVec6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^inline void printVec6b(const Vec6b V, int precision, int width) {$/;"	f	language:C++
PRINT_MATRIX_SIZE_IF_DYNAMIC	/home/rpradeep/Desktop/wmrde/include/wmrde/eigensolve.h	13;"	d	language:C++
priorityQueue_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    std::priority_queue<STNode, std::vector<STNode>, STNodeComparator> priorityQueue_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
priorityQueue_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    std::priority_queue<Node, std::vector<Node>, NodeComparator> priorityQueue_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
process	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    void process(const double currentTime);$/;"	p	language:C++	class:dad_local_planner::PurePursuitController
process	/home/rpradeep/Desktop/kft/src/main.cpp	/^        ppc.process(time);$/;"	p	language:C++	file:
process	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^void PurePursuitController::process(const double currentTime)$/;"	f	language:C++	class:PurePursuitController
progress	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    double progress = childNode.pathPosition - parentNode.pathPosition;$/;"	l	language:C++
pt	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^        boost::property_tree::ptree pt;$/;"	l	language:C++
pt	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^        boost::property_tree::ptree pt;$/;"	l	language:C++
pt	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^    boost::property_tree::ptree pt;$/;"	l	language:C++
pt	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::Vector3 pt = nodes[0]->_getDerivedPosition(); \/\/assumes Nodes[0] for body frame$/;"	l	language:C++
pt	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Ogre::Vector3 pt = nodes[0]->_getDerivedPosition(); \/\/assumes Nodes[0] for body frame$/;"	l	language:C++
pt	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Ogre::Vector3 pt = nodes[0]->_getDerivedPosition(); \/\/assumes Nodes[0] for body frame$/;"	l	language:C++
ptr	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^	const Type* ptr; \/\/necessary to vectorize$/;"	l	language:C++
PurePursuitController	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    PurePursuitController(SimInterface* simInterfacePtr, TrajectoryQueue* trajectoryQueuePtr);$/;"	p	language:C++	class:dad_local_planner::PurePursuitController
PurePursuitController	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^class PurePursuitController$/;"	c	language:C++	namespace:dad_local_planner
PurePursuitController	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^PurePursuitController::PurePursuitController(SimInterface* simInterfacePtr, TrajectoryQueue* trajectoryQueuePtr)$/;"	f	language:C++	class:PurePursuitController
push	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    priorityQueue_.push ( childNode );$/;"	p	language:C++	file:
push	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    priorityQueue_.push ( childNode );$/;"	p	language:C++	file:
pushNodeIntoQueue	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    void pushNodeIntoQueue ( STNode &childNode );$/;"	p	language:C++	class:dad_local_planner::DFTPlanner
pushNodeIntoQueue	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    void pushNodeIntoQueue ( Node& childNode );$/;"	p	language:C++	class:dad_local_planner::KFTPlanner
pushNodeIntoQueue	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^void DFTPlanner::pushNodeIntoQueue ( STNode &childNode )$/;"	f	language:C++	class:DFTPlanner
pushNodeIntoQueue	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^void KFTPlanner::pushNodeIntoQueue ( Node &childNode )$/;"	f	language:C++	class:KFTPlanner
push_back	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        outputSolutionVector.push_back(ke);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        pathPosition.push_back(tv[i].position);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        positionList.push_back(s.s);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        positionVector.push_back(tv[i].positionVector);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        positionVectorList.push_back(robotPosition);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        speedList.push_back(s.v);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        stage.push_back(tv[i].stage);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        time.push_back(tv[i].time);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        timeList.push_back(s.t);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    nodes_.push_back ( childNode );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    positionList.push_back(s.s);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    positionVectorList.push_back(robotPosition);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    speedList.push_back(s.v);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    timeList.push_back(s.t);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        dynamicObstaclesVector.push_back(dynamicObstacle);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^            solution_.elements.push_back(element);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^            velocityOptions.push_back(desiredVelocity);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        manualKFT.elements.push_back(se);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        solutionNodeList_.push_back ( s );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        velocityOptions.push_back(mpInfo.lowerVelocityLimit);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        velocityOptions.push_back(mpInfo.middleVelocity);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        velocityOptions.push_back(mpInfo.upperVelocityLimit);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    nodes_.push_back ( childNode );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    solutionNodeList_.push_back ( s );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitive.cpp	/^    k.push_back ( nk );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitive.cpp	/^    s.push_back ( ns );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitive.cpp	/^    th.push_back ( nth );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitive.cpp	/^    x.push_back ( nx );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitive.cpp	/^    y.push_back ( ny );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        mpDatabasePtr_->push_back ( mp );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        mpIndexSet.push_back ( i );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        mpInfoVector_.push_back ( dummy );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^        position_.push_back(pathPosition);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^        time_.push_back(tau);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    ps_[binX][binY][binTH].push_back ( nodeId );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    b.push_back ( kmax_ );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    b.push_back ( kmax_ );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    b.push_back ( kmin_ );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    b.push_back ( kmin_ );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^        cumulativeDistances_.push_back ( cumulativeDistance );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^        segmentDistancesSq_.push_back ( segmentDist * segmentDist );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^        segmentDistances_.push_back ( segmentDist );$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgreDynamicObstacles.cpp	/^        mObstacles.push_back(node);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                            evert_idx_1.push_back(v1);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                            evert_idx_2.push_back(v2);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^			out.push_back(f);$/;"	p	language:C++
push_back	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                            evert_idx_1.push_back(v1);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                            evert_idx_2.push_back(v2);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^        pathX.push_back(i);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^							evert_idx_1.push_back(v1);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^							evert_idx_2.push_back(v2);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                            evert_idx_1.push_back(v1);$/;"	p	language:C++	file:
push_back	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                            evert_idx_2.push_back(v2);$/;"	p	language:C++	file:
px	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        double px,py,vx,vy;$/;"	l	language:C++
py	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        double px,py,vx,vy;$/;"	l	language:C++
pyramidBase	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    osg::DrawElementsUInt* pyramidBase =$/;"	l	language:C++
pyramidFaceFour	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    osg::DrawElementsUInt* pyramidFaceFour =$/;"	l	language:C++
pyramidFaceOne	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    osg::DrawElementsUInt* pyramidFaceOne =$/;"	l	language:C++
pyramidFaceThree	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    osg::DrawElementsUInt* pyramidFaceThree =$/;"	l	language:C++
pyramidFaceTwo	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    osg::DrawElementsUInt* pyramidFaceTwo =$/;"	l	language:C++
pyramidGeode	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    osg::Geode* pyramidGeode = new osg::Geode();$/;"	l	language:C++
pyramidGeometry	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    osg::Geometry* pyramidGeometry = new osg::Geometry();$/;"	l	language:C++
pyramidTwoXForm	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    osg::PositionAttitudeTransform* pyramidTwoXForm =$/;"	l	language:C++
pyramidVertices	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    osg::Vec3Array* pyramidVertices = new osg::Vec3Array;$/;"	l	language:C++
qacc	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real qacc[MAXNV];$/;"	l	language:C++
qdotToQvel	/home/rpradeep/Desktop/wmrde/include/wmrde/state.h	/^void qdotToQvel(const int nf, const Real qdot[], const VecOrient orient, const Mat3 R_body_to_world, Real qvel[]);$/;"	p	language:C++
qr_tol	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const Real qr_tol = 1e-3;$/;"	l	language:C++
quatrateToVel	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^void quatrateToVel(const VecQuat quat, const VecQuat quatrate, Vec3 vel, MatQuat T);$/;"	p	language:C++
quatToEuler	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^void quatToEuler(const VecQuat quat, VecEuler euler);$/;"	p	language:C++
quatToRot	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^void quatToRot(const VecQuat quat, Mat3 R);$/;"	p	language:C++
qvel	/home/rpradeep/Desktop/kft/src/main.cpp	/^    Real qvel[MAXNV]; \/\/for dynamic sim$/;"	l	language:C++
qvel	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    Real qvel[MAXNV]; \/\/for dynamic sim$/;"	l	language:C++
qvel	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real qvel[MAXNV];$/;"	l	language:C++
qvel	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real qvel[MAXNV];$/;"	l	language:C++
qvel	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    Real qvel[MAXNV]; \/\/for dynamic sim$/;"	l	language:C++
qvel	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	Real qvel[MAXNV]; \/\/for dynamic sim$/;"	l	language:C++
qvel	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	Real qvel[MAXNV]; \/\/for dynamic sim$/;"	l	language:C++
qvel	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	Real qvel[MAXNV]; \/\/for dynamic sim$/;"	l	language:C++
qvelToQdot	/home/rpradeep/Desktop/wmrde/include/wmrde/state.h	/^void qvelToQdot(const int nf, const Real qvel[], const VecOrient orient, const Mat3 R_body_to_world, Real qdot[]);$/;"	p	language:C++
qvelToSpatialVel	/home/rpradeep/Desktop/wmrde/include/wmrde/state.h	/^void qvelToSpatialVel(const WmrModel &mdl, Mat6b Xup[], const Real qvel[], Vec6b v[]);$/;"	p	language:C++
qvel_free	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real qvel_free[MAXNV]; \/\/(nv-na)$/;"	l	language:C++
r	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^			Vec3 r; \/\/translation vector$/;"	l	language:C++
r	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^			Vec3 r; \/\/translation vector$/;"	l	language:C++
rad	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const Real rad = .325; \/\/wheel radius$/;"	l	language:C++
rad	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real L,B,rad; \/\/dimensions$/;"	l	language:C++
rad	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real rad;			\/\/radius of wheel or sprocket$/;"	m	language:C++	class:Frame
rad	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real rad = k10;$/;"	l	language:C++
rad	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real rad = k10; \/\/wheel radius$/;"	l	language:C++
rad	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const Real rad = .325; \/\/wheel radius$/;"	l	language:C++
rad	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real L,B,rad; \/\/dimensions$/;"	l	language:C++
rad	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		Real rad = frames[sprocket_fi].rad;$/;"	l	language:C++
rad	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const Real rad = .325; \/\/wheel radius$/;"	l	language:C++
rad	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real L,B,rad; \/\/dimensions$/;"	l	language:C++
rad2	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real rad2;$/;"	m	language:C++	class:Frame
radius	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        const double radius = pt.get<double> ( position.str() );$/;"	l	language:C++
RADTODEG	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	53;"	d	language:C++
ramp	/home/rpradeep/Desktop/wmrde/include/wmrde/demo/terrains.h	/^void ramp(SurfaceVector& surfaces);$/;"	p	language:C++
ramp	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^void ramp(SurfaceVector& surfaces) {$/;"	f	language:C++
readfile	/home/rpradeep/Desktop/kft/src/wmrde/surface/GridSurf.cpp	/^int GridSurf::readfile(const std::string FileName ) {$/;"	f	language:C++	class:GridSurf
readfile	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	int readfile(const std::string filename) {$/;"	f	language:C++	class:VrmlData
readfile	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	int readfile(const std::string filename);$/;"	p	language:C++	class:GridSurf
readPath	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^void readPath()$/;"	f	language:C++
read_ini	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^        boost::property_tree::ini_parser::read_ini ( fullFilePath.c_str() , pt );$/;"	p	language:C++	class:dad_local_planner::DADPlannerConfig::boost::property_tree::ini_parser
read_ini	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^        boost::property_tree::ini_parser::read_ini ( fullFilePath.c_str() , pt );$/;"	p	language:C++	class:dad_local_planner::DADPlannerConfig::boost::property_tree::ini_parser
read_ini	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^    boost::property_tree::ini_parser::read_ini ( fullFilePath.c_str() , pt );$/;"	p	language:C++	class:dad_local_planner::boost::property_tree::ini_parser	file:
Real	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	/^typedef double Real;$/;"	t	language:C++
Real	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	/^typedef float Real;$/;"	t	language:C++
real32	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^    typedef float                   real32;$/;"	t	language:C++
real64	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^    typedef double                  real64;$/;"	t	language:C++
realize	/home/rpradeep/Desktop/sim/basic.cpp	/^    viewer.realize();$/;"	p	language:C++	file:
realize	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    viewer.realize();$/;"	p	language:C++	file:
REALMAX	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	42;"	d	language:C++
REALNAN	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	41;"	d	language:C++
REALRAND	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	40;"	d	language:C++
REALSIGN	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	37;"	d	language:C++
rear	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const int rear = 1;$/;"	l	language:C++
rear	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const int rear = 1;$/;"	l	language:C++
rear	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const int rear = 1;$/;"	l	language:C++
rear	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const int rear = 1;$/;"	l	language:C++
rear	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const int rear = 1;$/;"	l	language:C++
rear	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const int rear = 1;$/;"	l	language:C++
recordfail	/etc/grub.d/00_header	/^function recordfail {$/;"	f	language:Sh
referenceDeviationPenaltyFactor	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double referenceDeviationPenaltyFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
referenceDeviationPenaltyFactor	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double referenceDeviationPenaltyFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
ReferencePositionProfile	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^ReferencePositionProfile::ReferencePositionProfile()$/;"	f	language:C++	class:ReferencePositionProfile
referencePositionProfile_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    ReferencePositionProfile referencePositionProfile_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
refPath	/home/rpradeep/Desktop/kft/src/main.cpp	/^    std::vector<Eigen::Vector2d> refPath;$/;"	l	language:C++
refSpeed	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    std::vector<double> refSpeed;$/;"	l	language:C++
refVelocity	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    double refVelocity = 0;$/;"	l	language:C++
refWaypointPath_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    WaypointPath refWaypointPath_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
reinitialize	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    mpManager_.reinitialize();$/;"	p	language:C++	file:
reinitialize	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^void MotionPrimitiveManager::reinitialize()$/;"	f	language:C++	class:MotionPrimitiveManager
remove	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	tmp.erase(std::remove(tmp.begin(), tmp.end(), ','), tmp.end());$/;"	p	language:C++
remove	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	tmp.erase(std::remove(tmp.begin(), tmp.end(), '\\n'), tmp.end());$/;"	p	language:C++
removeOldElements	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    void removeOldElements(const double removeBeforeThisTime);$/;"	p	language:C++	class:TrajectoryQueue
removeOldElements	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^void TrajectoryQueue::removeOldElements(const double removeBeforeThisTime)$/;"	f	language:C++	class:TrajectoryQueue
removeTrajectoryBefore	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^void TrajectoryBuffer::removeTrajectoryBefore(const double time)$/;"	f	language:C++	class:TrajectoryBuffer
removeTrajectoryBefore	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^void TrajectoryBuffer::removeTrajectoryBefore(const double time)$/;"	f	language:C++	class:TrajectoryBuffer
removeWidgetFromTray	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^            mTrayMgr->removeWidgetFromTray(mDetailsPanel);$/;"	p	language:C++	file:
removeWidgetFromTray	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^            mTrayMgr->removeWidgetFromTray(mDetailsPanel);$/;"	p	language:C++	file:
removeWidgetFromTray	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^            mTrayMgr->removeWidgetFromTray(mDetailsPanel);$/;"	p	language:C++	file:
removeWidgetFromTray	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^            mTrayMgr->removeWidgetFromTray(mDetailsPanel);$/;"	p	language:C++	file:
removeWindowEventListener	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    Ogre::WindowEventUtilities::removeWindowEventListener(mWindow, this);$/;"	p	language:C++	class:Ogre::WindowEventUtilities	file:
removeWindowEventListener	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    Ogre::WindowEventUtilities::removeWindowEventListener(mWindow, this);$/;"	p	language:C++	class:Ogre::WindowEventUtilities	file:
removeWindowEventListener	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    Ogre::WindowEventUtilities::removeWindowEventListener(mWindow, this);$/;"	p	language:C++	class:Ogre::WindowEventUtilities	file:
removeWindowEventListener	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    Ogre::WindowEventUtilities::removeWindowEventListener(mWindow, this);$/;"	p	language:C++	class:Ogre::WindowEventUtilities	file:
remove_if	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    trajectoryVector_.erase(std::remove_if( trajectoryVector_.begin(), trajectoryVector_.end(), [startTime,endTime](const KFTSolutionElement& se) -> bool { return (se.time >= startTime); }), trajectoryVector_.end());$/;"	p	language:C++	file:
remove_if	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    trajectoryVector_.erase(std::remove_if( trajectoryVector_.begin(), trajectoryVector_.end(), [startTime](const KFTSolutionElement& se) -> bool { return (se.time >= startTime); }), trajectoryVector_.end());$/;"	p	language:C++	file:
replanned	/home/rpradeep/Desktop/kft/src/main.cpp	/^                KFTSolution replanned = dft.getSolution();$/;"	l	language:C++
replanned	/home/rpradeep/Desktop/kft/src/main.cpp	/^            KFTSolution replanned = kft.getSolution();$/;"	l	language:C++
reserve	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    interpolatedPosition_.reserve(K);$/;"	p	language:C++	file:
reserve	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    position_.reserve(K);$/;"	p	language:C++	file:
reserve	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    time_.reserve(K);$/;"	p	language:C++	file:
reserve	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    mergedTrajectoryVector.reserve( trajectoryVector_.size() + solution.elements.size() );$/;"	p	language:C++	file:
reserve	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    output.reserve( trajectoryVector_.size() );$/;"	p	language:C++	file:
reserve	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    mergedTrajectoryVector.reserve( trajectoryVector_.size() + solution.elements.size() );$/;"	p	language:C++	file:
reserve	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    output.reserve( trajectoryVector_.size() );$/;"	p	language:C++	file:
RESET	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    enum STATE {RESET,WAIT,MOVING,STOP};$/;"	e	language:C++	enum:dad_local_planner::PurePursuitController::STATE
reset	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    void reset();$/;"	p	language:C++	class:dad_local_planner::PurePursuitController
reset	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    void reset();$/;"	p	language:C++	class:TrajectoryQueue
reset	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^void PurePursuitController::reset()$/;"	f	language:C++	class:PurePursuitController
reset	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^void TrajectoryQueue::reset()$/;"	f	language:C++	class:TrajectoryQueue
resize	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    ps_.resize ( boost::extents[other.getSizeX()][other.getSizeY()][other.getSizeTH()] );$/;"	p	language:C++	file:
resize	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^    ps_.resize ( boost::extents[SIZE_X][SIZE_Y][SIZE_TH] );$/;"	p	language:C++	file:
resize	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    space_.resize ( boost::extents[vsize_][ksize_] );$/;"	p	language:C++	file:
ResourceDir	/home/rpradeep/Desktop/kft/include/wmrde/options.h	/^inline std::string ResourceDir() {$/;"	f	language:C++
ResourceDir	/home/rpradeep/Desktop/wmrde/include/wmrde/options.h	/^inline std::string ResourceDir() {$/;"	f	language:C++
ResourceDir	/home/rpradeep/Desktop/wmrsim/include/wmrde/options.h	/^inline std::string ResourceDir() {$/;"	f	language:C++
retrieveTrajectory	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^void TrajectoryBuffer::retrieveTrajectory(std::vector<KFTSolutionElement>& output, const double duration,const double startTime) const$/;"	f	language:C++	class:TrajectoryBuffer
retrieveTrajectory	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^void TrajectoryBuffer::retrieveTrajectory(std::vector<KFTSolutionElement>& output, const double duration,const double startTime) const$/;"	f	language:C++	class:TrajectoryBuffer
returnIter	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^    std::list<KFTSolutionElement>::iterator returnIter;$/;"	l	language:C++
reverse	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    std::reverse(positionList.begin(),positionList.end());$/;"	p	language:C++	class:std	file:
reverse	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    std::reverse(positionVectorList.begin(),positionVectorList.end());$/;"	p	language:C++	class:std	file:
reverse	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    std::reverse(speedList.begin(),speedList.end());$/;"	p	language:C++	class:std	file:
reverse	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    std::reverse(timeList.begin(),timeList.end());$/;"	p	language:C++	class:std	file:
rightIndex	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    int rightIndex = 0;$/;"	l	language:C++
robotPosition	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        Eigen::Vector2d robotPosition;$/;"	l	language:C++
robotPosition	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    Eigen::Vector2d robotPosition;$/;"	l	language:C++
robotPosition	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    Eigen::Vector2d robotPosition;$/;"	l	language:C++
robotRadius	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double robotRadius;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
robotRadius	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double robotRadius;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
rocky	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^void rocky(WmrModel& mdl, Real state[], Real qvel[]) {$/;"	f	language:C++
rockyConstraints	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^void rockyConstraints( const WmrModel& mdl, const Real jd[], const Real jr[], \/\/inputs$/;"	f	language:C++
rockyController	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^void rockyController(const WmrModel& mdl, const Real time, const Real state[], \/\/inputs$/;"	f	language:C++
rockyScene	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^void rockyScene(const WmrModel& mdl, WmrAnimation& anim) {$/;"	f	language:C++
rockyScene	/home/rpradeep/Desktop/wmrsim/include/wmrde/demo/rockyscene.h	/^void rockyScene(const WmrModel& mdl, WmrAnimation& anim);$/;"	p	language:C++
rollfront_ji	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	static int rollfront_ji, rollrear_ji; \/\/roll angle indices (in jd)$/;"	l	language:C++	file:
rollfront_ji	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	static int rollfront_ji, rollrear_ji; \/\/roll angle indices (in jd)$/;"	l	language:C++	file:
rollfront_ji	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	static int rollfront_ji, rollrear_ji; \/\/roll angle indices (in jd)$/;"	l	language:C++	file:
rollrear_ji	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	static int rollfront_ji, rollrear_ji; \/\/roll angle indices (in jd)$/;"	l	language:C++	file:
rollrear_ji	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	static int rollfront_ji, rollrear_ji; \/\/roll angle indices (in jd)$/;"	l	language:C++	file:
rollrear_ji	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	static int rollfront_ji, rollrear_ji; \/\/roll angle indices (in jd)$/;"	l	language:C++	file:
root	/home/rpradeep/Desktop/sim/basic.cpp	/^    osg::Group* root = new osg::Group();$/;"	l	language:C++
root	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    osg::Group* root = new osg::Group();$/;"	l	language:C++
RotInd	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	81;"	d	language:C++
rotToEuler	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^void rotToEuler(const Mat3 R, VecEuler euler); \/\/called infrequently$/;"	p	language:C++
rotToOrient	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	212;"	d	language:C++
rotToOrient	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	221;"	d	language:C++
rotToQuat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^void rotToQuat(const Mat3 R, VecQuat quat);$/;"	p	language:C++
Rotx	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	54;"	d	language:C++
Roty	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	61;"	d	language:C++
Rotz	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	69;"	d	language:C++
row	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		int row = contact_i0;$/;"	l	language:C++
row	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int row = 0; \/\/row in A$/;"	l	language:C++
row	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int row = 0;$/;"	l	language:C++
s	/home/rpradeep/.vimrc	/^nmap s <Plug>(easymotion-overwin-f)$/;"	m	language:Vim
s	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    double s; \/\/> Path position$/;"	m	language:C++	class:dad_local_planner::STNode
s	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    STNode s = node;$/;"	l	language:C++
s	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    Node s = node;$/;"	l	language:C++
s	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^            double s;$/;"	l	language:C++
s	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^            f >> s;$/;"	l	language:C++
s	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	Real s;$/;"	l	language:C++
S1_ai	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	int S1_ai = 0;$/;"	l	language:C++
S1_fi	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	int S1_fi = 2;$/;"	l	language:C++
S2I	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	22;"	d	language:C++
S2I2	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	9;"	d	language:C++
S2I3	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	10;"	d	language:C++
S2_ai	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	int S2_ai = 4;$/;"	l	language:C++
S2_fi	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	int S2_fi = 8;$/;"	l	language:C++
sa	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    float sa = sin(ang);$/;"	l	language:C++
sa	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^		Real sa = DEGTORAD(15);$/;"	l	language:C++
sa	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    float sa = sin(ang);$/;"	l	language:C++
sa	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^		Real sa = DEGTORAD(15);$/;"	l	language:C++
sa	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^		Real sa = DEGTORAD(15);$/;"	l	language:C++
sa	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	float sa = sin(ang);$/;"	l	language:C++
sa	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    float sa = sin(ang);$/;"	l	language:C++
savedefault	/etc/grub.d/00_header	/^function savedefault {$/;"	f	language:Sh
scalar_mass	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	Real scalar_mass = 0;$/;"	l	language:C++
sDeviationCost	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    double sDeviationCost; \/\/> Cost of deviating away from the kinematic plan$/;"	m	language:C++	class:dad_local_planner::STNode
se	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        KFTSolutionElement se;$/;"	l	language:C++
se	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    KFTSolutionElement se = trajectoryVector_[0];$/;"	l	language:C++
se	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    KFTSolutionElement se = trajectoryVector_[0];$/;"	l	language:C++
search	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    bool search ( int maxIterationCount );$/;"	p	language:C++	class:dad_local_planner::KFTPlanner
search	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^bool KFTPlanner::search ( int maxIterationCount )$/;"	f	language:C++	class:KFTPlanner
searchFinished	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^            bool searchFinished = kft.search(500);$/;"	l	language:C++
searchFinished	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^            bool searchFinished = kft.search(500);$/;"	l	language:C++
searchFinished_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    bool searchFinished_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
searchFinished_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    bool searchFinished_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
searchStarted_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    bool searchStarted_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
seci	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    Ogre::ConfigFile::SectionIterator seci = cf.getSectionIterator();$/;"	l	language:C++
seci	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    Ogre::ConfigFile::SectionIterator seci = cf.getSectionIterator();$/;"	l	language:C++
seci	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    Ogre::ConfigFile::SectionIterator seci = cf.getSectionIterator();$/;"	l	language:C++
seci	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    Ogre::ConfigFile::SectionIterator seci = cf.getSectionIterator();$/;"	l	language:C++
secName	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    Ogre::String secName, typeName, archName;$/;"	l	language:C++
secName	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    Ogre::String secName, typeName, archName;$/;"	l	language:C++
secName	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    Ogre::String secName, typeName, archName;$/;"	l	language:C++
secName	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    Ogre::String secName, typeName, archName;$/;"	l	language:C++
segmentDist	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^        const double segmentDist = diff.norm();$/;"	l	language:C++
sendCommand	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    bool sendCommand();$/;"	p	language:C++	class:dad_local_planner::PurePursuitController
sendCommand	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^bool PurePursuitController::sendCommand()$/;"	f	language:C++	class:PurePursuitController
setBodyMass	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void setBodyMass( const int idx, const Real scalar_mass, const Mat3 moment_of_inertia);$/;"	p	language:C++	class:WmrModelODE
setCameraManipulator	/home/rpradeep/Desktop/sim/basic.cpp	/^    viewer.setCameraManipulator(new osgGA::TrackballManipulator());$/;"	p	language:C++	file:
setCameraManipulator	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    viewer.setCameraManipulator(new osgGA::TrackballManipulator());$/;"	p	language:C++	file:
setCaption	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^        textArea->setCaption(szString);$/;"	p	language:C++
setCaption	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^        textArea->setCaption(szString);$/;"	p	language:C++
setCaption	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^        textArea->setCaption(szString);$/;"	p	language:C++
setCaption	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^        textArea->setCaption(szString);$/;"	p	language:C++
setCastShadows	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^  groundEntity->setCastShadows(false);$/;"	p	language:C++	file:
setcMat3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	69;"	d	language:C++
setcMat6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	68;"	d	language:C++
setCol	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^    void setCol(float R,float G,float B,float I)$/;"	f	language:C++	class:OgreText
setCol	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^    void setCol(float R,float G,float B,float I)$/;"	f	language:C++	class:OgreText
setColorArray	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    pyramidGeometry->setColorArray(colors);$/;"	p	language:C++	file:
setColorBinding	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    pyramidGeometry->setColorBinding(osg::Geometry::BIND_PER_VERTEX);$/;"	p	language:C++	file:
setCurvatureConstraint	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^    trajSpace_.setCurvatureConstraint ( kmin,kmax );$/;"	p	language:C++	file:
setCurvatureConstraint	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^void MotionPrimitiveManager::setCurvatureConstraint ( const double kmin, const double kmax )$/;"	f	language:C++	class:MotionPrimitiveManager
setCurvatureConstraint	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^void TrajectorySpace::setCurvatureConstraint ( const double kmin, const double kmax )$/;"	f	language:C++	class:dad_local_planner::TrajectorySpace
setcVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	57;"	d	language:C++
setcVec6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	54;"	d	language:C++
setDiagMat3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	72;"	d	language:C++
setDynamic	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^        manual->setDynamic(true);$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^        manual->setDynamic(true);$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^		manual->setDynamic(true);$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^        manual->setDynamic(true);$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamic	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    manual->setDynamic(true); \/\/for growing number of vertices$/;"	p	language:C++	file:
setDynamicObstacleCostEvaluator	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    void setDynamicObstacleCostEvaluator( const DynamicObstacleCostEvaluator& dynamicObsCostEval);$/;"	p	language:C++	class:dad_local_planner::DFTPlanner
setDynamicObstacleCostEvaluator	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^void DFTPlanner::setDynamicObstacleCostEvaluator( const DynamicObstacleCostEvaluator& dynamicObsCostEval)$/;"	f	language:C++	class:DFTPlanner
setDynamicsConstraints	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    mpManager_.setDynamicsConstraints ( config_.accMaxFwd,config_.velMaxFwd,config_.accMaxBack,config_.velMaxBack);$/;"	p	language:C++	file:
setDynamicsConstraints	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^void MotionPrimitiveManager::setDynamicsConstraints ( const double accMaxFwd, const double velMaxFwd, const double accMaxBack, const double velMaxBack)$/;"	f	language:C++	class:MotionPrimitiveManager
setEuler	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^inline void setEuler(const Real rol, const Real pit, const Real yaw, VecEuler e) {$/;"	f	language:C++
setEventCallback	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    mKeyboard->setEventCallback(this);$/;"	p	language:C++	file:
setEventCallback	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    mMouse->setEventCallback(this);$/;"	p	language:C++	file:
setEventCallback	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    mKeyboard->setEventCallback(this);$/;"	p	language:C++	file:
setEventCallback	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    mMouse->setEventCallback(this);$/;"	p	language:C++	file:
setEventCallback	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    mKeyboard->setEventCallback(this);$/;"	p	language:C++	file:
setEventCallback	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    mMouse->setEventCallback(this);$/;"	p	language:C++	file:
setEventCallback	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    mKeyboard->setEventCallback(this);$/;"	p	language:C++	file:
setEventCallback	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    mMouse->setEventCallback(this);$/;"	p	language:C++	file:
setf	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^        ofile.setf(std::ios::fixed);$/;"	p	language:C++
setf	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^    f.setf(std::ios::fixed);$/;"	p	language:C++	file:
setFaceCamera	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgrePath.cpp	/^    mChain->setFaceCamera(true);$/;"	p	language:C++	file:
setFaceCamera	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^        lines[i]->setFaceCamera(false, mCamera->getDirection());$/;"	p	language:C++	file:
setFaceCamera	/home/rpradeep/Desktop/wmrde/src/animate/OgrePath.cpp	/^    mChain->setFaceCamera(true);$/;"	p	language:C++	file:
setFaceCamera	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^        lines[i]->setFaceCamera(false, mCamera->getDirection());$/;"	p	language:C++	file:
setFaceCamera	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^		lines[i]->setFaceCamera(false, mCamera->getDirection()); $/;"	p	language:C++	file:
setFixedYawAxis	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^  mCamera->setFixedYawAxis(true,Ogre::Vector3(0,0,1.0f));$/;"	p	language:C++	file:
setFixedYawAxis	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^  mCamera->setFixedYawAxis(true,Ogre::Vector3(0,0,1.0f));$/;"	p	language:C++	file:
setFixedYawAxis	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^  mCamera->setFixedYawAxis(true,Ogre::Vector3(0,0,1.0f));$/;"	p	language:C++	file:
setFrameMass	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^		mdl.setFrameMass(wheelframeinds[i],Mw,cmw,I);$/;"	p	language:C++	file:
setFrameMass	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void setFrameMass(const int fi, const Real mass, const Vec3 center_of_mass, const Mat3 moment_of_inertia);$/;"	p	language:C++	class:WmrModel
setFrameMass	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^		mdl.setFrameMass(wheelframeinds[i],Mw,cmw,I);$/;"	p	language:C++	file:
setFrameMass	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^		mdl.setFrameMass(wheelframeinds[i],Mw,cmw,I);$/;"	p	language:C++	file:
setFrameMass	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^void WmrModel::setFrameMass(const int fi, const Real mass, const Vec3 center_of_mass, const Mat3 moment_of_inertia) {$/;"	f	language:C++	class:WmrModel
setFrameMass	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^		mdl.setFrameMass(wheelframeinds[i],Mw,cmw,I);$/;"	p	language:C++	file:
setGlobalReferenceTime	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^    void setGlobalReferenceTime( const double referenceTime );$/;"	p	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
setGlobalReferenceTime	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^void DynamicObstacleCostEvaluator::setGlobalReferenceTime( const double referenceTime )$/;"	f	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
setHeading	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    inline void setHeading(const double heading)$/;"	f	language:C++	class:SimInterface
setHeading	/home/rpradeep/Desktop/kft/src/main.cpp	/^        simInterface.setHeading(ori[2]);$/;"	p	language:C++	file:
setHeading	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^            simInterface.setHeading(ori[2]);$/;"	p	language:C++	file:
setHeading	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    inline void setHeading(const double heading)$/;"	f	language:C++	class:SimInterface
setHeading	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^            simInterface->setHeading(ori[2]);$/;"	p	language:C++	file:
setIdentityHT	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	40;"	d	language:C++
setIdentityMat3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	75;"	d	language:C++
setLastReferenceKinematicPlan	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    inline void setLastReferenceKinematicPlan(const KFTSolution kftPlan) { mLastReferenceKinematicPlan = kftPlan; };$/;"	f	language:C++	class:TrajectoryQueue
setLastReferenceKinematicPlan	/home/rpradeep/Desktop/kft/src/main.cpp	/^            tq.setLastReferenceKinematicPlan(replanned);$/;"	p	language:C++	file:
setLastReferenceKinematicPlan	/home/rpradeep/Desktop/kft/src/main.cpp	/^    tq.setLastReferenceKinematicPlan(ks1);$/;"	p	language:C++	file:
setMass	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void setMass(const Real scalar_mass, const Vec3 center_of_mass, const Mat3 moment_of_inertia);$/;"	p	language:C++	class:Frame
setMass	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	frames[fi].setMass(mass, center_of_mass, moment_of_inertia);$/;"	p	language:C++	file:
setMass	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^	frames[fi].setMass(scalar_mass, center_of_mass, moment_of_inertia);$/;"	p	language:C++	file:
setMass	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^void Frame::setMass(const Real scalar_mass, const Vec3 center_of_mass, const Mat3 moment_of_inertia) {$/;"	f	language:C++	class:Frame
setMat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void setMat(const int nrows, const int ncols, const Type val, Type Dest[] ) { $/;"	f	language:C++
setMat3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	63;"	d	language:C++
setMatBlock	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void setMatBlock(const int nrows, const int ri, const int ci, const int nrows_block, const int ncols_block, const Type val, Type Dest[] ) { $/;"	f	language:C++
setMatCol	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void setMatCol(const int nrows, const int ci, const Type val, Type Dest[] ) { $/;"	f	language:C++
setMatRow	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void setMatRow(const int nrows, const int ncols, const int ri, const Type val, Type Dest[] ) { $/;"	f	language:C++
setMaxDistanceOneMP	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^void MotionPrimitiveManager::setMaxDistanceOneMP()$/;"	f	language:C++	class:MotionPrimitiveManager
setMetricsMode	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^            panel->setMetricsMode(Ogre::GMM_PIXELS);$/;"	p	language:C++
setMetricsMode	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^        textArea->setMetricsMode(Ogre::GMM_RELATIVE);$/;"	p	language:C++
setMetricsMode	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^        textArea->setMetricsMode(Ogre::GMM_RELATIVE);$/;"	p	language:C++
setMetricsMode	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^            panel->setMetricsMode(Ogre::GMM_PIXELS);$/;"	p	language:C++
setMetricsMode	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^        textArea->setMetricsMode(Ogre::GMM_RELATIVE);$/;"	p	language:C++
setMetricsMode	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^        textArea->setMetricsMode(Ogre::GMM_RELATIVE);$/;"	p	language:C++
setMotorParams	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void setMotorParams( const int idx, const Real MotorVel, const Real MotorFMax );$/;"	p	language:C++	class:WmrModelODE
setNearClipDistance	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^  mCamera->setNearClipDistance(.5);$/;"	p	language:C++	file:
setNearClipDistance	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^  mCamera->setNearClipDistance(.5);$/;"	p	language:C++	file:
setNearClipDistance	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^  mCamera->setNearClipDistance(.5);$/;"	p	language:C++	file:
setNumberOfChains	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    lines[nl]->setNumberOfChains(num_chains);$/;"	p	language:C++	file:
setNumberOfChains	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    lines[nl]->setNumberOfChains(num_chains);$/;"	p	language:C++	file:
setNumberOfChains	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	lines[nl]->setNumberOfChains(num_chains);$/;"	p	language:C++	file:
setOrientation	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^		nodes[node_index]->setOrientation( quat );$/;"	p	language:C++
setOrientation	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^		nodes[node_index]->setOrientation( quat );$/;"	p	language:C++
setOrientation	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^		nodes[node_index]->setOrientation( quat );$/;"	p	language:C++
setOrientation	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^        nodes[node_index]->setOrientation( quat );$/;"	p	language:C++
setOrientation	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^		nodes[node_index]->setOrientation( quat );$/;"	p	language:C++
setOrientation	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^		nodes[node_index]->setOrientation( quat );$/;"	p	language:C++
setPolygonMode	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^        mCamera->setPolygonMode(pm);$/;"	p	language:C++	file:
setPolygonMode	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^        mCamera->setPolygonMode(pm);$/;"	p	language:C++	file:
setPolygonMode	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^        mCamera->setPolygonMode(pm);$/;"	p	language:C++	file:
setPolygonMode	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^        mCamera->setPolygonMode(pm);$/;"	p	language:C++	file:
setPos	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^    void setPos(float x,float y)$/;"	f	language:C++	class:OgreText
setPos	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^    void setPos(float x,float y)$/;"	f	language:C++	class:OgreText
setPosition	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^		nodes[node_index]->setPosition( pos );$/;"	p	language:C++
setPosition	/home/rpradeep/Desktop/sim/basic.cpp	/^    boxPat->setPosition(boxPos);$/;"	p	language:C++	file:
setPosition	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^        textArea->setPosition(x,y);$/;"	p	language:C++
setPosition	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^        textArea->setPosition(x,y);$/;"	p	language:C++
setPosition	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^		nodes[node_index]->setPosition( pos );$/;"	p	language:C++
setPosition	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    anim.mGoalNode->setPosition(goalX,goalY,0);$/;"	p	language:C++	file:
setPosition	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^		nodes[node_index]->setPosition( pos );$/;"	p	language:C++
setPosition	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^        nodes[node_index]->setPosition( pos );$/;"	p	language:C++
setPosition	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^		nodes[node_index]->setPosition( pos );$/;"	p	language:C++
setPosition	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^		nodes[node_index]->setPosition( pos );$/;"	p	language:C++
setPosition	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    pyramidTwoXForm->setPosition( pyramidTwoPosition );$/;"	p	language:C++	file:
setPositionX	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    inline void setPositionX(const double positionX)$/;"	f	language:C++	class:SimInterface
setPositionX	/home/rpradeep/Desktop/kft/src/main.cpp	/^        simInterface.setPositionX(pos[0]);$/;"	p	language:C++	file:
setPositionX	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^            simInterface.setPositionX(pos[0]);$/;"	p	language:C++	file:
setPositionX	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    inline void setPositionX(const double positionX)$/;"	f	language:C++	class:SimInterface
setPositionX	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^            simInterface->setPositionX(pos[0]);$/;"	p	language:C++	file:
setPositionY	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    inline void setPositionY(const double positionY)$/;"	f	language:C++	class:SimInterface
setPositionY	/home/rpradeep/Desktop/kft/src/main.cpp	/^        simInterface.setPositionY(pos[1]);$/;"	p	language:C++	file:
setPositionY	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^            simInterface.setPositionY(pos[1]);$/;"	p	language:C++	file:
setPositionY	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    inline void setPositionY(const double positionY)$/;"	f	language:C++	class:SimInterface
setPositionY	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^            simInterface->setPositionY(pos[1]);$/;"	p	language:C++	file:
setPositionZ	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    inline void setPositionZ(const double positionZ)$/;"	f	language:C++	class:SimInterface
setPositionZ	/home/rpradeep/Desktop/kft/src/main.cpp	/^        simInterface.setPositionZ(pos[2]);$/;"	p	language:C++	file:
setPositionZ	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^            simInterface.setPositionZ(pos[2]);$/;"	p	language:C++	file:
setPositionZ	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    inline void setPositionZ(const double positionZ)$/;"	f	language:C++	class:SimInterface
setPositionZ	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^            simInterface->setPositionZ(pos[2]);$/;"	p	language:C++	file:
setQuat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^inline void setQuat( const Real w, const Real x, const Real y, const Real z, VecQuat q) {$/;"	f	language:C++
setResolution	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^    trajSpace_.setResolution ( resolution,resolution );$/;"	p	language:C++	file:
setResolution	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^void TrajectorySpace::setResolution ( const double vsize, const double ksize )$/;"	f	language:C++	class:dad_local_planner::TrajectorySpace
setScale	/home/rpradeep/Desktop/sim/basic.cpp	/^    boxPat->setScale(boxScale);$/;"	p	language:C++	file:
setSceneData	/home/rpradeep/Desktop/sim/basic.cpp	/^    viewer.setSceneData( root );$/;"	p	language:C++	file:
setSceneData	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    viewer.setSceneData( root );$/;"	p	language:C++	file:
setSpeed	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    inline void setSpeed(const double speed)$/;"	f	language:C++	class:SimInterface
setSpeed	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    inline void setSpeed(const double speed)$/;"	f	language:C++	class:SimInterface
setSpeedCmd	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    inline void setSpeedCmd(const double speedCmd)$/;"	f	language:C++	class:SimInterface
setSpeedCmd	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^    mSimInterfacePtr->setSpeedCmd(speed);$/;"	p	language:C++	file:
setSpeedCmd	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    inline void setSpeedCmd(const double speedCmd)$/;"	f	language:C++	class:SimInterface
setText	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^    void setText(char *szString)$/;"	f	language:C++	class:OgreText
setText	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^    void setText(Ogre::String szString) \/\/ now You can use Ogre::String as text$/;"	f	language:C++	class:OgreText
setText	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^    void setText(char *szString)$/;"	f	language:C++	class:OgreText
setText	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^    void setText(String szString) \/\/ now You can use Ogre::String as text$/;"	f	language:C++	class:OgreText
settings	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^        Ogre::ConfigFile::SettingsMultiMap *settings = seci.getNext();$/;"	l	language:C++
settings	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^        Ogre::ConfigFile::SettingsMultiMap *settings = seci.getNext();$/;"	l	language:C++
settings	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^        Ogre::ConfigFile::SettingsMultiMap *settings = seci.getNext();$/;"	l	language:C++
settings	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^        Ogre::ConfigFile::SettingsMultiMap *settings = seci.getNext();$/;"	l	language:C++
setTrajectorySpaceResolution	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    mpManager_.setTrajectorySpaceResolution ( config_.trajResolution );$/;"	p	language:C++	file:
setTrajectorySpaceResolution	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^void MotionPrimitiveManager::setTrajectorySpaceResolution ( const int resolution )$/;"	f	language:C++	class:MotionPrimitiveManager
setTrans	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^   matrix.setTrans(eyePos);$/;"	p	language:C++	file:
setTurnRadiusCmd	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    inline void setTurnRadiusCmd(const double turnRadiusCmd)$/;"	f	language:C++	class:SimInterface
setTurnRadiusCmd	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^    mSimInterfacePtr->setTurnRadiusCmd(turnrad);$/;"	p	language:C++	file:
setTurnRadiusCmd	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    inline void setTurnRadiusCmd(const double turnRadiusCmd)$/;"	f	language:C++	class:SimInterface
setup	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    void setup();$/;"	p	language:C++	class:dad_local_planner::DFTPlanner
setup	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    void setup();$/;"	p	language:C++	class:dad_local_planner::KFTPlanner
setup	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^void DFTPlanner::setup()$/;"	f	language:C++	class:DFTPlanner
setup	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^void KFTPlanner::setup()$/;"	f	language:C++	class:KFTPlanner
setup	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^bool BaseApplication::setup(void)$/;"	f	language:C++	class:BaseApplication
setup	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual bool setup();$/;"	p	language:C++	class:BaseApplication
setup	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^bool BaseApplication::setup(void)$/;"	f	language:C++	class:BaseApplication
setup	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^bool BaseApplication::setup(void)$/;"	f	language:C++	class:BaseApplication
setup	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^bool BaseApplication::setup(void)$/;"	f	language:C++	class:BaseApplication
setupResources	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^void BaseApplication::setupResources(void)$/;"	f	language:C++	class:BaseApplication
setupResources	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual void setupResources(void);$/;"	p	language:C++	class:BaseApplication
setupResources	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^void BaseApplication::setupResources(void)$/;"	f	language:C++	class:BaseApplication
setupResources	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^void BaseApplication::setupResources(void)$/;"	f	language:C++	class:BaseApplication
setupResources	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^void BaseApplication::setupResources(void)$/;"	f	language:C++	class:BaseApplication
setVec	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^inline void setVec(const int n, const Type val, Type Dest[]) {$/;"	f	language:C++
setVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	51;"	d	language:C++
setVec6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	47;"	d	language:C++
setVelocityConstraint	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    mpManager_.setVelocityConstraint ( config_.velMaxBack,config_.velMaxFwd);$/;"	p	language:C++	file:
setVelocityConstraint	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^    trajSpace_.setVelocityConstraint ( velMaxBack_ ,velMaxFwd_ );$/;"	p	language:C++	file:
setVelocityConstraint	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^    trajSpace_.setVelocityConstraint ( vmin,vmax );$/;"	p	language:C++	file:
setVelocityConstraint	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^void MotionPrimitiveManager::setVelocityConstraint ( const double vmin, const double vmax )$/;"	f	language:C++	class:MotionPrimitiveManager
setVelocityConstraint	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^void TrajectorySpace::setVelocityConstraint ( const double vmin, const double vmax )$/;"	f	language:C++	class:dad_local_planner::TrajectorySpace
setVertexArray	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    pyramidGeometry->setVertexArray( pyramidVertices );$/;"	p	language:C++	file:
setVisible	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                nodes[node_idx]->setVisible(tcontacts[tno].incontact[pno]);$/;"	p	language:C++	file:
setVisible	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            nodes[node_ind]->setVisible(wcontacts[wno].incontact); \/\/only visible if in contact$/;"	p	language:C++	file:
setVisible	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                nodes[node_idx]->setVisible(tcontacts[tno].incontact[pno]);$/;"	p	language:C++	file:
setVisible	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            nodes[node_ind]->setVisible(wcontacts[wno].incontact); \/\/only visible if in contact$/;"	p	language:C++	file:
setVisible	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^				nodes[node_idx]->setVisible(tcontacts[tno].incontact[pno]);$/;"	p	language:C++	file:
setVisible	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			nodes[node_ind]->setVisible(wcontacts[wno].incontact); \/\/only visible if in contact$/;"	p	language:C++	file:
setWait	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    void setWait(const bool wait);$/;"	p	language:C++	class:dad_local_planner::DFTPlanner
setWait	/home/rpradeep/Desktop/kft/src/main.cpp	/^    dft.setWait(false);$/;"	p	language:C++	file:
setWait	/home/rpradeep/Desktop/kft/src/main.cpp	/^    dft.setWait(false);$/;"	p	language:C++	file:
setWait	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^void DFTPlanner::setWait(const bool wait)$/;"	f	language:C++	class:DFTPlanner
setWait	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^        dft.setWait(false);$/;"	p	language:C++	file:
setWait	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^        dft.setWait(false);$/;"	p	language:C++	file:
setWgcParams	/home/rpradeep/Desktop/wmrde/include/wmrde/wheelgroundcontact.h	/^void setWgcParams( const Real Kp, Real params[] );$/;"	p	language:C++
set_angvel	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void set_angvel(const int idx, const Vec3 angvel);$/;"	p	language:C++	class:WmrModelODE
set_angvel_local	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void set_angvel_local( const int idx, const Vec3 angvel);$/;"	p	language:C++	class:WmrModelODE
set_HT	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void set_HT(const int idx, const HomogeneousTransform HT);$/;"	p	language:C++	class:WmrModelODE
set_isfixed	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	mdl.set_isfixed(steerfront_fi, true);$/;"	p	language:C++	file:
set_isfixed	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	mdl.set_isfixed(steerrear_fi, true);$/;"	p	language:C++	file:
set_isfixed	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void set_isfixed(const int fi, const bool val) { frames[fi].isfixed = val; } $/;"	f	language:C++	class:WmrModel
set_isfixed	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	mdl.set_isfixed(steerfront_fi, true);$/;"	p	language:C++	file:
set_isfixed	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	mdl.set_isfixed(steerrear_fi, true);$/;"	p	language:C++	file:
set_isfixed	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	mdl.set_isfixed(steerfront_fi, true);$/;"	p	language:C++	file:
set_isfixed	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	mdl.set_isfixed(steerrear_fi, true);$/;"	p	language:C++	file:
set_njc	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void set_njc( const int num_joint_constraints ) { njc = num_joint_constraints; }$/;"	f	language:C++	class:WmrModel
set_np	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^	void set_np(int number_of_points) { np = number_of_points; }$/;"	f	language:C++	class:TrackContactGeom
set_pos	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void set_pos(const int idx, const Vec3 pos);$/;"	p	language:C++	class:WmrModelODE
set_rot	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void set_rot(const int idx, const Mat3 R);$/;"	p	language:C++	class:WmrModelODE
set_vel	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void set_vel(const int idx, const Vec3 vel);$/;"	p	language:C++	class:WmrModelODE
set_vel_local	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	void set_vel_local(const int idx, const Vec3 vel);$/;"	p	language:C++	class:WmrModelODE
sFinal_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    double sFinal_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
show	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^            mDetailsPanel->show();$/;"	p	language:C++	file:
show	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^        overlay->show();$/;"	p	language:C++
show	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^        overlay->show();$/;"	p	language:C++
show	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^            mDetailsPanel->show();$/;"	p	language:C++	file:
show	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^            mDetailsPanel->show();$/;"	p	language:C++	file:
show	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^            mDetailsPanel->show();$/;"	p	language:C++	file:
showFrameStats	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    mTrayMgr->showFrameStats(OgreBites::TL_BOTTOMLEFT);$/;"	p	language:C++	file:
showLogo	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    mTrayMgr->showLogo(OgreBites::TL_BOTTOMRIGHT);$/;"	p	language:C++	file:
sigma	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        const double sigma = pt.get<double>( ss2.str() );$/;"	l	language:C++
SimInterface	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^    SimInterface()$/;"	f	language:C++	class:SimInterface
SimInterface	/home/rpradeep/Desktop/kft/include/wmrde/animate/SimInterface.h	/^class SimInterface$/;"	c	language:C++
simInterface	/home/rpradeep/Desktop/kft/src/main.cpp	/^SimInterface simInterface;$/;"	v	language:C++
simInterface	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^extern SimInterface simInterface;$/;"	x	language:C++
simInterface	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^SimInterface simInterface;$/;"	v	language:C++
SimInterface	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^    SimInterface()$/;"	f	language:C++	class:SimInterface
SimInterface	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/SimInterface.h	/^class SimInterface$/;"	c	language:C++
simInterface	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    SimInterface* simInterface = SimInterface::getInstance();$/;"	l	language:C++
simInterface	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    SimInterface* simInterface = SimInterface::getInstance();$/;"	l	language:C++
simulate	/home/rpradeep/Desktop/wmrde/include/wmrde/test.h	/^void simulate();$/;"	p	language:C++
simulatorThread	/home/rpradeep/Desktop/kft/src/main.cpp	/^void simulatorThread()$/;"	f	language:C++
simulatorThread	/home/rpradeep/Desktop/kft/src/main.cpp	/^void simulatorThread();$/;"	p	language:C++	file:
size	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    const int size = trajectoryVector_.size();$/;"	l	language:C++
size	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    const int size = trajectoryVector_.size();$/;"	l	language:C++
SIZEEULER	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	32;"	d	language:C++
SIZEMAT3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	18;"	d	language:C++
SIZEORIENT	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	23;"	d	language:C++
SIZEORIENT	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	25;"	d	language:C++
SIZEQUAT	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	33;"	d	language:C++
SIZEVEC3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	17;"	d	language:C++
SI_JD	/home/rpradeep/Desktop/wmrde/include/wmrde/state.h	21;"	d	language:C++
SI_ORIENT	/home/rpradeep/Desktop/wmrde/include/wmrde/state.h	19;"	d	language:C++
SI_POS	/home/rpradeep/Desktop/wmrde/include/wmrde/state.h	20;"	d	language:C++
skewVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	204;"	d	language:C++
skipCostFactor	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double skipCostFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
skipCostFactor	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double skipCostFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
skipThisNode	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    bool skipThisNode = false;$/;"	l	language:C++
smallest	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    double smallest = std::numeric_limits<double>::max();$/;"	l	language:C++
solutionNodeList_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    std::vector<Node> solutionNodeList_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
solution_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    std::vector<KFTSolutionElement> solution_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
solution_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    KFTSolution solution_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
solve	/home/rpradeep/Desktop/wmrde/include/wmrde/eigensolve.h	/^inline void solve(const int nrows, const int ncols, Real* A, Real* b, Real* x) {$/;"	f	language:C++
sort	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	std::sort(idx, idx + n, [&val](int i1, int i2) { return val[i1] < val[i2]; } );$/;"	p	language:C++	class:std
sortIndex	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^inline void sortIndex(const int n, const Type val[], int idx[], Type val_sort[]) {$/;"	f	language:C++
source_ptr	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^	const Type* source_ptr = Source+S2I(0,ci_source,nrows);$/;"	l	language:C++
source_ptr	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^	const Type* source_ptr;$/;"	l	language:C++
source_ptr	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/matrix.h	/^	const Type* source_ptr;$/;"	l	language:C++
spatialConvergenceThreshold	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double spatialConvergenceThreshold;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
spatialConvergenceThreshold	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double spatialConvergenceThreshold;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
SpatialHash	/home/rpradeep/Desktop/kft/src/planner/SpatialHash.cpp	/^SpatialHash::SpatialHash ( double originX, double originY, int binsX, int binsY, int binsTH, Range rangeX, Range rangeY, Range rangeTH ) :$/;"	f	language:C++	class:SpatialHash
spatialHashLength	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double spatialHashLength;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
spatialHashLength	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double spatialHashLength;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
spatialHashSize	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    int spatialHashSize;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
spatialHashSize	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    int spatialHashSize;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
spatialHashTimeTolerance	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double spatialHashTimeTolerance;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
spatialHashTimeTolerance	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double spatialHashTimeTolerance;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
spatialHash_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    SpatialHash spatialHash_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
speed	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^    double speed;$/;"	m	language:C++	class:KFTSolutionElement
speed	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^    double speed = 0;$/;"	l	language:C++
speed	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real speed,turnrad; \/\/commanded speed, turn radius$/;"	l	language:C++
speed	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real speed,turnrad; \/\/commanded speed, turn radius$/;"	l	language:C++
speed	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real speed,turnrad; \/\/commanded speed, turn radius$/;"	l	language:C++
speed	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real speed,turnrad; \/\/commanded speed, turn radius$/;"	l	language:C++
speedList	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    std::vector<double> speedList;$/;"	l	language:C++
sprocketframeinds	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	int sprocketframeinds[MAXNW]; \/\/sprocket frame index list$/;"	m	language:C++	class:WmrModel
sprocketframeinds	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int* sprocketframeinds = mdl.get_sprocketframeinds();$/;"	l	language:C++
sprocketframeinds	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		const int* sprocketframeinds = mdl.get_sprocketframeinds();$/;"	l	language:C++
sprocketframeinds	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int* sprocketframeinds = mdl.get_sprocketframeinds();$/;"	l	language:C++
sprocketframeinds	/home/rpradeep/Desktop/wmrde/src/test.cpp	/^    const int* sprocketframeinds = mdl.get_sprocketframeinds();$/;"	l	language:C++
sprocketframeinds	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int* sprocketframeinds = mdl.get_sprocketframeinds();$/;"	l	language:C++
sprocketframeinds	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	const int* sprocketframeinds = mdl.get_sprocketframeinds();$/;"	l	language:C++
sprocket_fi	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		int sprocket_fi = sprocketframeinds[tno];$/;"	l	language:C++
ss	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^        std::stringstream ss;$/;"	l	language:C++
ss	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        std::stringstream ss;$/;"	l	language:C++
ss	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    std::stringstream ss;$/;"	l	language:C++
ss	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    std::stringstream ss;$/;"	l	language:C++
ss	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgreDynamicObstacles.cpp	/^        std::stringstream ss;$/;"	l	language:C++
ss	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	std::stringstream ss(tmp);$/;"	p	language:C++
ss2	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        std::stringstream ss2;$/;"	l	language:C++
stage	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^    int stage;$/;"	m	language:C++	class:KFTSolutionElement
stageAtBeforeInsertPoint	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^        const int stageAtBeforeInsertPoint = (i > 0 ? trajectoryVector_[i-1].stage : -1);$/;"	l	language:C++
stageAtBeforeInsertPoint	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^        const int stageAtBeforeInsertPoint = (i > 0 ? trajectoryVector_[i-1].stage : -1);$/;"	l	language:C++
stageAtInsertPoint	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^        const int stageAtInsertPoint = trajectoryVector_[i].stage;$/;"	l	language:C++
stageAtInsertPoint	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^        const int stageAtInsertPoint = trajectoryVector_[i].stage;$/;"	l	language:C++
start	/home/rpradeep/Desktop/kft/include/TrajectoryPlanner.h	/^    void start()$/;"	f	language:C++	class:dad_local_planner::Timer
start	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	void start(void); \/\/calls setup in BaseApplication, must call this first$/;"	p	language:C++	class:WmrAnimation
start	/home/rpradeep/Desktop/kft/src/main.cpp	/^    anim.start();$/;"	p	language:C++	file:
start	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^            timer.start();$/;"	p	language:C++	file:
start	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^            timer.start();$/;"	p	language:C++	file:
start	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::start(void)$/;"	f	language:C++	class:WmrAnimation
start	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    anim.start();$/;"	p	language:C++	file:
start	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	void start(void); \/\/calls setup in BaseApplication, must call this first$/;"	p	language:C++	class:WmrAnimation
start	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^void WmrAnimation::start(void)$/;"	f	language:C++	class:WmrAnimation
start	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    anim.start();$/;"	p	language:C++	file:
start	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	void start(void); \/\/calls setup in BaseApplication, must call this first$/;"	p	language:C++	class:WmrAnimation
start	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    void start(void);$/;"	p	language:C++	class:WMRSim
start	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	anim.start();$/;"	p	language:C++	file:
start	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^void WmrAnimation::start(void) {$/;"	f	language:C++	class:WmrAnimation
start	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^void WMRSim::start(void) {$/;"	f	language:C++	class:WMRSim
startHeading	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^            const double startHeading = currentHeading;$/;"	l	language:C++
startHeading	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^            const double startHeading = currentHeading;$/;"	l	language:C++
startIndex	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        const int startIndex = firstMotionPrimitive ? 0 : 1;$/;"	l	language:C++
startNode	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    STNode startNode;$/;"	l	language:C++
startNode_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    Node startNode_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
startPositionX	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^            const double startPositionX = currentSpeed * (KINEMATIC_PLANNER_PERIOD_MS\/1000) * std::cos(currentHeading) + currentPositionX;$/;"	l	language:C++
startPositionX	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^            const double startPositionX = currentSpeed * (KINEMATIC_PLANNER_PERIOD_MS\/1000) * std::cos(currentHeading) + currentPositionX;$/;"	l	language:C++
startPositionY	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^            const double startPositionY = currentSpeed * (KINEMATIC_PLANNER_PERIOD_MS\/1000) * std::sin(currentHeading) + currentPositionY;$/;"	l	language:C++
startPositionY	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^            const double startPositionY = currentSpeed * (KINEMATIC_PLANNER_PERIOD_MS\/1000) * std::sin(currentHeading) + currentPositionY;$/;"	l	language:C++
startSpeed	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^            const double startSpeed = 0;$/;"	l	language:C++
startSpeed	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^            const double startSpeed = 0;$/;"	l	language:C++
startState	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^            const int startState = 0;$/;"	l	language:C++
startState	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^            const int startState = 0;$/;"	l	language:C++
startTime	/home/rpradeep/Desktop/kft/src/planner/ReferencePositionProfile.cpp	/^    const double startTime = timeInput.front();$/;"	l	language:C++
startTime	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    const double startTime = solution.elements.front().time;$/;"	l	language:C++
startTime	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^            const double startTime = 0;$/;"	l	language:C++
startTime	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    const double startTime = solution.elements.front().time;$/;"	l	language:C++
startTime	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^            const double startTime = 0;$/;"	l	language:C++
STATE	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    enum STATE {RESET,WAIT,MOVING,STOP};$/;"	g	language:C++	class:dad_local_planner::PurePursuitController
state	/home/rpradeep/Desktop/kft/src/main.cpp	/^    Real state[MAXNS];$/;"	l	language:C++
state	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    Real state[MAXNS];$/;"	l	language:C++
state	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real state[MAXNS];$/;"	l	language:C++
state	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    Real state[MAXNS];$/;"	l	language:C++
state	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	Real state[MAXNS];$/;"	l	language:C++
state	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	Real state[MAXNS];$/;"	l	language:C++
state	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	Real state[MAXNS];$/;"	l	language:C++
statedot	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real statedot[MAXNS];$/;"	l	language:C++
stateToHT	/home/rpradeep/Desktop/wmrde/include/wmrde/state.h	/^void stateToHT(const WmrModel &mdl, const Real state[], HomogeneousTransform HT_parent[], HomogeneousTransform HT_world[]);$/;"	p	language:C++
staticObstacleCollisionRiskFactor	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double staticObstacleCollisionRiskFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
staticObstacleCollisionRiskFactor	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double staticObstacleCollisionRiskFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
steer	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real steer[2];$/;"	l	language:C++
steer	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real steer[2];$/;"	l	language:C++
steer	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real steer[2];$/;"	l	language:C++
steerfront_fi	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	int steerfront_fi, steerrear_fi;$/;"	l	language:C++
steerfront_fi	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	static int steerfront_fi, steerrear_fi; \/\/steer frame indices, in WmrModel$/;"	l	language:C++	file:
steerfront_fi	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	int steerfront_fi, steerrear_fi;$/;"	l	language:C++
steerfront_fi	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	static int steerfront_fi, steerrear_fi; \/\/steer frame indices, in WmrModel$/;"	l	language:C++	file:
steerfront_fi	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	int steerfront_fi, steerrear_fi;$/;"	l	language:C++
steerfront_fi	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	static int steerfront_fi, steerrear_fi; \/\/steer frame indices, in WmrModel$/;"	l	language:C++	file:
steerrear_fi	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	int steerfront_fi, steerrear_fi;$/;"	l	language:C++
steerrear_fi	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	static int steerfront_fi, steerrear_fi; \/\/steer frame indices, in WmrModel$/;"	l	language:C++	file:
steerrear_fi	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	int steerfront_fi, steerrear_fi;$/;"	l	language:C++
steerrear_fi	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	static int steerfront_fi, steerrear_fi; \/\/steer frame indices, in WmrModel$/;"	l	language:C++	file:
steerrear_fi	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	int steerfront_fi, steerrear_fi;$/;"	l	language:C++
steerrear_fi	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	static int steerfront_fi, steerrear_fi; \/\/steer frame indices, in WmrModel$/;"	l	language:C++	file:
steer_cmd	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real steer_cmd[2];$/;"	l	language:C++
steer_cmd	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real steer_cmd[2];$/;"	l	language:C++
steer_cmd	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real steer_cmd[2];$/;"	l	language:C++
steer_rate	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real steer_rate[2];$/;"	l	language:C++
steer_rate	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real steer_rate[2];$/;"	l	language:C++
steer_rate	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real steer_rate[2];$/;"	l	language:C++
sTmp	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    double sTmp = currentPosition;$/;"	l	language:C++
STNode	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^class STNode$/;"	c	language:C++	namespace:dad_local_planner
STNodeComparator	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^class STNodeComparator$/;"	c	language:C++	namespace:dad_local_planner
STOP	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    enum STATE {RESET,WAIT,MOVING,STOP};$/;"	e	language:C++	enum:dad_local_planner::PurePursuitController::STATE
stopIndex	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^    int stopIndex = maxIndex + 1;$/;"	l	language:C++
str	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        position << obstacle_section.str() << ".radius";$/;"	p	language:C++	file:
str	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        ss << obstacle_section.str() << ".triggerRadius";$/;"	p	language:C++	file:
str	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        ss2 << obstacle_section.str() << ".sigma";$/;"	p	language:C++	file:
str	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    pl.insert(std::make_pair(std::string("WINDOW"), windowHndStr.str()));$/;"	p	language:C++	file:
str	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    pl.insert(std::make_pair(std::string("WINDOW"), windowHndStr.str()));$/;"	p	language:C++	file:
str	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    pl.insert(std::make_pair(std::string("WINDOW"), windowHndStr.str()));$/;"	p	language:C++	file:
str	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    pl.insert(std::make_pair(std::string("WINDOW"), windowHndStr.str()));$/;"	p	language:C++	file:
stringToNumVector	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^void stringToNumVector( std::string& tmp, std::vector<Type>& out ) { $/;"	f	language:C++
subOptimalityEps	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double subOptimalityEps;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
subOptimalityEps	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double subOptimalityEps;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
subtreeInertias	/home/rpradeep/Desktop/wmrde/include/wmrde/dynamics.h	/^void subtreeInertias(const WmrModel &mdl, const Mat6b Xup[], Mat6b Is_subt[]);$/;"	p	language:C++
subtreeInertias	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^void subtreeInertias(const WmrModel &mdl, const Mat6b Xup[], Mat6b Is_subt[]) {$/;"	f	language:C++
sub_initTrackContactGeom	/home/rpradeep/Desktop/kft/include/wmrde/test.h	/^void sub_initTrackContactGeom(const WmrModel& mdl, TrackContactGeom* contacts);$/;"	p	language:C++
sub_initTrackContactGeom	/home/rpradeep/Desktop/wmrde/include/wmrde/test.h	/^void sub_initTrackContactGeom(const WmrModel& mdl, TrackContactGeom* contacts);$/;"	p	language:C++
sub_initTrackContactGeom	/home/rpradeep/Desktop/wmrde/src/test.cpp	/^void sub_initTrackContactGeom(const WmrModel& mdl, TrackContactGeom* contacts)$/;"	f	language:C++
sub_initTrackContactGeom	/home/rpradeep/Desktop/wmrsim/include/wmrde/test.h	/^void sub_initTrackContactGeom(const WmrModel& mdl, TrackContactGeom* contacts);$/;"	p	language:C++
sub_initTrackContactGeom	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^void sub_initTrackContactGeom(const WmrModel& mdl, TrackContactGeom* contacts) {$/;"	f	language:C++
sub_initTrackContactGeom	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^void sub_initTrackContactGeom(const WmrModel& mdl, TrackContactGeom* contacts) {$/;"	f	language:C++
success	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    int success = vrml.readfile(filename.c_str());$/;"	l	language:C++
success	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    int success = vrml.readfile(filename.c_str());$/;"	l	language:C++
success	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	int success = vrml.readfile(filename.c_str());$/;"	l	language:C++
success	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    int success = vrml.readfile(filename.c_str());$/;"	l	language:C++
Surface	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/Surface.h	/^class Surface {$/;"	c	language:C++
surfaceDz	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	int surfaceDz(const Vec3 pt, int loc, Real& dz, Vec3 normal);$/;"	p	language:C++	class:GridSurf
surfaceDz	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/PlaneSurf.h	/^	int surfaceDz(const Vec3 pt, int loc, Real& dz, Vec3 normal);$/;"	p	language:C++	class:PlaneSurf
surfaceDz	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/Surface.h	/^	virtual int surfaceDz(const Vec3 pt, int loc, Real& dz, Vec3 normal) = 0;$/;"	p	language:C++	class:Surface
surfaceDz	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	int surfaceDz(const Vec3 pt, int loc, Real& dz, Vec3 normal);$/;"	p	language:C++	class:TriMeshSurf
surfaceHeight	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	int surfaceHeight(const Vec3 pt, int loc, Real& height);$/;"	p	language:C++	class:GridSurf
surfaceHeight	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/PlaneSurf.h	/^	int surfaceHeight(const Vec3 pt, int loc, Real& height);$/;"	p	language:C++	class:PlaneSurf
surfaceHeight	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/Surface.h	/^	virtual int surfaceHeight(const Vec3 pt, int loc, Real& height) = 0;$/;"	p	language:C++	class:Surface
surfaceHeight	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	int surfaceHeight(const Vec3 pt, int loc, Real& height);$/;"	p	language:C++	class:TriMeshSurf
surfaceNormal	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            surf->surfaceNormal(pos, true, nvec);$/;"	p	language:C++	file:
surfaceNormal	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	int surfaceNormal(const Vec3 pt, int loc, Vec3 normal);$/;"	p	language:C++	class:GridSurf
surfaceNormal	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/PlaneSurf.h	/^	int surfaceNormal(const Vec3 pt, int loc, Vec3 normal);$/;"	p	language:C++	class:PlaneSurf
surfaceNormal	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/Surface.h	/^	virtual int surfaceNormal(const Vec3 pt, int loc, Vec3 normal) = 0;$/;"	p	language:C++	class:Surface
surfaceNormal	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	int surfaceNormal(const Vec3 pt, int loc, Vec3 normal);$/;"	p	language:C++	class:TriMeshSurf
surfaceNormal	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            surf->surfaceNormal(pos, true, nvec);$/;"	p	language:C++	file:
surfaceNormal	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			surf->surfaceNormal(pos, true, nvec);$/;"	p	language:C++	file:
surfaceNormal	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            surf->surfaceNormal(pos, true, nvec);$/;"	p	language:C++	file:
surfacesDz	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/Surface.h	/^int surfacesDz(const SurfaceVector& surfaces, const Vec3 pt, Real& dz, Vec3 normal);$/;"	p	language:C++
surfacesHeight	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/Surface.h	/^int surfacesHeight(const SurfaceVector& surfaces, const Vec3 pt, Real& height);$/;"	p	language:C++
SurfaceVector	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/Surface.h	/^typedef std::vector<std::unique_ptr<Surface>> SurfaceVector;$/;"	t	language:C++
surfs	/home/rpradeep/Desktop/kft/src/main.cpp	/^    SurfaceVector surfs;$/;"	l	language:C++
surfs	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    SurfaceVector surfs;$/;"	l	language:C++
surfs	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    SurfaceVector surfs;$/;"	l	language:C++
surfs	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	SurfaceVector surfs;$/;"	l	language:C++
surfs	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	SurfaceVector surfs;$/;"	l	language:C++
surf_ptr	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	TriMeshSurf* surf_ptr = dynamic_cast<TriMeshSurf*>(surfaces.back().get());$/;"	l	language:C++
swap	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                        std::swap(v1,v2);$/;"	p	language:C++	class:std	file:
swap	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                        std::swap(v1,v2);$/;"	p	language:C++	class:std	file:
swap	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^						std::swap(v1,v2);$/;"	p	language:C++	class:std	file:
swap	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                        std::swap(v1,v2);$/;"	p	language:C++	class:std	file:
szElement	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^    Ogre::String szElement;$/;"	m	language:C++	class:OgreText
szElement	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^    String szElement;$/;"	m	language:C++	class:OgreText
t	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    double t; \/\/> Time$/;"	m	language:C++	class:dad_local_planner::STNode
t	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        const double t = globalReferenceTime_ + time - ob.triggerTime;$/;"	l	language:C++
t	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    double x,y,th,v,t;$/;"	l	language:C++
talonScene	/home/rpradeep/Desktop/wmrsim/include/wmrde/demo/talonscene.h	/^void talonScene(const WmrModel& mdl, const TrackContactGeom contacts[], WmrAnimation& anim ); $/;"	p	language:C++
targetPosition	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    const double targetPosition = referencePositionProfile_.getPositionAtTime(currentTime);$/;"	l	language:C++
targetTmp	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^        double targetTmp = targetPosition;$/;"	l	language:C++
tau	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real tau[MAXNV];$/;"	l	language:C++
tau_minus_C	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real tau_minus_C[MAXNV]; \/\/tau - C$/;"	l	language:C++
tb	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    TrajectoryBuffer tb;$/;"	l	language:C++
tc	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real tc = .2;$/;"	l	language:C++
tcontacts	/home/rpradeep/Desktop/kft/src/main.cpp	/^    TrackContactGeom tcontacts[WmrModel::MAXNW];$/;"	l	language:C++
tcontacts	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const TrackContactGeom* tcontacts = dynamic_cast<const TrackContactGeom*>(contacts);$/;"	l	language:C++
tcontacts	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    TrackContactGeom tcontacts[WmrModel::MAXNW];$/;"	l	language:C++
tcontacts	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const TrackContactGeom* tcontacts = dynamic_cast<const TrackContactGeom*>(contacts);$/;"	l	language:C++
tcontacts	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		const TrackContactGeom* tcontacts;$/;"	l	language:C++
tcontacts	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const TrackContactGeom* tcontacts;$/;"	l	language:C++
tcontacts	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		TrackContactGeom* tcontacts = static_cast<TrackContactGeom*>(contacts);$/;"	l	language:C++
tcontacts	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const TrackContactGeom* tcontacts =0;$/;"	l	language:C++
tcontacts	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	TrackContactGeom* tcontacts;$/;"	l	language:C++
tcontacts	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    TrackContactGeom tcontacts[WmrModel::MAXNW];$/;"	l	language:C++
tcontacts	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	TrackContactGeom tcontacts[WmrModel::MAXNW];$/;"	l	language:C++
tcontacts	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const TrackContactGeom* tcontacts = dynamic_cast<const TrackContactGeom*>(contacts);$/;"	l	language:C++
tcontacts	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	TrackContactGeom tcontacts[WmrModel::MAXNW];$/;"	l	language:C++
tc_j	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real tc_j[MAXNJC];		\/\/holonomic joint constraints$/;"	m	language:C++	class:WmrModel
tc_z	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real tc_z[MAXNW];		\/\/wheel-ground contact constraints, z dir$/;"	m	language:C++	class:WmrModel
te	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^        KFTSolutionElement te = trajectoryVector_[i];$/;"	l	language:C++
te	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^        KFTSolutionElement te = trajectoryVector_[i];$/;"	l	language:C++
tempMov	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^osg::Vec3d tempMov;$/;"	v	language:C++
test_simulate	/home/rpradeep/Desktop/wmrsim/include/wmrde/test.h	/^void test_simulate();$/;"	p	language:C++
test_simulate	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^void test_simulate() {$/;"	f	language:C++
test_simulate	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^void test_simulate() {$/;"	f	language:C++
textArea	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^    Ogre::TextAreaOverlayElement *textArea;$/;"	m	language:C++	class:OgreText
textArea	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^    TextAreaOverlayElement *textArea;$/;"	m	language:C++	class:OgreText
textureCoord	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            manual->textureCoord(float(i)\/float(nx-1), float(j)\/float(ny-1));$/;"	p	language:C++	file:
textureCoord	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            manual->textureCoord(float(i)\/float(nx-1), float(j)\/float(ny-1));$/;"	p	language:C++	file:
textureCoord	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			manual->textureCoord(float(i)\/float(nx-1), float(j)\/float(ny-1));$/;"	p	language:C++	file:
textureCoord	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            manual->textureCoord(float(i)\/float(nx-1), float(j)\/float(ny-1));$/;"	p	language:C++	file:
tfo	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^        Ogre::TextureFilterOptions tfo;$/;"	l	language:C++
tfo	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^        Ogre::TextureFilterOptions tfo;$/;"	l	language:C++
tfo	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^        Ogre::TextureFilterOptions tfo;$/;"	l	language:C++
tfo	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^        Ogre::TextureFilterOptions tfo;$/;"	l	language:C++
th	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    double th; \/\/> Heading angle$/;"	m	language:C++	class:dad_local_planner::STNode
th	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^            double th;$/;"	l	language:C++
th	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^            f >> th;$/;"	l	language:C++
th	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    double x,y,th,v,t;$/;"	l	language:C++
thetaErr	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        const double thetaErr = goalHeading - mCurrentHeading;$/;"	l	language:C++
thetaErr	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    double thetaErr = 0;$/;"	l	language:C++
thk	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    float thk = .01f;$/;"	l	language:C++
thk	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    float thk = .01f;$/;"	l	language:C++
thk	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	float thk = .01f;$/;"	l	language:C++
time	/home/rpradeep/Desktop/kft/include/planner/KFTSolution.h	/^    double time;$/;"	m	language:C++	class:KFTSolutionElement
time	/home/rpradeep/Desktop/kft/src/main.cpp	/^    Real time = 0;$/;"	l	language:C++
time	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    const double time = childNode.t;$/;"	l	language:C++
time	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    double time = 0;$/;"	l	language:C++
time	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    double time = 0;$/;"	l	language:C++
time	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    Real time = 0;$/;"	l	language:C++
time	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    Real time = 0;$/;"	l	language:C++
time	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	Real time = 0;$/;"	l	language:C++
time	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	std::cout << "state(" << time << ")=\\n"; printMatReal(ns,1,y,-1,-1); std::cout << std::endl;$/;"	l	language:C++
time	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	std::cout << "state(" << time << ")=\\n"; printMatReal(ns,1,y,-1,-1); std::cout << std::endl;$/;"	l	language:C++
time	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	Real time = 0;$/;"	l	language:C++
time	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	std::cout << "state(" << time << ")=\\n"; printMatReal(ns,1,y,-1,-1); std::cout << std::endl;$/;"	l	language:C++
time	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	std::cout << "state(" << time << ")=\\n"; printMatReal(ns,1,y,-1,-1); std::cout << std::endl;$/;"	l	language:C++
timeAtReplanStart	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    const double timeAtReplanStart = mKReplanStartIter->time;$/;"	l	language:C++
timeCheck	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    const bool timeCheck = std::abs(solution.elements.front().time - timeAtReplanStart) < TOLERANCE;$/;"	l	language:C++
timeLeft	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        const double timeLeft = (mCurrentGoalPoint->time - mCurrentTime);$/;"	l	language:C++
timeLeft	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^            const int timeLeft = KINEMATIC_PLANNER_PERIOD_MS - elapsedTime;$/;"	l	language:C++
timeLeft	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^            const int timeLeft = KINEMATIC_PLANNER_PERIOD_MS - elapsedTime;$/;"	l	language:C++
timeList	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    std::vector<double> timeList;$/;"	l	language:C++
timeOffset	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    const double timeOffset = startTime - startTime_;$/;"	l	language:C++
timeOffset	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    const double timeOffset = time - startTime_;$/;"	l	language:C++
timeOffset	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    const double timeOffset = startTime - startTime_;$/;"	l	language:C++
timeOffset	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    const double timeOffset = time - startTime_;$/;"	l	language:C++
Timer	/home/rpradeep/Desktop/kft/include/TrajectoryPlanner.h	/^    Timer()$/;"	f	language:C++	class:dad_local_planner::Timer
Timer	/home/rpradeep/Desktop/kft/include/TrajectoryPlanner.h	/^class Timer$/;"	c	language:C++	namespace:dad_local_planner
timer	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    Timer timer;$/;"	l	language:C++
timer	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    Timer timer;$/;"	l	language:C++
timerEnd	/home/rpradeep/Desktop/kft/include/TrajectoryPlanner.h	/^        auto timerEnd = std::chrono::steady_clock::now();$/;"	l	language:C++
timerStart_	/home/rpradeep/Desktop/kft/include/TrajectoryPlanner.h	/^    std::chrono::time_point<std::chrono::steady_clock> timerStart_;$/;"	m	language:C++	class:dad_local_planner::Timer
timeVector	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    std::vector<double> timeVector;$/;"	l	language:C++
timeVector	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^            f << obstaclePosition[0] << "\\t" << obstaclePosition[1] << "\\t" << timeVector[j] << "\\n";$/;"	l	language:C++
timeVector	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    std::vector<double> timeVector;$/;"	l	language:C++
timeVector_	/home/rpradeep/Desktop/kft/include/planner/DynamicObstacleCostEvaluator.h	/^    std::vector<double> timeVector_;$/;"	m	language:C++	class:dad_local_planner::DynamicObstacleCostEvaluator
tmp	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real tmp;$/;"	l	language:C++
Tmp	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^	Mat3 Tmp;$/;"	l	language:C++
tmp	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^	Vec3 tmp;$/;"	l	language:C++
tmp	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^	Vec3 tmp; \/\/temporary$/;"	l	language:C++
tmp	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^		std::string tmp;$/;"	l	language:C++
tmp	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	Real tmp;$/;"	l	language:C++
tmp	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real tmp;$/;"	l	language:C++
tmp	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		Vec6b tmp;$/;"	l	language:C++
tmp	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Vec6b tmp;$/;"	l	language:C++
tmp	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Vec6b tmp;$/;"	l	language:C++
tmp	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real tmp;$/;"	l	language:C++
tmpCost	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        double tmpCost = 0;$/;"	l	language:C++
tmpCost	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        double tmpCost = 0;$/;"	l	language:C++
tmpIndex	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    int tmpIndex = 0; \/\/ used in the process of finding the appropriate stage number to assign to ke$/;"	l	language:C++
tno	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^			int tno = whichtrack[pno];$/;"	l	language:C++
ToFix	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^    finline static Fix       ToFix       (int32 val)    {return val<<N;}$/;"	f	language:C++	class:xs_Fix
ToFix	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^    finline static Fix       ToFix       (real64 val)   {return xs_ConvertToFixed(val);}$/;"	f	language:C++	class:xs_Fix
toggleAdvancedFrameStats	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^        mTrayMgr->toggleAdvancedFrameStats();$/;"	p	language:C++	file:
toggleAdvancedFrameStats	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^        mTrayMgr->toggleAdvancedFrameStats();$/;"	p	language:C++	file:
toggleAdvancedFrameStats	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^        mTrayMgr->toggleAdvancedFrameStats();$/;"	p	language:C++	file:
toggleAdvancedFrameStats	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^        mTrayMgr->toggleAdvancedFrameStats();$/;"	p	language:C++	file:
ToInt	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^    finline static int32     ToInt       (Fix f)        {return f>>N;}$/;"	f	language:C++	class:xs_Fix
tol	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            float tol = Ogre::Math::DegreesToRadians(15);$/;"	l	language:C++
tol	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            float tol = Ogre::Math::DegreesToRadians(15);$/;"	l	language:C++
tol	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			float tol = Ogre::Math::DegreesToRadians(15);$/;"	l	language:C++
tol	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            float tol = Ogre::Math::DegreesToRadians(15);$/;"	l	language:C++
TOLERANCE	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    const double TOLERANCE = 10e-3;$/;"	l	language:C++
TOLERANCE	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^    const double TOLERANCE = 10e-3;$/;"	l	language:C++
tolx_	/home/rpradeep/Desktop/wmrde/include/wmrde/linesearch.h	/^	Real tolx_ = 2*tolx;$/;"	l	language:C++
top	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    int left, top;$/;"	l	language:C++
top	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    int left, top;$/;"	l	language:C++
top	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    int left, top;$/;"	l	language:C++
top	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    int left, top;$/;"	l	language:C++
topNode	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^            STNode topNode = priorityQueue_.top();$/;"	l	language:C++
topNode	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^            Node topNode = priorityQueue_.top();$/;"	l	language:C++
TOQVELI	/home/rpradeep/Desktop/wmrde/include/wmrde/state.h	34;"	d	language:C++
ToReal	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^    finline static real64    ToReal      (Fix f)        {return real64(f)\/real64(1<<N);}$/;"	f	language:C++	class:xs_Fix
tosec	/home/rpradeep/Desktop/wmrsim/include/wmrde/test.h	/^inline double tosec(timeval tim)$/;"	f	language:C++
toSpatialInertia	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^void toSpatialInertia(const Real m, const Vec3 c, const Mat3 I, Mat6b Is);$/;"	p	language:C++
TOSTATEI	/home/rpradeep/Desktop/wmrde/include/wmrde/state.h	33;"	d	language:C++
totalCost	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    double totalCost;$/;"	m	language:C++	class:dad_local_planner::STNode
TotalMass	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const Real TotalMass=198; \/\/kg$/;"	l	language:C++
TotalMass	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real TotalMass = Mb + nw*Mw;$/;"	l	language:C++
TotalMass	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const Real TotalMass=198; \/\/kg$/;"	l	language:C++
TotalMass	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const Real TotalMass=198; \/\/kg$/;"	l	language:C++
totalTime	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    const Real totalTime = 60.0;$/;"	l	language:C++
totalTime	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    const Real totalTime = 60.0;$/;"	l	language:C++
tq	/home/rpradeep/Desktop/kft/src/main.cpp	/^    TrajectoryQueue tq;$/;"	l	language:C++
tq	/home/rpradeep/Desktop/kft/src/main.cpp	/^    TrajectoryQueue tq;$/;"	l	language:C++
traceBack	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    void traceBack ( const STNode &node );$/;"	p	language:C++	class:dad_local_planner::DFTPlanner
traceBack	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    void traceBack ( const Node &node );$/;"	p	language:C++	class:dad_local_planner::KFTPlanner
traceBack	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^void DFTPlanner::traceBack ( const STNode& node )$/;"	f	language:C++	class:DFTPlanner
traceBack	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^void KFTPlanner::traceBack ( const Node& node )$/;"	f	language:C++	class:KFTPlanner
TrackContactGeom	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^class TrackContactGeom : public ContactGeom {$/;"	c	language:C++
trackJacobians	/home/rpradeep/Desktop/wmrde/include/wmrde/kinematics.h	/^int trackJacobians(const WmrModel& mdl, const HomogeneousTransform HT_world[], const TrackContactGeom contacts[], Real A[]);$/;"	p	language:C++
trackJacobians	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^int trackJacobians(const WmrModel& mdl, const HomogeneousTransform HT_world[], const TrackContactGeom contacts[], Real A[]) {$/;"	f	language:C++
traj	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        const Trajectory traj ( transformedMp,v1,currentTime );$/;"	p	language:C++	file:
trajectory	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^            const Trajectory trajectory ( transformedMp, velocityOption, currentNode.t );$/;"	p	language:C++	file:
TrajectoryBuffer	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^TrajectoryBuffer::TrajectoryBuffer()$/;"	f	language:C++	class:TrajectoryBuffer
TrajectoryBuffer	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^TrajectoryBuffer::TrajectoryBuffer()$/;"	f	language:C++	class:TrajectoryBuffer
TrajectoryQueue	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^    TrajectoryQueue();$/;"	p	language:C++	class:TrajectoryQueue
TrajectoryQueue	/home/rpradeep/Desktop/kft/include/planner/TrajectoryQueue.h	/^class TrajectoryQueue$/;"	c	language:C++
TrajectoryQueue	/home/rpradeep/Desktop/kft/src/planner/TrajectoryQueue.cpp	/^TrajectoryQueue::TrajectoryQueue()$/;"	f	language:C++	class:TrajectoryQueue
TrajectorySpace	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^TrajectorySpace::TrajectorySpace()$/;"	f	language:C++	class:dad_local_planner::TrajectorySpace
trajResolution	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    int trajResolution;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
trajResolution	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    int trajResolution;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
transformedMp	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        MotionPrimitive transformedMp ( mp );$/;"	p	language:C++	file:
transformedMp	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        MotionPrimitive transformedMp = mp;$/;"	l	language:C++
transformMotionPrimitive	/home/rpradeep/Desktop/kft/src/planner/Node.cpp	/^void transformMotionPrimitive ( MotionPrimitive& mp, const Node& parentNode )$/;"	f	language:C++	namespace:dad_local_planner
transformMotionPrimitiveAndChildNode	/home/rpradeep/Desktop/kft/src/planner/Node.cpp	/^void transformMotionPrimitiveAndChildNode ( MotionPrimitive& mp, Node& childNode, const Node& parentNode )$/;"	f	language:C++	namespace:dad_local_planner
triangle	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                    manual->triangle(vi, vi+1, vi+2);$/;"	p	language:C++	file:
triangle	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                    manual->triangle(vi, vi+2, vi+1);$/;"	p	language:C++	file:
triangle	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                    manual->triangle(vi, vi+1, vi+2);$/;"	p	language:C++	file:
triangle	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                    manual->triangle(vi, vi+2, vi+1);$/;"	p	language:C++	file:
triangle	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^					manual->triangle(vi, vi+1, vi+2); $/;"	p	language:C++	file:
triangle	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^					manual->triangle(vi, vi+2, vi+1); $/;"	p	language:C++	file:
triangle	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                    manual->triangle(vi, vi+1, vi+2);$/;"	p	language:C++	file:
triangle	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                    manual->triangle(vi, vi+2, vi+1);$/;"	p	language:C++	file:
triangularSpace	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^void TrajectorySpace::triangularSpace()$/;"	f	language:C++	class:dad_local_planner::TrajectorySpace
triggerRadius	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        const double triggerRadius = pt.get<double>( ss.str() );$/;"	l	language:C++
triggerTime	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        const double triggerTime = 0;$/;"	l	language:C++
trilinearInterp	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	/^inline Real trilinearInterp( const Real f[8], const Real xn[3]) {$/;"	f	language:C++
trilinearInterp_f	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	/^inline void trilinearInterp_f(const Real* F, const int I[3], const int n[2], Real f[8]) {$/;"	f	language:C++
trilinearInterp_xn	/home/rpradeep/Desktop/wmrde/include/wmrde/util/interp_util.h	/^inline void trilinearInterp_xn( const Real lim[], const Real d[], const Real x[], int I[], Real xn[] ) {$/;"	f	language:C++
TriMeshSurf	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	TriMeshSurf();$/;"	p	language:C++	class:TriMeshSurf
TriMeshSurf	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^class TriMeshSurf : public Surface {$/;"	c	language:C++
trimesh_surf	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    TriMeshSurf* trimesh_surf = dynamic_cast<TriMeshSurf*>(surf);$/;"	l	language:C++
trimesh_surf	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    TriMeshSurf* trimesh_surf = dynamic_cast<TriMeshSurf*>(surf);$/;"	l	language:C++
trimesh_surf	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	TriMeshSurf* trimesh_surf = dynamic_cast<TriMeshSurf*>(surf);$/;"	l	language:C++
trimesh_surf	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    TriMeshSurf* trimesh_surf = dynamic_cast<TriMeshSurf*>(surf);$/;"	l	language:C++
tt	/home/rpradeep/.vimrc	/^noremap tt :tab split<cr>$/;"	m	language:Vim
tTmp	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^    double tTmp = currentTime;$/;"	l	language:C++
tubeCostEvaluator_	/home/rpradeep/Desktop/kft/include/planner/KFTPlanner.h	/^    TubeCostEvaluator tubeCostEvaluator_;$/;"	m	language:C++	class:dad_local_planner::KFTPlanner
tubeSize	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double tubeSize;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
tubeSize	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double tubeSize;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
tune	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    void tune();$/;"	p	language:C++	class:dad_local_planner::DFTPlanner
tune	/home/rpradeep/Desktop/kft/src/main.cpp	/^                dft.tune();$/;"	p	language:C++	file:
tune	/home/rpradeep/Desktop/kft/src/main.cpp	/^    dft.tune();$/;"	p	language:C++	file:
tune	/home/rpradeep/Desktop/kft/src/main.cpp	/^    dft.tune();$/;"	p	language:C++	file:
tune	/home/rpradeep/Desktop/kft/src/planner/DFTPlanner.cpp	/^void DFTPlanner::tune()$/;"	f	language:C++	class:DFTPlanner
tune	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^        dft.tune();$/;"	p	language:C++	file:
tune	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^        dft.tune();$/;"	p	language:C++	file:
turnrad	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^    double turnrad = 1000;$/;"	l	language:C++
turnrad	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real speed,turnrad; \/\/commanded speed, turn radius$/;"	l	language:C++
turnrad	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real speed,turnrad; \/\/commanded speed, turn radius$/;"	l	language:C++
turnrad	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real speed,turnrad; \/\/commanded speed, turn radius$/;"	l	language:C++
turnrad	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real speed,turnrad; \/\/commanded speed, turn radius$/;"	l	language:C++
turnrad_new	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^		Real turnrad_new = turnrad;$/;"	l	language:C++
turnrad_new	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^		Real turnrad_new = turnrad;$/;"	l	language:C++
turnrad_new	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^		Real turnrad_new = turnrad;$/;"	l	language:C++
TutorialApplication	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^TutorialApplication::TutorialApplication(void)$/;"	f	language:C++	class:TutorialApplication
TutorialApplication	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.h	/^    TutorialApplication(void);$/;"	p	language:C++	class:TutorialApplication
TutorialApplication	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.h	/^class TutorialApplication : public BaseApplication$/;"	c	language:C++
tx	/home/rpradeep/Desktop/kft/src/planner/Node.cpp	/^        const double tx = cos ( parentNode.th ) * mp.x[k] - sin ( parentNode.th ) * mp.y[k];$/;"	l	language:C++
ty	/home/rpradeep/Desktop/kft/src/planner/Node.cpp	/^        const double ty = sin ( parentNode.th ) * mp.x[k] + cos ( parentNode.th ) * mp.y[k];$/;"	l	language:C++
typeName	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    Ogre::String secName, typeName, archName;$/;"	l	language:C++
typeName	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    Ogre::String secName, typeName, archName;$/;"	l	language:C++
typeName	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    Ogre::String secName, typeName, archName;$/;"	l	language:C++
typeName	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    Ogre::String secName, typeName, archName;$/;"	l	language:C++
TYPESIGN	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	36;"	d	language:C++
T_	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^	Real T_[3*4];$/;"	l	language:C++
u	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^		Real u[WmrModel::MAXNA];$/;"	l	language:C++
u	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^		Real u[WmrModel::MAXNA];$/;"	l	language:C++
u	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^		Real u[WmrModel::MAXNA];$/;"	l	language:C++
u	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	ControllerIO u;$/;"	l	language:C++
u	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real u[WmrModel::MAXNA];$/;"	l	language:C++
u	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^		Real u[WmrModel::MAXNA];$/;"	l	language:C++
uint16	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^    typedef unsigned short          uint16;$/;"	t	language:C++
uint32	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^    typedef unsigned long           uint32;$/;"	t	language:C++
uint8	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^    typedef unsigned char           uint8;$/;"	t	language:C++
uniformWgc	/home/rpradeep/Desktop/wmrde/include/wmrde/wheelgroundcontact.h	/^inline void uniformWgc( const int wheelno, const Real params[], const Vec3 vc, const Real Rw, const Real dz, \/\/inputs$/;"	f	language:C++
unique	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        velocityOptions.erase( unique( velocityOptions.begin(), velocityOptions.end() ), velocityOptions.end() );$/;"	p	language:C++	file:
unitCube	/home/rpradeep/Desktop/sim/basic.cpp	/^    osg::Box* unitCube = new osg::Box( osg::Vec3(0,0,0), 1.0f);$/;"	l	language:C++
unitCubeDrawable	/home/rpradeep/Desktop/sim/basic.cpp	/^    osg::ShapeDrawable* unitCubeDrawable = new osg::ShapeDrawable(unitCube);$/;"	l	language:C++
unskewVec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	210;"	d	language:C++
updateCurrentState	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    void updateCurrentState(const double currentTime);$/;"	p	language:C++	class:dad_local_planner::PurePursuitController
updateCurrentState	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^void PurePursuitController::updateCurrentState(const double currentTime)$/;"	f	language:C++	class:PurePursuitController
updateGoalNode	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^    void updateGoalNode(const double x,const double y);$/;"	p	language:C++	class:WmrAnimation
updateGoalNode	/home/rpradeep/Desktop/kft/src/main.cpp	/^        anim.updateGoalNode(xx,yy);$/;"	p	language:C++	file:
updateGoalNode	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::updateGoalNode(const double x,const double y)$/;"	f	language:C++	class:WmrAnimation
updateModelContactGeom	/home/rpradeep/Desktop/wmrde/include/wmrde/kinematics.h	/^void updateModelContactGeom(const WmrModel& mdl, const SurfaceVector& surfaces, const HomogeneousTransform HT_world[], const int min_npic, \/\/inputs$/;"	p	language:C++
updateModelContactGeom	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^void updateModelContactGeom(const WmrModel& mdl, const SurfaceVector& surfaces, const HomogeneousTransform HT_world[], const int min_npic, \/\/inputs$/;"	f	language:C++
updateNodesLines	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	void updateNodesLines( const int nf, const HomogeneousTransform HT_parent[], const int num_contacts, const ContactGeom* contacts );$/;"	p	language:C++	class:WmrAnimation
updateNodesLines	/home/rpradeep/Desktop/kft/src/main.cpp	/^        anim.updateNodesLines(nf, HT_parent, nw + nt, contacts);$/;"	p	language:C++	file:
updateNodesLines	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^void WmrAnimation::updateNodesLines( const int nf, const HomogeneousTransform HT_parent[], const int num_contacts, const ContactGeom* contacts )$/;"	f	language:C++	class:WmrAnimation
updateNodesLines	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^        anim.updateNodesLines(nf, HT_parent, nw + nt, contacts);$/;"	p	language:C++	file:
updateNodesLines	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	void updateNodesLines( const int nf, const HomogeneousTransform HT_parent[], const int num_contacts, const ContactGeom* contacts );$/;"	p	language:C++	class:WmrAnimation
updateNodesLines	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^void WmrAnimation::updateNodesLines( const int nf, const HomogeneousTransform HT_parent[], const int num_contacts, const ContactGeom* contacts )$/;"	f	language:C++	class:WmrAnimation
updateNodesLines	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^        anim.updateNodesLines(nf, HT_parent, nw + nt, contacts);$/;"	p	language:C++	file:
updateNodesLines	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	void updateNodesLines( const int nf, const HomogeneousTransform HT_parent[], const int num_contacts, const ContactGeom* contacts );$/;"	p	language:C++	class:WmrAnimation
updateNodesLines	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    void updateNodesLines( const int nf, const HomogeneousTransform HT_parent[], const int num_contacts, const ContactGeom* contacts );$/;"	p	language:C++	class:WMRSim
updateNodesLines	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^	void updateNodesLines( const int nf, const HomogeneousTransform HT_parent[], const int num_contacts, const ContactGeom* contacts );$/;"	p	language:C++	class:WMRSim
updateNodesLines	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^void WmrAnimation::updateNodesLines( const int nf, const HomogeneousTransform HT_parent[], const int num_contacts, const ContactGeom* contacts ) {$/;"	f	language:C++	class:WmrAnimation
updateNodesLines	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^void WMRSim::updateNodesLines( const int nf, const HomogeneousTransform HT_parent[], const int num_contacts, const ContactGeom* contacts )$/;"	f	language:C++	class:WMRSim
updateNodesLines	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^	void updateNodesLines( const int nf, const HomogeneousTransform HT_parent[], const int num_contacts, const ContactGeom* contacts );$/;"	p	language:C++	class:WMRSim
updateNodeTransform	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	void updateNodeTransform(const int node_index, const HomogeneousTransform HT) {$/;"	f	language:C++	class:WmrAnimation
updateNodeTransform	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	void updateNodeTransform(const int node_index, const HomogeneousTransform HT) {$/;"	f	language:C++	class:WmrAnimation
updateNodeTransform	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	void updateNodeTransform(const int node_index, const HomogeneousTransform HT) {$/;"	f	language:C++	class:WmrAnimation
updateNodeTransform	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    void updateNodeTransform(const int node_index, const HomogeneousTransform HT)$/;"	f	language:C++	class:WMRSim
updateNodeTransform	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^	void updateNodeTransform(const int node_index, const HomogeneousTransform HT) {$/;"	f	language:C++	class:WMRSim
updateNodeTransform	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^	void updateNodeTransform(const int node_index, const HomogeneousTransform HT) {$/;"	f	language:C++	class:WMRSim
updateRender	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^	bool updateRender(void);$/;"	p	language:C++	class:WmrAnimation
updateRender	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^bool WmrAnimation::updateRender(void)$/;"	f	language:C++	class:WmrAnimation
updateRender	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^	bool updateRender(void);$/;"	p	language:C++	class:WmrAnimation
updateRender	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^bool WmrAnimation::updateRender(void)$/;"	f	language:C++	class:WmrAnimation
updateRender	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^	bool updateRender(void);$/;"	p	language:C++	class:WmrAnimation
updateRender	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    bool updateRender(void);$/;"	p	language:C++	class:WMRSim
updateRender	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^bool WmrAnimation::updateRender(void) {$/;"	f	language:C++	class:WmrAnimation
updateRender	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^bool WMRSim::updateRender(void)$/;"	f	language:C++	class:WMRSim
updateTrackContactGeom	/home/rpradeep/Desktop/wmrde/include/wmrde/collision.h	/^void updateTrackContactGeom(const SurfaceVector& surfaces, const HomogeneousTransform HT_track_to_world, \/\/input$/;"	p	language:C++
updateTrackContactGeom	/home/rpradeep/Desktop/wmrsim/include/wmrde/collision.h	/^void updateTrackContactGeom(const SurfaceVector& surfaces, const HomogeneousTransform HT_track_to_world, \/\/input$/;"	p	language:C++
updateWheelContactGeom	/home/rpradeep/Desktop/wmrde/include/wmrde/collision.h	/^inline void updateWheelContactGeom(const SurfaceVector& surfaces, const HomogeneousTransform HT_wheel_to_world, const Real radius, $/;"	f	language:C++
updateWheelContactGeom	/home/rpradeep/Desktop/wmrsim/include/wmrde/collision.h	/^inline void updateWheelContactGeom(const SurfaceVector& surfaces, const HomogeneousTransform HT_wheel_to_world, const Real radius, $/;"	f	language:C++
updateWheelContactGeomDiscretize	/home/rpradeep/Desktop/wmrde/include/wmrde/collision.h	/^void updateWheelContactGeomDiscretize(const SurfaceVector& surfaces, const HomogeneousTransform HT_wheel_to_world, const Real radius,  \/\/input$/;"	p	language:C++
updateWheelContactGeomDiscretize	/home/rpradeep/Desktop/wmrsim/include/wmrde/collision.h	/^void updateWheelContactGeomDiscretize(const SurfaceVector& surfaces, const HomogeneousTransform HT_wheel_to_world, const Real radius,  \/\/input$/;"	p	language:C++
updateWheelContactGeomRoot	/home/rpradeep/Desktop/wmrde/include/wmrde/collision.h	/^void updateWheelContactGeomRoot(const SurfaceVector& surfaces, const HomogeneousTransform HT_wheel_to_world, const Real radius, $/;"	p	language:C++
updateWheelContactGeomRoot	/home/rpradeep/Desktop/wmrsim/include/wmrde/collision.h	/^void updateWheelContactGeomRoot(const SurfaceVector& surfaces, const HomogeneousTransform HT_wheel_to_world, const Real radius, $/;"	p	language:C++
update_actframeinds	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void update_actframeinds();$/;"	p	language:C++	class:WmrModel
update_actframeinds	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^void WmrModel::update_actframeinds() {$/;"	f	language:C++	class:WmrModel
update_sprocketframeinds	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void update_sprocketframeinds();$/;"	p	language:C++	class:WmrModel
update_sprocketframeinds	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^void WmrModel::update_sprocketframeinds() {$/;"	f	language:C++	class:WmrModel
update_wheelframeinds	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void update_wheelframeinds();$/;"	p	language:C++	class:WmrModel
update_wheelframeinds	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^void WmrModel::update_wheelframeinds() {$/;"	f	language:C++	class:WmrModel
upper	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^    int upper = trajectoryVector_.size();$/;"	l	language:C++
upper	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^    int upper = trajectoryVector_.size();$/;"	l	language:C++
upperIndex	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^    int upperIndex = cumulativeDistances_.size()-1;$/;"	l	language:C++
upperlim	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	Real upperlim[2]; \/\/upper limit$/;"	m	language:C++	class:GridSurf
usedStoppingActionOnce	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    bool usedStoppingActionOnce = true; \/\/ This is to prevent adding multiple stopping actions (motion primitive ?) to the same parent node.$/;"	l	language:C++
use_constraints	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	bool use_constraints;$/;"	m	language:C++	class:WmrModel
u_nv	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real u_nv[MAXNV]; \/\/ size nv, padded$/;"	l	language:C++
v	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    double v; \/\/> Velocity$/;"	m	language:C++	class:dad_local_planner::STNode
v	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^            double v,k;$/;"	l	language:C++
v	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    double v, k;$/;"	l	language:C++
v	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^    double v, k;$/;"	l	language:C++
v	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    double x,y,th,v,t;$/;"	l	language:C++
v	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^			Vec3 v;$/;"	l	language:C++
v	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^			Vec3 v;$/;"	l	language:C++
V	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^		Vec3 V[nv];$/;"	l	language:C++
V	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^		Vec3 V[nv];$/;"	l	language:C++
v	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Vec6b v[WmrModel::MAXNF]; \/\/velocity$/;"	l	language:C++
v	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real v[MAXNC]; \/\/nc x 1$/;"	l	language:C++
v0	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        double v0 = dummyParent.v;$/;"	l	language:C++
v1	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        double v1 = dummyChild.v;$/;"	l	language:C++
v1	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                    int v1 = vrml.getTriangleVertexIndex(part_no,tno,vno_1);$/;"	l	language:C++
v1	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                    int v1 = vrml.getTriangleVertexIndex(part_no,tno,vno_1);$/;"	l	language:C++
v1	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^					int v1 = vrml.getTriangleVertexIndex(part_no,tno,vno_1);$/;"	l	language:C++
v1	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                    int v1 = vrml.getTriangleVertexIndex(part_no,tno,vno_1);$/;"	l	language:C++
v2	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                    int v2 = vrml.getTriangleVertexIndex(part_no,tno,vno_2);$/;"	l	language:C++
v2	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                    int v2 = vrml.getTriangleVertexIndex(part_no,tno,vno_2);$/;"	l	language:C++
v2	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^					int v2 = vrml.getTriangleVertexIndex(part_no,tno,vno_2);$/;"	l	language:C++
v2	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                    int v2 = vrml.getTriangleVertexIndex(part_no,tno,vno_2);$/;"	l	language:C++
valid	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^            bool valid = true;$/;"	l	language:C++
validCount	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^    int validCount = 0;$/;"	l	language:C++
validVelocity	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^            bool validVelocity = false;$/;"	l	language:C++
value	/home/rpradeep/Desktop/kft/src/wmrde/surface/GridSurf.cpp	/^	std::string value;$/;"	l	language:C++
val_	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	Type val_;$/;"	l	language:C++
val_	/home/rpradeep/Desktop/wmrde/include/wmrde/util/index_util.h	/^	Type val_;$/;"	l	language:C++
vbl	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real omega, gamma_l, gamma_r, vbl, vbr, vfl, vfr;$/;"	l	language:C++
vbr	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real omega, gamma_l, gamma_r, vbl, vbr, vfl, vfr;$/;"	l	language:C++
vec	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^    const std::vector<NodeIdType>& vec = spatialHash_.getNodeIdVectorAt ( currentNode.x, currentNode.y, currentNode.th );$/;"	l	language:C++
Vec3	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	/^typedef Real Vec3[SIZEVEC3];$/;"	t	language:C++
Vec6b	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^typedef Real Vec6b[2*SIZEVEC3];$/;"	t	language:C++
VecEuler	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^typedef Real VecEuler[SIZEEULER]; \/\/[roll pitch yaw]$/;"	t	language:C++
VecOrient	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^typedef VecEuler VecOrient;$/;"	t	language:C++
VecOrient	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^typedef VecQuat VecOrient;$/;"	t	language:C++
VecQuat	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^typedef Real VecQuat[SIZEQUAT]; \/\/[w x y z]$/;"	t	language:C++
Vector3	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgreDynamicObstacles.cpp	/^        node->setPosition(Ogre::Vector3(mDynamicObstaclesVector[i].x,mDynamicObstaclesVector[i].y,3));$/;"	p	language:C++	file:
Vector3	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    mGoalNode->setPosition(Ogre::Vector3(x,y,0));$/;"	p	language:C++	file:
Vector3	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^        op.addPoint(Ogre::Vector3(i,(std::cos(i*6.28\/25)+1)*std::sin(i*2*3.14\/50),0));$/;"	p	language:C++	file:
vel	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        const Eigen::Vector2d vel(vx,vy);$/;"	p	language:C++	file:
velMaxBack	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double velMaxBack;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
velMaxBack	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double velMaxBack;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
velMaxFwd	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double velMaxFwd;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
velMaxFwd	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double velMaxFwd;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
velocityError	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    double velocityError = std::abs ( refVelocity - childNode.v );$/;"	l	language:C++
velocityErrorThreshold	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    double velocityErrorThreshold = 0.25;$/;"	l	language:C++
velocityOption	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^            const double velocityOption = velocityOptions[j];$/;"	l	language:C++
velocityOptions	/home/rpradeep/Desktop/kft/src/planner/KFTPlanner.cpp	/^        std::vector<double> velocityOptions;$/;"	l	language:C++
velToEulerrate	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^void velToEulerrate(const VecEuler euler, const Vec3 vel, VecEuler eulerrate, MatEuler T); \/\/called once per time step$/;"	p	language:C++
velToOrientrate	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	213;"	d	language:C++
velToOrientrate	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	222;"	d	language:C++
velToQuatrate	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/transform.h	/^void velToQuatrate(const VecQuat quat, const Vec3 vel, VecQuat quatrate, MatQuat T);$/;"	p	language:C++
verify	/home/rpradeep/Desktop/kft/src/planner/TrajectoryBuffer.cpp	/^void TrajectoryBuffer::verify(const std::string tag)$/;"	f	language:C++	class:TrajectoryBuffer
verify	/home/rpradeep/Desktop/kft/src/TrajectoryBuffer.cpp	/^void TrajectoryBuffer::verify(const std::string tag)$/;"	f	language:C++	class:TrajectoryBuffer
vert	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^            const Real* vert = vertices[indices[S2I(vno,tno,3)]]; \/\/pointer to vertex$/;"	l	language:C++
vert	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^            const Real* vert = vertices[indices[S2I(vno,tno,3)]]; \/\/pointer to vertex$/;"	l	language:C++
vert	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^			const Real* vert = vertices[indices[S2I(vno,tno,3)]]; \/\/pointer to vertex$/;"	l	language:C++
vert	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^            const Real* vert = vertices[indices[S2I(vno,tno,3)]]; \/\/pointer to vertex$/;"	l	language:C++
vertices	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const Vec3* vertices = surf->get_vertices();$/;"	l	language:C++
vertices	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::Vector3 vertices[nv];$/;"	l	language:C++
vertices	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    Ogre::Vector3 vertices[nv];$/;"	l	language:C++
vertices	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	Vec3 vertices[3*MAXNT];$/;"	m	language:C++	class:TriMeshSurf
vertices	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const Vec3* vertices = surf->get_vertices();$/;"	l	language:C++
vertices	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Ogre::Vector3 vertices[nv];$/;"	l	language:C++
vertices	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    Ogre::Vector3 vertices[nv];$/;"	l	language:C++
vertices	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const Vec3* vertices = surf->get_vertices();$/;"	l	language:C++
vertices	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Ogre::Vector3 vertices[nv];$/;"	l	language:C++
vertices	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	Ogre::Vector3 vertices[nv];$/;"	l	language:C++
vertices	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const Vec3* vertices = surf->get_vertices();$/;"	l	language:C++
vertices	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    Ogre::Vector3 vertices[nv];$/;"	l	language:C++
vertices	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    Ogre::Vector3 vertices[nv];$/;"	l	language:C++
vfl	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real omega, gamma_l, gamma_r, vbl, vbr, vfl, vfr;$/;"	l	language:C++
vfmax	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        double vfmax = 0; \/\/ maximum final velcity$/;"	l	language:C++
vfmax2	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        const double vfmax2 = 2 * accMaxFwd_ * ds + vi * vi; \/\/ From v^2 - u^2 = 2 * a * s$/;"	l	language:C++
vfmin	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        double vfmin = 0; \/\/ minimum final velcity$/;"	l	language:C++
vfmin2	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        const double vfmin2 = 2 * accMaxBack_ * ds + vi * vi;$/;"	l	language:C++
vfr	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real omega, gamma_l, gamma_r, vbl, vbr, vfl, vfr;$/;"	l	language:C++
vi	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^    const double vi = currentVelocity; \/\/ initial velocty$/;"	l	language:C++
vi	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                int vi = tno*3; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^        int vi = face_no*3; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^        int vi = face_no*4; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^        int vi = tno*3; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                int vi = tno*3; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^        int vi = face_no*3; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^        int vi = face_no*4; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^        int vi = tno*3; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^			int vi=TOQVELI(actframeinds[ai]);$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		int vi = TOQVELI(fi); \/\/vel index (in qvel)$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^    int vi = TOQVELI(actframeinds[ai]);$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^				int vi = TOQVELI(fi); \/\/index in qvel$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^				int vi = TOQVELI(fi); \/\/index in qvel$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^			int vi = TOQVELI(fi);$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		int vi = TOQVELI(actframeinds[ai]);$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^				int vi = tno*3; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^		int vi = face_no*3; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^		int vi = face_no*4; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^		int vi = tno*3; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                int vi = tno*3; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^        int vi = face_no*3; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^        int vi = face_no*4; \/\/vertex index in the entire list$/;"	l	language:C++
vi	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^        int vi = tno*3; \/\/vertex index in the entire list$/;"	l	language:C++
viewer	/home/rpradeep/Desktop/sim/basic.cpp	/^    osgViewer::Viewer viewer;$/;"	l	language:C++
viewer	/home/rpradeep/Downloads/BasicGeometry (1).cpp	/^    osgViewer::Viewer viewer;$/;"	l	language:C++
VisualSelection	/home/rpradeep/.vimrc	/^function! VisualSelection(direction) range$/;"	f	language:Vim
vis_act	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^  bool vis_act[MAXNV]; \/\/is actuated element of joint space vel$/;"	l	language:C++
vis_act	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	bool vis_act[MAXNV]; \/\/is fixed rate in joint space vel$/;"	l	language:C++
VI_ANG	/home/rpradeep/Desktop/wmrde/include/wmrde/state.h	25;"	d	language:C++
VI_JR	/home/rpradeep/Desktop/wmrde/include/wmrde/state.h	27;"	d	language:C++
VI_LIN	/home/rpradeep/Desktop/wmrde/include/wmrde/state.h	26;"	d	language:C++
vj	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^				int vj = TOQVELI(fj); \/\/2nd vel index$/;"	l	language:C++
vJ	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^			Vec6b vJ; \/\/spatial joint velocity$/;"	l	language:C++
vno_2	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^                    int vno_2; \/\/2nd vertex no$/;"	l	language:C++
vno_2	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^                    int vno_2; \/\/2nd vertex no$/;"	l	language:C++
vno_2	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^					int vno_2; \/\/2nd vertex no$/;"	l	language:C++
vno_2	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^                    int vno_2; \/\/2nd vertex no$/;"	l	language:C++
vout	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		Real vout[MAXNC];$/;"	l	language:C++
vp	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    Ogre::Viewport* vp = mWindow->addViewport(mCamera);$/;"	l	language:C++
vp	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    Ogre::Viewport* vp = mWindow->addViewport(mCamera);$/;"	l	language:C++
vp	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    Ogre::Viewport* vp = mWindow->addViewport(mCamera);$/;"	l	language:C++
vp	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    Ogre::Viewport* vp = mWindow->addViewport(mCamera);$/;"	l	language:C++
vrml	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    VrmlData<float> vrml;$/;"	l	language:C++
vrml	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    VrmlData<float> vrml;$/;"	l	language:C++
vrml	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	VrmlData<float> vrml;$/;"	l	language:C++
vrml	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    VrmlData<float> vrml;$/;"	l	language:C++
VrmlData	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^	VrmlData() { }$/;"	f	language:C++	class:VrmlData
VrmlData	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/VrmlData.h	/^class VrmlData {$/;"	c	language:C++
vTmp	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^        double vTmp = -100;$/;"	l	language:C++
vx	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        double px,py,vx,vy;$/;"	l	language:C++
vy	/home/rpradeep/Desktop/kft/src/planner/DynamicObstacleCostEvaluator.cpp	/^        double px,py,vx,vy;$/;"	l	language:C++
V_	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/linalg3.h	/^	Real* V_;$/;"	l	language:C++
V_	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^	Real V_[6];$/;"	l	language:C++
V_	/home/rpradeep/Desktop/wmrde/include/wmrde/algebra/spatial.h	/^	Real* V_;$/;"	l	language:C++
w	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	Real w = k3; \/\/half track width$/;"	l	language:C++
w	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	Real w;		\/\/width$/;"	l	language:C++
w!!	/home/rpradeep/.vimrc	/^cmap w!! w !sudo tee % >\/dev\/null$/;"	m	language:Vim
WAIT	/home/rpradeep/Desktop/kft/include/planner/PurePursuitController.h	/^    enum STATE {RESET,WAIT,MOVING,STOP};$/;"	e	language:C++	enum:dad_local_planner::PurePursuitController::STATE
WAIT	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    enum DSTATUS {PLAN,WAIT,DONE};$/;"	e	language:C++	enum:DSTATUS	file:
WAIT	/home/rpradeep/Desktop/kft/src/planner/TrajectoryPlanner.cpp	/^    enum KSTATUS {PLAN,WAIT, INIT, DONE};$/;"	e	language:C++	enum:KSTATUS	file:
WAIT	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    enum DSTATUS {PLAN,WAIT,DONE};$/;"	e	language:C++	enum:DSTATUS	file:
WAIT	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    enum KSTATUS {PLAN,WAIT, INIT, DONE};$/;"	e	language:C++	enum:KSTATUS	file:
wait_	/home/rpradeep/Desktop/kft/include/planner/DFTPlanner.h	/^    bool wait_;$/;"	m	language:C++	class:dad_local_planner::DFTPlanner
WaypointPath	/home/rpradeep/Desktop/kft/src/planner/WaypointPath.cpp	/^WaypointPath::WaypointPath()$/;"	f	language:C++	class:WaypointPath
wayPointPosition	/home/rpradeep/Desktop/kft/src/planner/PurePursuitController.cpp	/^        const Eigen::Vector2d wayPointPosition = i->positionVector;$/;"	l	language:C++
Wb	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const Real Wb = 1.0; \/\/width of body$/;"	l	language:C++
Wb	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real Wb = .26;		\/\/width of body$/;"	l	language:C++
Wb	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const Real Wb = 1.0; \/\/width of body$/;"	l	language:C++
Wb	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const Real Wb = 1.0; \/\/width of body$/;"	l	language:C++
wcontacts	/home/rpradeep/Desktop/kft/src/main.cpp	/^    WheelContactGeom wcontacts[WmrModel::MAXNW];$/;"	l	language:C++
wcontacts	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const WheelContactGeom* wcontacts = dynamic_cast<const WheelContactGeom*>(contacts);$/;"	l	language:C++
wcontacts	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    WheelContactGeom wcontacts[WmrModel::MAXNW];$/;"	l	language:C++
wcontacts	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const WheelContactGeom* wcontacts = dynamic_cast<const WheelContactGeom*>(contacts);$/;"	l	language:C++
wcontacts	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^		const WheelContactGeom* wcontacts;$/;"	l	language:C++
wcontacts	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const WheelContactGeom* wcontacts;$/;"	l	language:C++
wcontacts	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		WheelContactGeom* wcontacts = static_cast<WheelContactGeom*>(contacts);$/;"	l	language:C++
wcontacts	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const WheelContactGeom* wcontacts =0;$/;"	l	language:C++
wcontacts	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	WheelContactGeom* wcontacts;$/;"	l	language:C++
wcontacts	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    WheelContactGeom wcontacts[WmrModel::MAXNW];$/;"	l	language:C++
wcontacts	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	WheelContactGeom wcontacts[WmrModel::MAXNW];$/;"	l	language:C++
wcontacts	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const WheelContactGeom* wcontacts = dynamic_cast<const WheelContactGeom*>(contacts);$/;"	l	language:C++
wcontacts	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	WheelContactGeom wcontacts[WmrModel::MAXNW];$/;"	l	language:C++
WGC_MODEL_TYPE	/home/rpradeep/Desktop/wmrde/include/wmrde/wheelgroundcontact.h	55;"	d	language:C++
wgc_p	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	Real wgc_p[MAXNPAR]; \/\/wheel-ground contact model params$/;"	m	language:C++	class:WmrModel
WheelContactGeom	/home/rpradeep/Desktop/wmrde/include/wmrde/contactgeom.h	/^class WheelContactGeom : public ContactGeom {$/;"	c	language:C++
wheelframeinds	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^		const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelframeinds	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelframeinds	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	int wheelframeinds[MAXNW]; \/\/wheel frame index list$/;"	m	language:C++	class:WmrModel
wheelframeinds	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelframeinds	/home/rpradeep/Desktop/wmrde/src/demo/rockyscene.cpp	/^	const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelframeinds	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^		const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelframeinds	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelframeinds	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^	const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelframeinds	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelframeinds	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^		const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelframeinds	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelframeinds	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelframeinds	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^		const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelframeinds	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelframeinds	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelframeinds	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^	const int* wheelframeinds = mdl.get_wheelframeinds();$/;"	l	language:C++
wheelGroundContactModel	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	void (*wheelGroundContactModel) ( const int wheelno, const Real params[], const Vec3 vc, const Real Rw, const Real dz, \/\/inputs$/;"	m	language:C++	class:WmrModel
wheelJacobians	/home/rpradeep/Desktop/wmrde/include/wmrde/kinematics.h	/^int wheelJacobians(const WmrModel& mdl, const HomogeneousTransform HT_world[], const WheelContactGeom contacts[], Real A[]);$/;"	p	language:C++
wheelJacobians	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^int wheelJacobians(const WmrModel& mdl, const HomogeneousTransform HT_world[], const WheelContactGeom contacts[], Real A[]) {$/;"	f	language:C++
whichPointsInContact	/home/rpradeep/Desktop/wmrde/include/wmrde/collision.h	/^void whichPointsInContact(const int min_npic, const int np, const Vec3 pts_world[], const Real dz[], int incontact[]);$/;"	p	language:C++
whichPointsInContact	/home/rpradeep/Desktop/wmrsim/include/wmrde/collision.h	/^void whichPointsInContact(const int min_npic, const int np, const Vec3 pts_world[], const Real dz[], int incontact[]);$/;"	p	language:C++
whichPointsInContactTrack	/home/rpradeep/Desktop/wmrde/include/wmrde/collision.h	/^void whichPointsInContactTrack(const int min_npic, const int nt, TrackContactGeom* contacts);$/;"	p	language:C++
whichPointsInContactTrack	/home/rpradeep/Desktop/wmrsim/include/wmrde/collision.h	/^void whichPointsInContactTrack(const int min_npic, const int nt, TrackContactGeom* contacts);$/;"	p	language:C++
whichPointsInContactWheel	/home/rpradeep/Desktop/wmrde/include/wmrde/collision.h	/^void whichPointsInContactWheel(const int min_npic, const int nw, WheelContactGeom* contacts);$/;"	p	language:C++
whichPointsInContactWheel	/home/rpradeep/Desktop/wmrsim/include/wmrde/collision.h	/^void whichPointsInContactWheel(const int min_npic, const int nw, WheelContactGeom* contacts);$/;"	p	language:C++
whichtrack	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	int whichtrack[MAXNP];$/;"	l	language:C++
whichtrack	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	int whichtrack[MAXNP];$/;"	l	language:C++
width	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    unsigned int width, height, depth;$/;"	l	language:C++
width	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    unsigned int width, height, depth;$/;"	l	language:C++
width	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    unsigned int width, height, depth;$/;"	l	language:C++
width	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    unsigned int width, height, depth;$/;"	l	language:C++
wiggleCostFactor	/home/rpradeep/Desktop/kft/include/DADPlannerConfig.h	/^    double wiggleCostFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
wiggleCostFactor	/home/rpradeep/Desktop/kft/include/planner/DADPlannerConfig.h	/^    double wiggleCostFactor;$/;"	m	language:C++	class:dad_local_planner::DADPlannerConfig
windowClosed	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^void BaseApplication::windowClosed(Ogre::RenderWindow* rw)$/;"	f	language:C++	class:BaseApplication
windowClosed	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual void windowClosed(Ogre::RenderWindow* rw);$/;"	p	language:C++	class:BaseApplication
windowClosed	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^void BaseApplication::windowClosed(Ogre::RenderWindow* rw)$/;"	f	language:C++	class:BaseApplication
windowClosed	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^void BaseApplication::windowClosed(Ogre::RenderWindow* rw)$/;"	f	language:C++	class:BaseApplication
windowClosed	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^void BaseApplication::windowClosed(Ogre::RenderWindow* rw)$/;"	f	language:C++	class:BaseApplication
windowHnd	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    size_t windowHnd = 0;$/;"	l	language:C++
windowHnd	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    windowHndStr << windowHnd;$/;"	l	language:C++
windowHnd	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    size_t windowHnd = 0;$/;"	l	language:C++
windowHnd	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    windowHndStr << windowHnd;$/;"	l	language:C++
windowHnd	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    size_t windowHnd = 0;$/;"	l	language:C++
windowHnd	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    windowHndStr << windowHnd;$/;"	l	language:C++
windowHnd	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    size_t windowHnd = 0;$/;"	l	language:C++
windowHnd	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    windowHndStr << windowHnd;$/;"	l	language:C++
windowHndStr	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^    std::ostringstream windowHndStr;$/;"	l	language:C++
windowHndStr	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^    std::ostringstream windowHndStr;$/;"	l	language:C++
windowHndStr	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^    std::ostringstream windowHndStr;$/;"	l	language:C++
windowHndStr	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^    std::ostringstream windowHndStr;$/;"	l	language:C++
windowResized	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^void BaseApplication::windowResized(Ogre::RenderWindow* rw)$/;"	f	language:C++	class:BaseApplication
windowResized	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual void windowResized(Ogre::RenderWindow* rw);$/;"	p	language:C++	class:BaseApplication
windowResized	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^void BaseApplication::windowResized(Ogre::RenderWindow* rw)$/;"	f	language:C++	class:BaseApplication
windowResized	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^void BaseApplication::windowResized(Ogre::RenderWindow* rw)$/;"	f	language:C++	class:BaseApplication
windowResized	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^void BaseApplication::windowResized(Ogre::RenderWindow* rw)$/;"	f	language:C++	class:BaseApplication
WmrAnimation	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^    WmrAnimation(void);$/;"	p	language:C++	class:WmrAnimation
WmrAnimation	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^class WmrAnimation : public BaseApplication$/;"	c	language:C++
WmrAnimation	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^WmrAnimation::WmrAnimation(void)$/;"	f	language:C++	class:WmrAnimation
WmrAnimation	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^    WmrAnimation(void);$/;"	p	language:C++	class:WmrAnimation
WmrAnimation	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^class WmrAnimation : public BaseApplication$/;"	c	language:C++
WmrAnimation	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^WmrAnimation::WmrAnimation(void)$/;"	f	language:C++	class:WmrAnimation
WmrAnimation	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^    WmrAnimation(void);$/;"	p	language:C++	class:WmrAnimation
WmrAnimation	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^class WmrAnimation : public BaseApplication$/;"	c	language:C++
WmrAnimation	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^WmrAnimation::WmrAnimation(void)$/;"	f	language:C++	class:WmrAnimation
WmrModel	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^	WmrModel();$/;"	p	language:C++	class:WmrModel
WmrModel	/home/rpradeep/Desktop/wmrde/include/wmrde/WmrModel.h	/^class WmrModel {$/;"	c	language:C++
WmrModel	/home/rpradeep/Desktop/wmrde/src/WmrModel.cpp	/^WmrModel::WmrModel() {$/;"	f	language:C++	class:WmrModel
WmrModelODE	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	WmrModelODE(); \/\/constructor$/;"	p	language:C++	class:WmrModelODE
WmrModelODE	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^class WmrModelODE {$/;"	c	language:C++
WMRSim	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    WMRSim(void);$/;"	p	language:C++	class:WMRSim
WMRSim	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^class WMRSim : public BaseApplication$/;"	c	language:C++
WMRSim	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^WMRSim::WMRSim(void)$/;"	f	language:C++	class:WMRSim
WMRSim	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^    WMRSim(void);$/;"	p	language:C++	class:WMRSim
WMRSim	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^class WMRSim : public BaseApplication$/;"	c	language:C++
WMRSim	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^WMRSim::WMRSim(void)$/;"	f	language:C++	class:WMRSim
WMRSim	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^    WMRSim(void);$/;"	p	language:C++	class:WMRSim
WMRSim	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^class WMRSim : public BaseApplication$/;"	c	language:C++
WMRSIM_DOUBLE_PRECISION	/home/rpradeep/Desktop/kft/include/wmrde/options.h	10;"	d	language:C++
WMRSIM_DOUBLE_PRECISION	/home/rpradeep/Desktop/wmrde/include/wmrde/options.h	10;"	d	language:C++
WMRSIM_DOUBLE_PRECISION	/home/rpradeep/Desktop/wmrsim/include/wmrde/options.h	11;"	d	language:C++
WMRSIM_ENABLE_ANIMATION	/home/rpradeep/Desktop/wmrsim/include/wmrde/options.h	13;"	d	language:C++
WMRSIM_USE_QUATERNION	/home/rpradeep/Desktop/kft/include/wmrde/options.h	9;"	d	language:C++
WMRSIM_USE_QUATERNION	/home/rpradeep/Desktop/wmrde/include/wmrde/options.h	9;"	d	language:C++
WMRSIM_USE_QUATERNION	/home/rpradeep/Desktop/wmrsim/include/wmrde/options.h	10;"	d	language:C++
wno	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^			int wno = incontactinds[i];$/;"	l	language:C++
world	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	dWorldID world;$/;"	m	language:C++	class:WmrModelODE
WRAPDEG	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	57;"	d	language:C++
WRAPRAD	/home/rpradeep/Desktop/wmrde/include/wmrde/util/common_util.h	56;"	d	language:C++
Ww	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	const Real Ww = .07; \/\/width of wheel$/;"	l	language:C++
Ww	/home/rpradeep/Desktop/wmrde/src/demo/rockymodel.cpp	/^	const Real Ww = .08;		\/\/wheel width$/;"	l	language:C++
Ww	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	const Real Ww = .07; \/\/width of wheel$/;"	l	language:C++
Ww	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	const Real Ww = .07; \/\/width of wheel$/;"	l	language:C++
x	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^            double x;$/;"	l	language:C++
x	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^            f >> x;$/;"	l	language:C++
x	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^            double x, y;$/;"	l	language:C++
x	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    double x,y,th,v,t;$/;"	l	language:C++
x	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^                 tempMov.x() = -moveSpeed;$/;"	p	language:C++	file:
x	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^                 tempMov.x() = moveSpeed;$/;"	p	language:C++	file:
x	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	Real x,y;	\/\/location of ramp center$/;"	l	language:C++
x	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    double x = 0;$/;"	l	language:C++
x	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Real x[MAXNV]; \/\/size ninpt$/;"	l	language:C++
x	/home/rpradeep/Desktop/wmrde/src/kinematics.cpp	/^	Real x[MAXNS];$/;"	l	language:C++
x1	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    double x1 = dir[0];$/;"	l	language:C++
xmax	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	Real xmin,xmax,ymin,ymax;	\/\/bounding box$/;"	m	language:C++	class:TriMeshSurf
xmin	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	Real xmin,xmax,ymin,ymax;	\/\/bounding box$/;"	m	language:C++	class:TriMeshSurf
xs_Assert	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	43;"	d	language:C++
xs_Assert	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	46;"	d	language:C++
xs_CeilToInt	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^finline int32 xs_CeilToInt(real64 val, real64 dme)$/;"	f	language:C++
xs_CeilToInt	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^int32 xs_CeilToInt        (real64 val, real64 dme =  _xs_doublemagicroundeps);$/;"	p	language:C++
xs_Clamp	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	38;"	d	language:C++
xs_ConvertToFixed	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^    finline static int32 xs_ConvertToFixed (real64 val)$/;"	f	language:C++	class:xs_Fix
xs_CRoundToInt	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^finline int32 xs_CRoundToInt(real64 val, real64 dmr)$/;"	f	language:C++
xs_CRoundToInt	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^int32 xs_CRoundToInt      (real64 val, real64 dmr =  _xs_doublemagic);$/;"	p	language:C++
xs_Fix	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^template <int32 N> class xs_Fix$/;"	c	language:C++
xs_FloorToInt	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^finline int32 xs_FloorToInt(real64 val, real64 dme)$/;"	f	language:C++
xs_FloorToInt	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^int32 xs_FloorToInt       (real64 val, real64 dme =  _xs_doublemagicroundeps);$/;"	p	language:C++
xs_Max	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	37;"	d	language:C++
xs_MAXINT	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	34;"	d	language:C++
xs_Memcpy	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^inline void* xs_Memcpy  (void* p1, void* p2, int32 count, int32 size)    {return memcpy(p1,p2,count*size);}$/;"	f	language:C++
xs_Memcpy	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^void* xs_Memcpy         (void* p1, void* p2, int32 count, int32 size=1);   $/;"	p	language:C++
xs_Memmove	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^inline void* xs_Memmove (void* p1, void* p2, int32 count, int32 size)    {return memmove(p1,p2,count*size);}$/;"	f	language:C++
xs_Memmove	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^void* xs_Memmove        (void* p1, void* p2, int32 count, int32 size=1);  $/;"	p	language:C++
xs_Memset	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^inline void* xs_Memset  (void* p,  int32 data, int32 count, int32 size)  {return memset(p,data,count*size);}$/;"	f	language:C++
xs_Memset	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^void* xs_Memset         (void* p,  int32 data, int32 count, int32 size=1);   $/;"	p	language:C++
xs_Memzero	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^inline void* xs_Memzero (void* p,  int32 count, int32 size)              {return memset(p,0,count*size);}$/;"	f	language:C++
xs_Memzero	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^void* xs_Memzero        (void* p,  int32 count, int32 size=1);   $/;"	p	language:C++
xs_Min	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	36;"	d	language:C++
xs_NULL	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	35;"	d	language:C++
xs_PtrAlloc	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^inline void* xs_PtrAlloc    (int32 count, int32 size)                    {return malloc(count*size);}$/;"	f	language:C++
xs_PtrAlloc	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^void* xs_PtrAlloc       (int32 count, int32 size=1);                      $/;"	p	language:C++
xs_PtrFree	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^bool  xs_PtrFree        (void* p);                                       $/;"	p	language:C++
xs_PtrFree	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^inline bool  xs_PtrFree     (void* p)                                    {free(p); return true;}$/;"	f	language:C++
xs_PtrRealloc	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^inline void* xs_PtrRealloc  (void* p, int32 count, int32 size)           {return realloc(p, count*size);}$/;"	f	language:C++
xs_PtrRealloc	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	/^void* xs_PtrRealloc     (void* p, int32 count, int32 size=1);           $/;"	p	language:C++
xs_RoundToInt	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^finline int32 xs_RoundToInt(real64 val)$/;"	f	language:C++
xs_RoundToInt	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^int32 xs_RoundToInt       (real64 val);$/;"	p	language:C++
xs_ToInt	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^finline int32 xs_ToInt(real64 val, real64 dme)$/;"	f	language:C++
xs_ToInt	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^int32 xs_ToInt            (real64 val, real64 dme = -_xs_doublemagicroundeps);$/;"	p	language:C++
xs_Verify	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	42;"	d	language:C++
xs_Verify	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	45;"	d	language:C++
Xup	/home/rpradeep/Desktop/wmrde/src/dynamics.cpp	/^	Mat6b Xup[WmrModel::MAXNF];$/;"	l	language:C++
xx	/home/rpradeep/Desktop/kft/src/main.cpp	/^        double xx,yy;$/;"	l	language:C++
xyToij	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^void TrajectorySpace::xyToij ( const double x, const double y, int& i, int& j ) const$/;"	f	language:C++	class:dad_local_planner::TrajectorySpace
y	/home/rpradeep/Desktop/kft/src/main.cpp	/^    Real y[MAXNY];$/;"	l	language:C++
y	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^            double y;$/;"	l	language:C++
y	/home/rpradeep/Desktop/kft/src/planner/MotionPrimitiveManager.cpp	/^            f >> y;$/;"	l	language:C++
y	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^            double x, y;$/;"	l	language:C++
y	/home/rpradeep/Desktop/kft/src/TrajectoryPlanner.cpp	/^    double x,y,th,v,t;$/;"	l	language:C++
y	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    Real y[MAXNY];$/;"	l	language:C++
y	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	Real x,y;	\/\/location of ramp center$/;"	l	language:C++
y	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^    double y = 0;$/;"	l	language:C++
y	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    Real y[MAXNY];$/;"	l	language:C++
y	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	Real y[MAXNY];$/;"	l	language:C++
y	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	Real y[MAXNY];$/;"	l	language:C++
y0	/home/rpradeep/Desktop/kft/src/main.cpp	/^    Real y0[MAXNY];$/;"	l	language:C++
y0	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    Real y0[MAXNY];$/;"	l	language:C++
y0	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    Real y0[MAXNY];$/;"	l	language:C++
y0	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	Real y0[MAXNY];$/;"	l	language:C++
y0	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	Real y0[MAXNY];$/;"	l	language:C++
y1	/home/rpradeep/Desktop/kft/src/planner/TubeCostEvaluator.cpp	/^    double y1 = dir[1];$/;"	l	language:C++
yaw	/home/rpradeep/Desktop/wmrde/src/demo/terrains.cpp	/^	Real yaw;	\/\/ramp orientation$/;"	l	language:C++
yawrate	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^	Real yawrate = 0;$/;"	l	language:C++
yawrate	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^	Real yawrate = 0;$/;"	l	language:C++
yawrate	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^	Real yawrate = 0;$/;"	l	language:C++
ydot	/home/rpradeep/Desktop/kft/src/main.cpp	/^    Real ydot[MAXNY];$/;"	l	language:C++
ydot	/home/rpradeep/Desktop/kft/src/wmrde/main.cpp	/^    Real ydot[MAXNY];$/;"	l	language:C++
ydot	/home/rpradeep/Desktop/wmrde/src/main.cpp	/^    Real ydot[MAXNY];$/;"	l	language:C++
ydot	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^	Real ydot[MAXNY];$/;"	l	language:C++
ydot	/home/rpradeep/Desktop/wmrsim/src/test.cpp	/^	Real ydot[MAXNY];$/;"	l	language:C++
ymax	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	Real xmin,xmax,ymin,ymax;	\/\/bounding box$/;"	m	language:C++	class:TriMeshSurf
ymin	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/TriMeshSurf.h	/^	Real xmin,xmax,ymin,ymax;	\/\/bounding box$/;"	m	language:C++	class:TriMeshSurf
yy	/home/rpradeep/Desktop/kft/src/main.cpp	/^        double xx,yy;$/;"	l	language:C++
Z	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^    const Real* Z = surf->get_Z();$/;"	l	language:C++
z	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^                 tempMov.z() = moveSpeed;$/;"	p	language:C++	file:
z	/home/rpradeep/Desktop/sim/FirstPersonController.cpp	/^                tempMov.z() = -moveSpeed;$/;"	p	language:C++	file:
Z	/home/rpradeep/Desktop/wmrde/include/wmrde/surface/GridSurf.h	/^	Real Z[buffer]; \/\/height data$/;"	m	language:C++	class:GridSurf
Z	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^    const Real* Z = surf->get_Z();$/;"	l	language:C++
Z	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^	const Real* Z = surf->get_Z();$/;"	l	language:C++
Z	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^    const Real* Z = surf->get_Z();$/;"	l	language:C++
zoe	/home/rpradeep/Desktop/kft/include/wmrde/demo/zoemodel.h	/^void zoe( WmrModel& mdl, Real state[], Real qvel[]);$/;"	p	language:C++
zoe	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^void zoe(WmrModel& mdl, Real state[], Real qvel[]) {$/;"	f	language:C++
zoe	/home/rpradeep/Desktop/wmrde/include/wmrde/demo/zoemodel.h	/^void zoe( WmrModel& mdl, Real state[], Real qvel[]);$/;"	p	language:C++
zoe	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^void zoe(WmrModel& mdl, Real state[], Real qvel[]) {$/;"	f	language:C++
zoe	/home/rpradeep/Desktop/wmrsim/include/wmrde/demo/zoemodel.h	/^void zoe(WmrModel& mdl, Real state[], Real qvel[]);$/;"	p	language:C++
zoe	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^void zoe(WmrModel& mdl, Real state[], Real qvel[]) {$/;"	f	language:C++
zoeAct	/home/rpradeep/Desktop/kft/include/wmrde/demo/zoemodel.h	/^void zoeAct( const Real params[], const Real ucmd[], const Real u[], const Real interr[], \/\/inputs$/;"	p	language:C++
zoeAct	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^void zoeAct( const Real params[], const Real ucmd[], const Real u[], const Real interr[], \/\/inputs$/;"	f	language:C++
zoeAct	/home/rpradeep/Desktop/wmrde/include/wmrde/demo/zoemodel.h	/^void zoeAct( const Real params[], const Real ucmd[], const Real u[], const Real interr[], \/\/inputs$/;"	p	language:C++
zoeAct	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^void zoeAct( const Real params[], const Real ucmd[], const Real u[], const Real interr[], \/\/inputs$/;"	f	language:C++
zoeAct	/home/rpradeep/Desktop/wmrsim/include/wmrde/demo/zoemodel.h	/^void zoeAct( const Real params[], const Real ucmd[], const Real u[], const Real interr[], \/\/inputs$/;"	p	language:C++
zoeAct	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^void zoeAct( const Real params[], const Real ucmd[], const Real u[], const Real interr[], \/\/inputs$/;"	f	language:C++
zoeArcController	/home/rpradeep/Desktop/kft/include/wmrde/demo/zoemodel.h	/^void zoeArcController( const Real speed, const Real turnrad, const Real* steer, \/\/inputs$/;"	p	language:C++
zoeArcController	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^void zoeArcController( const Real speed, const Real turnrad, const Real* steer, \/\/inputs$/;"	f	language:C++
zoeArcController	/home/rpradeep/Desktop/wmrde/include/wmrde/demo/zoemodel.h	/^void zoeArcController( const Real speed, const Real turnrad, const Real* steer, \/\/inputs$/;"	p	language:C++
zoeArcController	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^void zoeArcController( const Real speed, const Real turnrad, const Real* steer, \/\/inputs$/;"	f	language:C++
zoeArcController	/home/rpradeep/Desktop/wmrsim/include/wmrde/demo/zoemodel.h	/^void zoeArcController( const Real speed, const Real turnrad, const Real* steer, \/\/inputs$/;"	p	language:C++
zoeArcController	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^void zoeArcController( const Real speed, const Real turnrad, const Real* steer, \/\/inputs$/;"	f	language:C++
zoeConstraints	/home/rpradeep/Desktop/kft/include/wmrde/demo/zoemodel.h	/^void zoeConstraints( const WmrModel& mdl, const Real jd[], const Real jr[], \/\/inputs$/;"	p	language:C++
zoeConstraints	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^void zoeConstraints( const WmrModel& mdl, const Real jd[], const Real jr[], \/\/inputs$/;"	f	language:C++
zoeConstraints	/home/rpradeep/Desktop/wmrde/include/wmrde/demo/zoemodel.h	/^void zoeConstraints( const WmrModel& mdl, const Real jd[], const Real jr[], \/\/inputs$/;"	p	language:C++
zoeConstraints	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^void zoeConstraints( const WmrModel& mdl, const Real jd[], const Real jr[], \/\/inputs$/;"	f	language:C++
zoeConstraints	/home/rpradeep/Desktop/wmrsim/include/wmrde/demo/zoemodel.h	/^void zoeConstraints( const WmrModel& mdl, const Real jd[], const Real jr[], \/\/inputs$/;"	p	language:C++
zoeConstraints	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^void zoeConstraints( const WmrModel& mdl, const Real jd[], const Real jr[], \/\/inputs$/;"	f	language:C++
zoeController	/home/rpradeep/Desktop/kft/include/wmrde/demo/zoemodel.h	/^void zoeController( const WmrModel& mdl, const Real time, const Real state[], \/\/inputs$/;"	p	language:C++
zoeController	/home/rpradeep/Desktop/kft/src/wmrde/demo/zoemodel.cpp	/^void zoeController( const WmrModel& mdl, const Real time, const Real state[],\/\/inputs$/;"	f	language:C++
zoeController	/home/rpradeep/Desktop/wmrde/include/wmrde/demo/zoemodel.h	/^void zoeController( const WmrModel& mdl, const Real time, const Real state[], \/\/inputs$/;"	p	language:C++
zoeController	/home/rpradeep/Desktop/wmrde/src/demo/zoemodel.cpp	/^void zoeController( const WmrModel& mdl, const Real time, const Real state[],\/\/inputs$/;"	f	language:C++
zoeController	/home/rpradeep/Desktop/wmrsim/include/wmrde/demo/zoemodel.h	/^void zoeController(const WmrModel& mdl, const Real time, const Real state[], \/\/inputs$/;"	p	language:C++
zoeController	/home/rpradeep/Desktop/wmrsim/src/demo/zoemodel.cpp	/^void zoeController(const WmrModel& mdl, const Real time, const Real state[], \/\/inputs$/;"	f	language:C++
zoeScene	/home/rpradeep/Desktop/wmrde/include/wmrde/demo/zoescene.h	/^void zoeScene(const WmrModel& mdl, WmrAnimation& anim); $/;"	p	language:C++
zoeScene	/home/rpradeep/Desktop/wmrde/src/demo/zoescene.cpp	/^void zoeScene(const WmrModel& mdl, WmrAnimation& anim) {$/;"	f	language:C++
zoeScene	/home/rpradeep/Desktop/wmrsim/include/wmrde/demo/zoescene.h	/^void zoeScene(const WmrModel& mdl, WmrAnimation& anim); $/;"	p	language:C++
zoeScene	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^void zoeScene(const WmrModel& mdl, WmrAnimation& anim) {$/;"	f	language:C++
zoeScene	/home/rpradeep/Desktop/wmrsim/src/main.cpp	/^void zoeScene(const WmrModel& mdl, WmrAnimation& anim); $/;"	p	language:C++	file:
_WMRDE_COLLISION_H_	/home/rpradeep/Desktop/wmrsim/include/wmrde/collision.h	5;"	d	language:C++
_WMRDE_MODELS_H_	/home/rpradeep/Desktop/wmrsim/include/wmrde/demo/models.h	2;"	d	language:C++
_WMRDE_OPTIONS_H_	/home/rpradeep/Desktop/wmrsim/include/wmrde/options.h	5;"	d	language:C++
_WMRDE_ROCKYSCENE_H_	/home/rpradeep/Desktop/wmrsim/include/wmrde/demo/rockyscene.h	3;"	d	language:C++
_WMRDE_TALONSCENE_H_	/home/rpradeep/Desktop/wmrsim/include/wmrde/demo/talonscene.h	2;"	d	language:C++
_WMRDE_TEST_H_	/home/rpradeep/Desktop/wmrsim/include/wmrde/test.h	5;"	d	language:C++
_WMRDE_WMRMODELODE_H_	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	6;"	d	language:C++
_WMRDE_ZOEMODEL_H_	/home/rpradeep/Desktop/wmrsim/include/wmrde/demo/zoemodel.h	2;"	d	language:C++
_WMRDE_ZOESCENE_H_	/home/rpradeep/Desktop/wmrsim/include/wmrde/demo/zoescene.h	2;"	d	language:C++
_xs_BigEndian_	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	30;"	d	language:C++
_xs_DEFAULT_CONVERSION	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	15;"	d	language:C++
_xs_doublecopysgn	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	28;"	d	language:C++
_xs_doubleisnegative	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	29;"	d	language:C++
_xs_doublemagic	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^const real64 _xs_doublemagic			= real64 (6755399441055744.0); 	    \/\/2^52 * 1.5,  uses limited precisicion to floor$/;"	v	language:C++
_xs_doublemagicdelta	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^const real64 _xs_doublemagicdelta      	= (1.5e-8);                         \/\/almost .5f = .5f + 1e^(number of exp bit)$/;"	v	language:C++
_xs_doublemagicroundeps	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	/^const real64 _xs_doublemagicroundeps	= (.5f-_xs_doublemagicdelta);       \/\/almost .5f = .5f - 1e^(number of exp bit)$/;"	v	language:C++
_xs_iexp_	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	20;"	d	language:C++
_xs_iexp_	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	23;"	d	language:C++
_xs_iman_	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	21;"	d	language:C++
_xs_iman_	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	24;"	d	language:C++
_xs_MemoryAlloc_	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	70;"	d	language:C++
_xs_MemoryMove_	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	78;"	d	language:C++
_xs_Types_	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Config.h	13;"	d	language:C++
__forceinline	/home/rpradeep/Desktop/wmrde/include/wmrde/util/xs_Float.h	32;"	d	language:C++
__TutorialApplication_h_	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.h	18;"	d	language:C++
~BaseApplication	/home/rpradeep/Desktop/kft/src/wmrde/animate/BaseApplication.cpp	/^BaseApplication::~BaseApplication(void)$/;"	f	language:C++	class:BaseApplication
~BaseApplication	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/BaseApplication.h	/^    virtual ~BaseApplication(void);$/;"	p	language:C++	class:BaseApplication
~BaseApplication	/home/rpradeep/Desktop/wmrde/src/animate/BaseApplication.cpp	/^BaseApplication::~BaseApplication(void)$/;"	f	language:C++	class:BaseApplication
~BaseApplication	/home/rpradeep/Desktop/wmrsim/ogre_app/BaseApplication.cpp	/^BaseApplication::~BaseApplication(void)$/;"	f	language:C++	class:BaseApplication
~BaseApplication	/home/rpradeep/Desktop/wmrsim/src/sim/BaseApplication.cpp	/^BaseApplication::~BaseApplication(void)$/;"	f	language:C++	class:BaseApplication
~OgrePath	/home/rpradeep/Desktop/kft/include/wmrde/animate/OgrePath.h	/^    ~OgrePath();$/;"	p	language:C++	class:OgrePath
~OgrePath	/home/rpradeep/Desktop/kft/src/wmrde/animate/OgrePath.cpp	/^OgrePath::~OgrePath()$/;"	f	language:C++	class:OgrePath
~OgrePath	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgrePath.h	/^    ~OgrePath();$/;"	p	language:C++	class:OgrePath
~OgrePath	/home/rpradeep/Desktop/wmrde/src/animate/OgrePath.cpp	/^OgrePath::~OgrePath()$/;"	f	language:C++	class:OgrePath
~OgreText	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreText.h	/^    ~OgreText()$/;"	f	language:C++	class:OgreText
~OgreText	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/OgreTextDisplay.h	/^    ~OgreText()$/;"	f	language:C++	class:OgreText
~TrajectorySpace	/home/rpradeep/Desktop/kft/src/planner/TrajectorySpace.cpp	/^TrajectorySpace::~TrajectorySpace()$/;"	f	language:C++	class:dad_local_planner::TrajectorySpace
~TutorialApplication	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.cpp	/^TutorialApplication::~TutorialApplication(void)$/;"	f	language:C++	class:TutorialApplication
~TutorialApplication	/home/rpradeep/Desktop/wmrsim/ogre_app/TutorialApplication.h	/^    virtual ~TutorialApplication(void);$/;"	p	language:C++	class:TutorialApplication
~WmrAnimation	/home/rpradeep/Desktop/kft/include/wmrde/animate/WmrAnimation.h	/^    virtual ~WmrAnimation(void);$/;"	p	language:C++	class:WmrAnimation
~WmrAnimation	/home/rpradeep/Desktop/kft/src/wmrde/animate/WmrAnimation.cpp	/^WmrAnimation::~WmrAnimation(void)$/;"	f	language:C++	class:WmrAnimation
~WmrAnimation	/home/rpradeep/Desktop/wmrde/include/wmrde/animate/WmrAnimation.h	/^    virtual ~WmrAnimation(void);$/;"	p	language:C++	class:WmrAnimation
~WmrAnimation	/home/rpradeep/Desktop/wmrde/src/animate/WmrAnimation.cpp	/^WmrAnimation::~WmrAnimation(void)$/;"	f	language:C++	class:WmrAnimation
~WmrAnimation	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/WmrAnimation.h	/^    virtual ~WmrAnimation(void);$/;"	p	language:C++	class:WmrAnimation
~WmrAnimation	/home/rpradeep/Desktop/wmrsim/src/sim/WmrAnimation.cpp	/^WmrAnimation::~WmrAnimation(void)$/;"	f	language:C++	class:WmrAnimation
~WmrModelODE	/home/rpradeep/Desktop/wmrde/include/wmrde/ode/WmrModelODE.h	/^	~WmrModelODE(); \/\/destructor$/;"	p	language:C++	class:WmrModelODE
~WMRSim	/home/rpradeep/Desktop/wmrsim/include/wmrde/sim/wmrsim.h	/^    virtual ~WMRSim(void);$/;"	p	language:C++	class:WMRSim
~WMRSim	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.cpp	/^WMRSim::~WMRSim(void)$/;"	f	language:C++	class:WMRSim
~WMRSim	/home/rpradeep/Desktop/wmrsim/ogre_app/wmrsim.h	/^    virtual ~WMRSim(void);$/;"	p	language:C++	class:WMRSim
~WMRSim	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.cpp	/^WMRSim::~WMRSim(void)$/;"	f	language:C++	class:WMRSim
~WMRSim	/home/rpradeep/Desktop/wmrsim/src/sim/wmrsim.h	/^    virtual ~WMRSim(void);$/;"	p	language:C++	class:WMRSim
